var searchIndex = {};
searchIndex["abomonation"] = {"doc":"Abomonation (spelling intentional) is a fast serialization / deserialization crate.","items":[[5,"encode","abomonation","Encodes a typed reference into a binary buffer.",null,{"inputs":[{"name":"t"},{"name":"w"}],"output":{"name":"ioresult"}}],[5,"decode","","Decodes a mutable binary slice into an immutable typed reference.",null,null],[5,"measure","","Reports the number of bytes required to encode `self`.",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[0,"abomonated","","",null,null],[3,"Abomonated","abomonation::abomonated","A type wrapping owned decoded abomonated data.",null,null],[11,"new","","Attempts to create decoded data from owned mutable bytes.",0,{"inputs":[{"name":"s"}],"output":{"name":"option"}}],[11,"deref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"Abomonation","abomonation","Abomonation provides methods to serialize any heap data the implementor owns.",null,null],[11,"entomb","","Write any additional information about `&self` beyond its binary representation.",1,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"ioresult"}}],[11,"exhume","","Recover any information for `&mut self` not evident from its binary representation.",1,null],[11,"extent","","Reports the number of further bytes required to entomb `self`.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[14,"unsafe_abomonate","","The `unsafe_abomonate!` macro takes a type name with an optional list of fields, and implements `Abomonation` for the type, following the pattern of the tuple implementations: each method calls the equivalent method on each of its fields.",null,null]],"paths":[[3,"Abomonated"],[8,"Abomonation"]]};
searchIndex["abomonation_derive"] = {"doc":"","items":[[5,"Abomonation","abomonation_derive","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}]],"paths":[]};
searchIndex["byteorder"] = {"doc":"This crate provides convenience methods for encoding and decoding numbers in either big-endian or little-endian order.","items":[[4,"Error","byteorder","An error type for reading bytes.",null,null],[13,"UnexpectedEOF","","An unexpected EOF.",0,null],[13,"Io","","Any underlying IO error that occurs while reading bytes.",0,null],[4,"BigEndian","","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[6,"Result","","A short-hand for `result::Result<T, byteorder::Error>`.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends `Read` with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u64"],"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i64"],"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"result"}}],[8,"WriteBytesExt","","Extends `Write` with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[8,"ByteOrder","","ByteOrder describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",3,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",3,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",3,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",3,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",3,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",3,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",3,null],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",3,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",3,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",3,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",3,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",3,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",3,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",3,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",3,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",3,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",3,null],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",3,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",3,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",3,null],[11,"read_u16","","",4,null],[11,"read_u32","","",4,null],[11,"read_u64","","",4,null],[11,"read_uint","","",4,null],[11,"write_u16","","",4,null],[11,"write_u32","","",4,null],[11,"write_u64","","",4,null],[11,"write_uint","","",4,null],[11,"read_u16","","",5,null],[11,"read_u32","","",5,null],[11,"read_u64","","",5,null],[11,"read_uint","","",5,null],[11,"write_u16","","",5,null],[11,"write_u32","","",5,null],[11,"write_u64","","",5,null],[11,"write_uint","","",5,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"generics":["u8"],"name":"result"}}],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"generics":["i8"],"name":"result"}}],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"result"}}],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"generics":["i16"],"name":"result"}}],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"result"}}],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"generics":["u64"],"name":"result"}}],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"result"}}],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["u64"],"name":"result"}}],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["i64"],"name":"result"}}],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"generics":["f32"],"name":"result"}}],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from the underlying reader.",1,{"inputs":[{"name":"self"}],"output":{"generics":["f64"],"name":"result"}}],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"i64"},{"name":"usize"}],"output":{"name":"result"}}],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to the underlying writer.",2,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}]],"paths":[[4,"Error"],[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["differential_dataflow"] = {"doc":"Differential dataflow is a high-throughput, low-latency data-parallel programming framework.","items":[[0,"hashable","differential_dataflow","Traits and types related to the distribution of data.",null,null],[3,"OrdWrapper","differential_dataflow::hashable","A wrapper around hashable types that ensures an implementation of `Ord` that compares  hash values first.",null,null],[12,"item","","The item, so you can grab it.",0,null],[3,"HashableWrapper","","Wrapper to stash hash value with the actual value.",null,null],[12,"item","","The item, for reference.",1,null],[3,"UnsignedWrapper","","A wrapper around an unsigned integer, providing `hashed` as the value itself.",null,null],[12,"item","","The item.",2,null],[8,"Hashable","","Types with a `hashed` method, producing an unsigned output of some type.",null,null],[16,"Output","","The type of the output value.",3,null],[10,"hashed","","A well-distributed integer derived from the data.",3,null],[8,"HashOrdered","","A marker trait for types whose `Ord` implementation orders first by `hashed()`.",null,null],[11,"entomb","","",0,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"exhume","","",0,null],[11,"entomb","","",1,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"exhume","","",1,null],[11,"entomb","","",2,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"exhume","","",2,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ordwrapper"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"ordwrapper"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"ordwrapper"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"ordwrapper"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"hashed","","",0,null],[11,"deref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"hashablewrapper"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"hashablewrapper"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"hashablewrapper"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"hashablewrapper"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"self"},{"name":"hashablewrapper"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"self"},{"name":"hashablewrapper"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"self"},{"name":"hashablewrapper"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"self"},{"name":"hashablewrapper"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"hashablewrapper"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"hashablewrapper"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hashed","","",1,null],[11,"deref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"from","","",1,{"inputs":[{"name":"t"}],"output":{"name":"hashablewrapper"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"unsignedwrapper"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"unsignedwrapper"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"unsignedwrapper"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"self"},{"name":"unsignedwrapper"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"self"},{"name":"unsignedwrapper"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"self"},{"name":"unsignedwrapper"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"self"},{"name":"unsignedwrapper"}],"output":{"name":"bool"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"unsignedwrapper"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"unsignedwrapper"}],"output":{"name":"bool"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"unsignedwrapper"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hashed","","",2,null],[11,"deref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"from","","",2,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[0,"operators","differential_dataflow","Specialize differential dataflow operators.",null,null],[0,"arrange","differential_dataflow::operators","Arranges a collection into a re-usable trace structure.",null,null],[3,"BatchWrapper","differential_dataflow::operators::arrange","Wrapper type to permit transfer of `Rc` types, as in batch.",null,null],[12,"item","","The wrapped item.",4,null],[3,"TraceWriter","","A trace writer capability.",null,null],[3,"TraceAgent","","A `TraceReader` wrapper which can be imported into other dataflows.",null,null],[3,"Arranged","","An arranged collection of `(K,V)` values.",null,null],[12,"stream","","A stream containing arranged updates.",5,null],[12,"trace","","A shared trace, updated by the `Arrange` operator and readable by others.",5,null],[5,"query","","Report values associated with keys at certain times.",null,{"inputs":[{"name":"stream"},{"name":"t"}],"output":{"name":"stream"}}],[8,"Arrange","","A type that can be arranged into a trace of type `T`.",null,null],[10,"arrange","","Arranges a stream of `(Key, Val)` updates by `Key`. Accepts an empty instance of the trace type.",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["traceagent"],"name":"arranged"}}],[8,"ArrangeByKey","","Arranges something as `(Key,Val)` pairs according to a type `T` of trace.",null,null],[10,"arrange_by_key","","Arranges a collection of `(Key, Val)` records by `Key`.",7,{"inputs":[{"name":"self"}],"output":{"generics":["traceagent"],"name":"arranged"}}],[8,"ArrangeBySelf","","Arranges something as `(Key, ())` pairs according to a type `T` of trace.",null,null],[10,"arrange_by_self","","Arranges a collection of `Key` records by `Key`.",8,{"inputs":[{"name":"self"}],"output":{"generics":["traceagent"],"name":"arranged"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"batchwrapper"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"batchwrapper"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"batchwrapper"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"entomb","","",4,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"exhume","","",4,null],[11,"seal","","Advances the trace to `frontier`, providing batch data if it exists.",9,null],[11,"drop","","",9,{"inputs":[{"name":"self"}],"output":null}],[11,"advance_by","","",10,null],[11,"advance_frontier","","",10,null],[11,"distinguish_since","","",10,null],[11,"distinguish_frontier","","",10,null],[11,"cursor_through","","",10,null],[11,"map_batches","","",10,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"new","","Creates a new agent from a trace reader.",10,null],[11,"new_listener","","Attaches a new shared queue to the trace.",10,{"inputs":[{"name":"self"}],"output":{"generics":["refcell"],"name":"rc"}}],[11,"import","","Copies an existing collection into the supplied scope.",10,{"inputs":[{"name":"self"},{"name":"g"}],"output":{"generics":["traceagent"],"name":"arranged"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drop","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"enter","","Brings an arranged collection into a nested scope.",5,{"inputs":[{"name":"self"},{"name":"child"}],"output":{"generics":["child","traceenter"],"name":"arranged"}}],[11,"as_collection","","Flattens the stream into a `Collection`.",5,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"collection"}}],[11,"arrange","","",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["traceagent"],"name":"arranged"}}],[0,"group","differential_dataflow::operators","Group records by a key, and apply a reduction function.",null,null],[5,"consolidate_from","differential_dataflow::operators::group","Scans `vec[off..]` and consolidates differences of adjacent equivalent elements.",null,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":null}],[8,"Group","","Extension trait for the `group` differential dataflow method.",null,null],[10,"group","","Groups records by their first field, and applies reduction logic to the associated values.",11,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"collection"}}],[8,"Threshold","","Extension trait for the `distinct` differential dataflow method.",null,null],[10,"threshold","","Transforms the multiplicity of records.",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"collection"}}],[11,"distinct","","Reduces the collection to one occurrence of each distinct element.",12,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"collection"}}],[8,"Count","","Extension trait for the `count` differential dataflow method.",null,null],[10,"count","","Counts the number of occurrences of each element.",13,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"collection"}}],[8,"GroupArranged","","Extension trait for the `group_arranged` differential dataflow method.",null,null],[10,"group_arranged","","Applies `group` to arranged data, and returns an arrangement of output data.",14,{"inputs":[{"name":"self"},{"name":"l"},{"name":"t2"}],"output":{"generics":["traceagent"],"name":"arranged"}}],[11,"group_arranged","differential_dataflow::operators::arrange","",5,{"inputs":[{"name":"self"},{"name":"l"},{"name":"t2"}],"output":{"generics":["traceagent"],"name":"arranged"}}],[0,"consolidate","differential_dataflow::operators","Aggregates the weights of equal records into at most one record.",null,null],[8,"Consolidate","differential_dataflow::operators::consolidate","An extension method for consolidating weighted streams.",null,null],[10,"consolidate","","Aggregates the weights of equal records into at most one record.",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[0,"iterate","differential_dataflow::operators","Iterative application of a differential dataflow fragment.",null,null],[3,"Variable","differential_dataflow::operators::iterate","A differential dataflow collection variable",null,null],[8,"Iterate","","An extension trait for the `iterate` method.",null,null],[10,"iterate","","Iteratively apply `logic` to the source collection until convergence.",16,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"collection"}}],[11,"from","","Creates a new `Variable` and a `Stream` representing its output, from a supplied `source` stream.",17,{"inputs":[{"generics":["child"],"name":"collection"}],"output":{"name":"variable"}}],[11,"set","","Adds a new source of data to the `Variable`.",17,{"inputs":[{"name":"self"},{"name":"collection"}],"output":{"generics":["child"],"name":"collection"}}],[11,"deref","","",17,null],[0,"join","differential_dataflow::operators","Match pairs of records based on a key.",null,null],[8,"Join","differential_dataflow::operators::join","Join implementations for `(key,val)` data.",null,null],[11,"join","","Matches pairs `(key,val1)` and `(key,val2)` based on `key` and then applies a function.",18,{"inputs":[{"name":"self"},{"name":"collection"}],"output":{"name":"collection"}}],[10,"join_map","","Matches pairs `(key,val1)` and `(key,val2)` based on `key` and then applies a function.",18,{"inputs":[{"name":"self"},{"name":"collection"},{"name":"l"}],"output":{"name":"collection"}}],[10,"semijoin","","Matches pairs `(key, val)` and `key` based on `key`, producing the former with frequencies multiplied.",18,{"inputs":[{"name":"self"},{"name":"collection"}],"output":{"name":"collection"}}],[10,"antijoin","","Matches pairs `(key, val)` and `key` based on `key`, discarding values  in the first collection if their key is present in the second.",18,{"inputs":[{"name":"self"},{"name":"collection"}],"output":{"name":"collection"}}],[8,"JoinCore","","Matches the elements of two arranged traces.",null,null],[10,"join_core","","Joins two arranged collections with the same key type.",19,{"inputs":[{"name":"self"},{"name":"arranged"},{"name":"l"}],"output":{"name":"collection"}}],[11,"join_map","differential_dataflow::operators::arrange","",5,{"inputs":[{"name":"self"},{"name":"collection"},{"name":"l"}],"output":{"name":"collection"}}],[11,"semijoin","","",5,{"inputs":[{"name":"self"},{"name":"collection"}],"output":{"name":"collection"}}],[11,"antijoin","","",5,{"inputs":[{"name":"self"},{"name":"collection"}],"output":{"name":"collection"}}],[11,"join_core","","",5,{"inputs":[{"name":"self"},{"name":"arranged"},{"name":"l"}],"output":{"name":"collection"}}],[0,"count","differential_dataflow::operators","Group records by a key, and apply a reduction function.",null,null],[8,"CountTotal","differential_dataflow::operators::count","Extension trait for the `count` differential dataflow method.",null,null],[10,"count_total","","Counts the number of occurrences of each element.",20,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"collection"}}],[8,"CountTotalCore","","Extension trait for the `group_arranged` differential dataflow method.",null,null],[10,"count_total_core","","Applies `group` to arranged data, and returns an arrangement of output data.",21,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"collection"}}],[11,"count_total_core","differential_dataflow::operators::arrange","",5,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"collection"}}],[0,"threshold","differential_dataflow::operators","Reduce the collection to one occurrence of each distinct element.",null,null],[8,"ThresholdTotal","differential_dataflow::operators::threshold","Extension trait for the `distinct` differential dataflow method.",null,null],[10,"threshold_total","","Reduces the collection to one occurrence of each distinct element.",22,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"collection"}}],[11,"distinct_total","","Reduces the collection to one occurrence of each distinct element.",22,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"collection"}}],[11,"threshold_total","differential_dataflow::operators::arrange","",5,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"collection"}}],[0,"algorithms","differential_dataflow","Common algorithms constructed from differential dataflow operators.",null,null],[0,"prefix_sum","differential_dataflow::algorithms","Implementation of Parallel Prefix Sum",null,null],[5,"aggregate","differential_dataflow::algorithms::prefix_sum","Accumulate data in `collection` into all powers-of-two intervals containing them.",null,{"inputs":[{"name":"collection"},{"name":"f"}],"output":{"name":"collection"}}],[5,"broadcast","","Produces the accumulated values at each of the `usize` locations in `queries`.",null,{"inputs":[{"name":"collection"},{"name":"collection"},{"name":"d"},{"name":"f"}],"output":{"name":"collection"}}],[8,"PrefixSum","","Extension trait for the prefix_sum method.",null,null],[10,"prefix_sum","","Computes the prefix sum for each element in the collection.",23,{"inputs":[{"name":"self"},{"name":"d"},{"name":"f"}],"output":{"name":"self"}}],[10,"prefix_sum_at","","Determine the prefix sum at each element of `location`.",23,{"inputs":[{"name":"self"},{"name":"collection"},{"name":"d"},{"name":"f"}],"output":{"name":"self"}}],[0,"lattice","differential_dataflow","Partially ordered elements with a least upper bound.",null,null],[8,"Lattice","differential_dataflow::lattice","A bounded partially ordered type supporting joins and meets.",null,null],[10,"minimum","","The smallest element of the type.",24,{"inputs":[],"output":{"name":"self"}}],[10,"maximum","","The largest element of the type.",24,{"inputs":[],"output":{"name":"self"}}],[10,"join","","The smallest element greater than or equal to both arguments.",24,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"meet","","The largest element less than or equal to both arguments.",24,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"advance_by","","Advances self to the largest time indistinguishable under `frontier`.",24,null],[0,"trace","differential_dataflow","Traits and datastructures representing a collection trace.",null,null],[5,"consolidate","differential_dataflow::trace","Scans `vec[off..]` and consolidates differences of adjacent equivalent elements.",null,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":null}],[5,"consolidate_by","","Scans `vec[off..]` and consolidates differences of adjacent equivalent elements.",null,{"inputs":[{"name":"vec"},{"name":"usize"},{"name":"l"}],"output":null}],[0,"cursor","","Traits and types for navigating order sequences of update tuples.",null,null],[0,"cursor_list","differential_dataflow::trace::cursor","A generic cursor implementation merging multiple cursors.",null,null],[3,"CursorList","differential_dataflow::trace::cursor::cursor_list","Provides a cursor interface over a list of cursors.",null,null],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new cursor list from pre-existing cursors.",25,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"self"}}],[11,"key_valid","","",25,null],[11,"val_valid","","",25,null],[11,"key","","",25,null],[11,"val","","",25,null],[11,"map_times","","",25,null],[11,"step_key","","",25,null],[11,"seek_key","","",25,null],[11,"step_val","","",25,null],[11,"seek_val","","",25,null],[11,"rewind_keys","","",25,null],[11,"rewind_vals","","",25,null],[0,"cursor_pair","differential_dataflow::trace::cursor","A generic cursor implementation merging pairs of different cursors.",null,null],[3,"CursorPair","differential_dataflow::trace::cursor::cursor_pair","A cursor over the combined updates of two different cursors.",null,null],[11,"key_valid","","",26,null],[11,"val_valid","","",26,null],[11,"key","","",26,null],[11,"val","","",26,null],[11,"map_times","","",26,null],[11,"step_key","","",26,null],[11,"seek_key","","",26,null],[11,"step_val","","",26,null],[11,"seek_val","","",26,null],[11,"rewind_keys","","",26,null],[11,"rewind_vals","","",26,null],[8,"Cursor","differential_dataflow::trace::cursor","A cursor for navigating ordered `(key, val, time, diff)` updates.",null,null],[16,"Storage","","Type the cursor addresses data in.",27,null],[10,"key_valid","","Indicates if the current key is valid.",27,null],[10,"val_valid","","Indicates if the current value is valid.",27,null],[10,"key","","A reference to the current key. Asserts if invalid.",27,null],[10,"val","","A reference to the current value. Asserts if invalid.",27,null],[11,"get_key","","Returns a reference to the current key, if valid.",27,null],[11,"get_val","","Returns a reference to the current value, if valid.",27,null],[10,"map_times","","Applies `logic` to each pair of time and difference. Intended for mutation of the closure's scope.",27,null],[10,"step_key","","Advances the cursor to the next key. Indicates if the key is valid.",27,null],[10,"seek_key","","Advances the cursor to the specified key. Indicates if the key is valid.",27,null],[10,"step_val","","Advances the cursor to the next value. Indicates if the value is valid.",27,null],[10,"seek_val","","Advances the cursor to the specified value. Indicates if the value is valid.",27,null],[10,"rewind_keys","","Rewinds the cursor to the first key.    ",27,null],[10,"rewind_vals","","Rewinds the cursor to the first value for current key.",27,null],[8,"CursorDebug","","Debugging and testing utilities for Cursor.",null,null],[11,"to_vec","","Rewinds the cursor and outputs its contents to a Vec",28,null],[0,"description","differential_dataflow::trace","Descriptions of intervals of partially ordered times.",null,null],[3,"Description","differential_dataflow::trace::description","Describes an interval of partially ordered times.",null,null],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"description"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"entomb","","",29,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"extent","","",29,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"exhume","","",29,null],[11,"new","","Returns a new description from its component parts.",29,null],[11,"lower","","The lower envelope for times in the interval.",29,null],[11,"upper","","The upper envelope for times in the interval.",29,null],[11,"since","","Times from whose future the interval may be observed.",29,null],[0,"implementations","differential_dataflow::trace","Implementations of `Trace` and associated traits.",null,null],[3,"Batcher","differential_dataflow::trace::implementations","Creates batches from unordered tuples.",null,null],[0,"spine","","An append-only collection of update batches.",null,null],[3,"Spine","differential_dataflow::trace::implementations::spine","An append-only collection of update tuples.",null,null],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cursor_through","","",30,null],[11,"advance_by","","",30,null],[11,"advance_frontier","","",30,null],[11,"distinguish_since","","",30,null],[11,"distinguish_frontier","","",30,null],[11,"map_batches","","",30,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"new","","",30,{"inputs":[],"output":{"name":"self"}}],[11,"insert","","",30,null],[0,"spine_fueled","differential_dataflow::trace::implementations","An append-only collection of update batches.",null,null],[3,"Spine","differential_dataflow::trace::implementations::spine_fueled","An append-only collection of update tuples.",null,null],[11,"cursor_through","","",31,null],[11,"advance_by","","",31,null],[11,"advance_frontier","","",31,null],[11,"distinguish_since","","",31,null],[11,"distinguish_frontier","","",31,null],[11,"map_batches","","",31,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"new","","",31,{"inputs":[],"output":{"name":"self"}}],[11,"insert","","",31,null],[11,"new","differential_dataflow::trace::implementations","",32,{"inputs":[],"output":{"name":"self"}}],[11,"push_batch","","",32,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"seal","","",32,null],[11,"frontier","","",32,null],[0,"ord","","Trace and batch implementations based on sorted ranges.",null,null],[3,"OrdValBatch","differential_dataflow::trace::implementations::ord","An immutable collection of update tuples, from a contiguous interval of logical times.",null,null],[12,"layer","","Where all the dataz is.",33,null],[12,"desc","","Description of the update times this layer represents.",33,null],[3,"OrdValMerger","","State for an in-progress merge.",null,null],[3,"OrdValCursor","","A cursor for navigating a single layer.",null,null],[3,"OrdValBuilder","","A builder for creating layers from unsorted update tuples.",null,null],[3,"OrdKeyBatch","","An immutable collection of update tuples, from a contiguous interval of logical times.",null,null],[12,"layer","","Where all the dataz is.",34,null],[12,"desc","","Description of the update times this layer represents.",34,null],[3,"OrdKeyMerger","","State for an in-progress merge.",null,null],[3,"OrdKeyCursor","","A cursor for navigating a single layer.",null,null],[3,"OrdKeyBuilder","","A builder for creating layers from unsorted update tuples.",null,null],[6,"OrdValSpine","","A trace implementation using a spine of ordered lists.",null,null],[6,"OrdValSpineAbom","","A trace implementation using a spine of abomonated ordered lists.",null,null],[6,"OrdKeySpine","","A trace implementation for empty values using a spine of ordered lists.",null,null],[6,"OrdKeySpineAbom","","A trace implementation for empty values using a spine of abomonated ordered lists.",null,null],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"entomb","","",33,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"extent","","",33,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"exhume","","",33,null],[11,"cursor","","",33,null],[11,"len","","",33,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"description","","",33,{"inputs":[{"name":"self"}],"output":{"name":"description"}}],[11,"merge","","",33,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"begin_merge","","",33,null],[11,"advance_mut","","",33,null],[11,"done","","",35,{"inputs":[{"name":"self"}],"output":{"name":"ordvalbatch"}}],[11,"work","","",35,{"inputs":[{"name":"self"},{"name":"ordvalbatch"},{"name":"ordvalbatch"},{"name":"option"},{"name":"usize"}],"output":null}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"key","","",36,null],[11,"val","","",36,null],[11,"map_times","","",36,null],[11,"key_valid","","",36,null],[11,"val_valid","","",36,null],[11,"step_key","","",36,null],[11,"seek_key","","",36,null],[11,"step_val","","",36,null],[11,"seek_val","","",36,null],[11,"rewind_keys","","",36,null],[11,"rewind_vals","","",36,null],[11,"new","","",37,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","",37,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"push","","",37,null],[11,"done","","",37,null],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"entomb","","",34,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"extent","","",34,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"exhume","","",34,null],[11,"cursor","","",34,null],[11,"len","","",34,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"description","","",34,{"inputs":[{"name":"self"}],"output":{"name":"description"}}],[11,"merge","","",34,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"begin_merge","","",34,null],[11,"advance_mut","","",34,null],[11,"done","","",38,{"inputs":[{"name":"self"}],"output":{"name":"ordkeybatch"}}],[11,"work","","",38,{"inputs":[{"name":"self"},{"name":"ordkeybatch"},{"name":"ordkeybatch"},{"name":"option"},{"name":"usize"}],"output":null}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"key","","",39,null],[11,"val","","",39,null],[11,"map_times","","",39,null],[11,"key_valid","","",39,null],[11,"val_valid","","",39,null],[11,"step_key","","",39,null],[11,"seek_key","","",39,null],[11,"step_val","","",39,null],[11,"seek_val","","",39,null],[11,"rewind_keys","","",39,null],[11,"rewind_vals","","",39,null],[11,"new","","",40,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","",40,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"push","","",40,null],[11,"done","","",40,null],[0,"layers","differential_dataflow::trace","Traits and types for building trie-based indices.",null,null],[0,"ordered","differential_dataflow::trace::layers","Implementation using ordered keys and exponential search.",null,null],[3,"OrderedLayer","differential_dataflow::trace::layers::ordered","A level of the trie, with keys and offsets into a lower layer.",null,null],[12,"keys","","The keys of the layer.",41,null],[12,"offs","","The offsets associate with each key.",41,null],[12,"vals","","The ranges of values associated with the keys.",41,null],[3,"OrderedBuilder","","Assembles a layer of this ",null,null],[12,"keys","","Keys",42,null],[12,"offs","","Offsets",42,null],[12,"vals","","The next layer down",42,null],[3,"OrderedCursor","","A cursor with a child cursor that is updated as we move.",null,null],[12,"child","","The cursor for the trie layer below this one.",43,null],[5,"advance","","Reports the number of elements satisfing the predicate.",null,null],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"orderedlayer"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"self"},{"name":"orderedlayer"}],"output":{"name":"bool"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"orderedlayer"}}],[11,"entomb","","",41,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"extent","","",41,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"exhume","","",41,null],[11,"keys","","",41,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"tuples","","",41,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"cursor_from","","",41,null],[11,"boundary","","",42,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"done","","",42,null],[11,"with_capacity","","",42,null],[11,"copy_range","","",42,null],[11,"push_merge","","",42,null],[11,"merge_step","","Performs one step of merging.",42,null],[11,"new","","",42,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","",42,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"push_tuple","","",42,null],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"key","","",43,null],[11,"step","","",43,{"inputs":[{"name":"self"},{"name":"orderedlayer"}],"output":null}],[11,"seek","","",43,null],[11,"valid","","",43,{"inputs":[{"name":"self"},{"name":"orderedlayer"}],"output":{"name":"bool"}}],[11,"rewind","","",43,{"inputs":[{"name":"self"},{"name":"orderedlayer"}],"output":null}],[11,"reposition","","",43,{"inputs":[{"name":"self"},{"name":"orderedlayer"},{"name":"usize"},{"name":"usize"}],"output":null}],[0,"ordered_leaf","differential_dataflow::trace::layers","Implementation using ordered keys and exponential search.",null,null],[3,"OrderedLeaf","differential_dataflow::trace::layers::ordered_leaf","A layer of unordered values. ",null,null],[12,"vals","","Unordered values.",44,null],[3,"OrderedLeafBuilder","","A builder for unordered values.",null,null],[12,"vals","","Unordered values.",45,null],[3,"OrderedLeafCursor","","A cursor for walking through an unordered sequence of values.",null,null],[5,"advance","","Reports the number of elements satisfing the predicate.",null,null],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"orderedleaf"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"orderedleaf"}],"output":{"name":"bool"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"orderedleaf"}}],[11,"entomb","","",44,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"extent","","",44,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"exhume","","",44,null],[11,"keys","","",44,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"tuples","","",44,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"cursor_from","","",44,null],[11,"boundary","","",45,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"done","","",45,null],[11,"with_capacity","","",45,null],[11,"copy_range","","",45,null],[11,"push_merge","","",45,null],[11,"new","","",45,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","",45,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"push_tuple","","",45,null],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"key","","",46,null],[11,"step","","",46,{"inputs":[{"name":"self"},{"name":"orderedleaf"}],"output":null}],[11,"seek","","",46,null],[11,"valid","","",46,{"inputs":[{"name":"self"},{"name":"orderedleaf"}],"output":{"name":"bool"}}],[11,"rewind","","",46,{"inputs":[{"name":"self"},{"name":"orderedleaf"}],"output":null}],[11,"reposition","","",46,{"inputs":[{"name":"self"},{"name":"orderedleaf"},{"name":"usize"},{"name":"usize"}],"output":null}],[0,"hashed","differential_dataflow::trace::layers","Implementation using ordered keys with hashes and robin hood hashing.",null,null],[3,"HashedLayer","differential_dataflow::trace::layers::hashed","A level of the trie, with keys and offsets into a lower layer.",null,null],[12,"keys","","Keys and offsets for the keys.",47,null],[12,"vals","","A lower layer containing ranges of values.",47,null],[3,"Entry","","An entry in hash tables.",null,null],[3,"HashedBuilder","","Assembles a layer of this ",null,null],[12,"keys","","Entries in the hash map.",48,null],[12,"vals","","A builder for the layer below.",48,null],[3,"HashedCursor","","A cursor with a child cursor that is updated as we move.",null,null],[12,"child","","A cursor for the layer below this one.",49,null],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"keys","","",47,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"tuples","","",47,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"cursor_from","","",47,null],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"entry"}}],[11,"boundary","","Looks at the contents of self.temp and extends self.keys appropriately.",48,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"done","","",48,null],[11,"with_capacity","","",48,null],[11,"copy_range","","Copies fully formed ranges (note plural) of keys from another trie.",48,null],[11,"push_merge","","",48,null],[11,"new","","",48,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","",48,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"push_tuple","","",48,null],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"key","","",49,null],[11,"step","","",49,{"inputs":[{"name":"self"},{"name":"hashedlayer"}],"output":null}],[11,"seek","","",49,null],[11,"valid","","",49,{"inputs":[{"name":"self"},{"name":"hashedlayer"}],"output":{"name":"bool"}}],[11,"rewind","","",49,{"inputs":[{"name":"self"},{"name":"hashedlayer"}],"output":null}],[11,"reposition","","",49,{"inputs":[{"name":"self"},{"name":"hashedlayer"},{"name":"usize"},{"name":"usize"}],"output":null}],[8,"Trie","differential_dataflow::trace::layers","A collection of tuples, and types for building and enumerating them.",null,null],[16,"Item","","The type of item from which the type is constructed.",51,null],[16,"Cursor","","The type of cursor used to navigate the type.",51,null],[16,"MergeBuilder","","The type used to merge instances of the type together.",51,null],[16,"TupleBuilder","","The type used to assemble instances of the type from its `Item`s.",51,null],[10,"keys","","The number of distinct keys, as distinct from the total number of tuples.",51,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"tuples","","The total number of tuples in the collection.",51,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"cursor","","Returns a cursor capable of navigating the collection.",51,null],[10,"cursor_from","","Returns a cursor over a range of data, commonly used by others to restrict navigation to  sub-collections.",51,null],[11,"merge","","Merges two collections into a third.",51,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"Builder","","A type used to assemble collections.",null,null],[16,"Trie","","The type of collection produced.",52,null],[10,"boundary","","Requests a commitment to the offset of the current-most sub-collection.",52,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"done","","Finalizes the building process and returns the collection.",52,null],[8,"MergeBuilder","","A type used to assemble collections by merging other instances.",null,null],[10,"with_capacity","","Allocates an instance of the builder with sufficient capacity to contain the merged data.",53,null],[10,"copy_range","","Copies sub-collections of `other` into this collection.",53,null],[10,"push_merge","","Merges two sub-collections into one sub-collection.",53,null],[8,"TupleBuilder","","A type used to assemble collections from ordered sequences of tuples.",null,null],[16,"Item","","The type of item accepted for construction.",54,null],[10,"new","","Allocates a new builder.",54,{"inputs":[],"output":{"name":"self"}}],[10,"with_capacity","","Allocates a new builder with capacity for at least `cap` tuples.",54,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[10,"push_tuple","","Inserts a new into the collection.",54,null],[8,"Cursor","","A type supporting navigation.",null,null],[16,"Key","","The type revealed by the cursor.",55,null],[10,"key","","Reveals the current key.",55,null],[10,"step","","Advances the cursor by one element.",55,{"inputs":[{"name":"self"},{"name":"storage"}],"output":null}],[10,"seek","","Advances the cursor until the location where `key` would be expected.",55,null],[10,"valid","","Returns `true` if the cursor points at valid data. Returns `false` if the cursor is exhausted.",55,{"inputs":[{"name":"self"},{"name":"storage"}],"output":{"name":"bool"}}],[10,"rewind","","Rewinds the cursor to its initial state.",55,{"inputs":[{"name":"self"},{"name":"storage"}],"output":null}],[10,"reposition","","Repositions the cursor to a different range of values. ",55,{"inputs":[{"name":"self"},{"name":"storage"},{"name":"usize"},{"name":"usize"}],"output":null}],[0,"wrappers","differential_dataflow::trace","Wrappers around trace implementations, providing derived views of updates.",null,null],[0,"enter","differential_dataflow::trace::wrappers","Wrappers to provide trace access to nested scopes.",null,null],[3,"TraceEnter","differential_dataflow::trace::wrappers::enter","Wrapper to provide trace to nested scope.",null,null],[3,"BatchEnter","","Wrapper to provide batch to nested scope.",null,null],[3,"CursorEnter","","Wrapper to provide cursor to nested scope.",null,null],[3,"BatchCursorEnter","","Wrapper to provide cursor to nested scope.",null,null],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"map_batches","","",56,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"advance_by","","",56,null],[11,"advance_frontier","","",56,null],[11,"distinguish_since","","",56,null],[11,"distinguish_frontier","","",56,null],[11,"cursor_through","","",56,null],[11,"make_from","","Makes a new trace wrapper",56,{"inputs":[{"name":"tr"}],"output":{"name":"self"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"cursor","","",57,null],[11,"len","","",57,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"description","","",57,{"inputs":[{"name":"self"}],"output":{"name":"description"}}],[11,"make_from","","Makes a new batch wrapper",57,{"inputs":[{"name":"b"}],"output":{"name":"self"}}],[11,"key_valid","","",58,null],[11,"val_valid","","",58,null],[11,"key","","",58,null],[11,"val","","",58,null],[11,"map_times","","",58,null],[11,"step_key","","",58,null],[11,"seek_key","","",58,null],[11,"step_val","","",58,null],[11,"seek_val","","",58,null],[11,"rewind_keys","","",58,null],[11,"rewind_vals","","",58,null],[11,"key_valid","","",59,null],[11,"val_valid","","",59,null],[11,"key","","",59,null],[11,"val","","",59,null],[11,"map_times","","",59,null],[11,"step_key","","",59,null],[11,"seek_key","","",59,null],[11,"step_val","","",59,null],[11,"seek_val","","",59,null],[11,"rewind_keys","","",59,null],[11,"rewind_vals","","",59,null],[0,"rc","differential_dataflow::trace::wrappers","A reference-counted wrapper sharing one owned trace.",null,null],[3,"TraceBox","differential_dataflow::trace::wrappers::rc","A wrapper around a trace which tracks the frontiers of all referees.",null,null],[12,"advance_frontiers","","accumulated holds on times for advancement.",60,null],[12,"through_frontiers","","accumulated holds on times for distinction.",60,null],[12,"trace","","The wrapped trace.",60,null],[3,"TraceRc","","A handle to a shared trace.",null,null],[12,"wrapper","","Wrapped trace. Please be gentle when using.",61,null],[11,"new","","Moves an existing trace into a shareable trace wrapper.",60,{"inputs":[{"name":"tr"}],"output":{"name":"self"}}],[11,"adjust_advance_frontier","","Replaces elements of `lower` with those of `upper`.",60,null],[11,"adjust_through_frontier","","Replaces elements of `lower` with those of `upper`.",60,null],[11,"advance_by","","Sets frontier to now be elements in `frontier`.",61,null],[11,"advance_frontier","","",61,null],[11,"distinguish_since","","Allows the trace to compact batches of times before `frontier`.",61,null],[11,"distinguish_frontier","","",61,null],[11,"cursor_through","","Creates a new cursor over the wrapped trace.",61,null],[11,"map_batches","","",61,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"make_from","","Allocates a new handle from an existing wrapped wrapper.",61,null],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"drop","","",61,{"inputs":[{"name":"self"}],"output":null}],[0,"freeze","differential_dataflow::trace::wrappers","Wrappers to transform the timestamps of updates.",null,null],[3,"TraceFreeze","differential_dataflow::trace::wrappers::freeze","Wrapper to provide trace to nested scope.",null,null],[3,"BatchFreeze","","Wrapper to provide batch to nested scope.",null,null],[3,"CursorFreeze","","Wrapper to provide cursor to nested scope.",null,null],[3,"BatchCursorFreeze","","Wrapper to provide cursor to nested scope.",null,null],[5,"freeze","","Freezes updates to an arrangement using a supplied function.",null,{"inputs":[{"name":"arranged"},{"name":"f"}],"output":{"generics":["tracefreeze"],"name":"arranged"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"map_batches","","",62,{"inputs":[{"name":"self"},{"name":"f2"}],"output":null}],[11,"advance_by","","",62,null],[11,"advance_frontier","","",62,null],[11,"distinguish_since","","",62,null],[11,"distinguish_frontier","","",62,null],[11,"cursor_through","","",62,null],[11,"make_from","","Makes a new trace wrapper",62,{"inputs":[{"name":"tr"},{"name":"rc"}],"output":{"name":"self"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"cursor","","",63,null],[11,"len","","",63,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"description","","",63,{"inputs":[{"name":"self"}],"output":{"name":"description"}}],[11,"make_from","","Makes a new batch wrapper",63,{"inputs":[{"name":"b"},{"name":"rc"}],"output":{"name":"self"}}],[11,"key_valid","","",64,null],[11,"val_valid","","",64,null],[11,"key","","",64,null],[11,"val","","",64,null],[11,"map_times","","",64,null],[11,"step_key","","",64,null],[11,"seek_key","","",64,null],[11,"step_val","","",64,null],[11,"seek_val","","",64,null],[11,"rewind_keys","","",64,null],[11,"rewind_vals","","",64,null],[11,"key_valid","","",65,null],[11,"val_valid","","",65,null],[11,"key","","",65,null],[11,"val","","",65,null],[11,"map_times","","",65,null],[11,"step_key","","",65,null],[11,"seek_key","","",65,null],[11,"step_val","","",65,null],[11,"seek_val","","",65,null],[11,"rewind_keys","","",65,null],[11,"rewind_vals","","",65,null],[0,"rc_blanket_impls","differential_dataflow::trace","Blanket implementations for reference counted batches.",null,null],[3,"RcBatchCursor","differential_dataflow::trace::rc_blanket_impls","Wrapper to provide cursor to nested scope.",null,null],[3,"RcBatcher","","Wrapper type for batching reference counted batches.",null,null],[3,"RcBuilder","","Wrapper type for building reference counted batches.",null,null],[3,"RcMerger","","Wrapper type for merging reference counted batches.",null,null],[11,"key_valid","","",66,null],[11,"val_valid","","",66,null],[11,"key","","",66,null],[11,"val","","",66,null],[11,"map_times","","",66,null],[11,"step_key","","",66,null],[11,"seek_key","","",66,null],[11,"step_val","","",66,null],[11,"seek_val","","",66,null],[11,"rewind_keys","","",66,null],[11,"rewind_vals","","",66,null],[11,"new","","",67,{"inputs":[],"output":{"name":"self"}}],[11,"push_batch","","",67,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"seal","","",67,null],[11,"frontier","","",67,null],[11,"new","","",68,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","",68,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"push","","",68,null],[11,"done","","",68,null],[11,"work","","",69,{"inputs":[{"name":"self"},{"name":"rc"},{"name":"rc"},{"name":"option"},{"name":"usize"}],"output":null}],[11,"done","","",69,{"inputs":[{"name":"self"}],"output":{"name":"rc"}}],[0,"abomonated_blanket_impls","differential_dataflow::trace","Blanket implementations for reference counted batches.",null,null],[3,"AbomonatedBatchCursor","differential_dataflow::trace::abomonated_blanket_impls","Wrapper to provide cursor to nested scope.",null,null],[3,"AbomonatedBatcher","","Wrapper type for batching reference counted batches.",null,null],[3,"AbomonatedBuilder","","Wrapper type for building reference counted batches.",null,null],[3,"AbomonatedMerger","","Wrapper type for merging reference counted batches.",null,null],[11,"key_valid","","",70,null],[11,"val_valid","","",70,null],[11,"key","","",70,null],[11,"val","","",70,null],[11,"map_times","","",70,null],[11,"step_key","","",70,null],[11,"seek_key","","",70,null],[11,"step_val","","",70,null],[11,"seek_val","","",70,null],[11,"rewind_keys","","",70,null],[11,"rewind_vals","","",70,null],[11,"new","","",71,{"inputs":[],"output":{"name":"self"}}],[11,"push_batch","","",71,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"seal","","",71,null],[11,"frontier","","",71,null],[11,"new","","",72,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","",72,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"push","","",72,null],[11,"done","","",72,null],[11,"work","","",73,{"inputs":[{"name":"self"},{"name":"abomonated"},{"name":"abomonated"},{"name":"option"},{"name":"usize"}],"output":null}],[11,"done","","",73,{"inputs":[{"name":"self"}],"output":{"generics":["vec"],"name":"abomonated"}}],[8,"TraceReader","differential_dataflow::trace","A trace whose contents may be read.",null,null],[16,"Batch","","The type of an immutable collection of updates.",74,null],[16,"Cursor","","The type used to enumerate the collections contents.",74,null],[11,"cursor","","Provides a cursor over updates contained in the trace.",74,null],[10,"cursor_through","","Acquires a cursor to the restriction of the collection's contents to updates at times not greater or  equal to an element of `upper`.",74,null],[10,"advance_by","","Advances the frontier of times the collection must be correctly accumulable through.",74,null],[10,"advance_frontier","","Reports the frontier from which all time comparisions should be accurate.",74,null],[10,"distinguish_since","","Advances the frontier that may be used in `cursor_through`.",74,null],[10,"distinguish_frontier","","Reports the frontier from which the collection may be subsetted.",74,null],[10,"map_batches","","Maps some logic across the batches the collection manages.",74,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[8,"Trace","","An append-only collection of `(key, val, time, diff)` tuples.",null,null],[10,"new","","Allocates a new empty trace.",75,{"inputs":[],"output":{"name":"self"}}],[10,"insert","","Introduces a batch of updates to the trace.",75,null],[8,"BatchReader","","A batch of updates whose contents may be read.",null,null],[16,"Cursor","","The type used to enumerate the batch's contents.",76,null],[10,"cursor","","Acquires a cursor to the batch's contents.",76,null],[10,"len","","The number of updates in the batch.",76,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"description","","Describes the times of the updates in the batch.",76,{"inputs":[{"name":"self"}],"output":{"name":"description"}}],[11,"lower","","All times in the batch are greater or equal to an element of `lower`.",76,null],[11,"upper","","All times in the batch are not greater or equal to any element of `upper`.",76,null],[8,"Batch","","An immutable collection of updates.",null,null],[16,"Batcher","","A type used to assemble batches from disordered updates.",77,null],[16,"Builder","","A type used to assemble batches from ordered update sequences.",77,null],[16,"Merger","","A type used to progressively merge batches.",77,null],[10,"merge","","Merges two consecutive batches.",77,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"begin_merge","","Initiates the merging of consecutive batches.",77,null],[11,"advance_ref","","Advance times to `frontier` creating a new batch.",77,null],[11,"advance_mut","","Advance times to `frontier` updating this batch.",77,null],[8,"Batcher","","Functionality for collecting and batching updates.",null,null],[10,"new","","Allocates a new empty batcher.",78,{"inputs":[],"output":{"name":"self"}}],[10,"push_batch","","Adds an unordered batch of elements to the batcher.",78,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[10,"seal","","Returns all updates not greater or equal to an element of `upper`.",78,null],[10,"frontier","","Returns the lower envelope of contained update times.",78,null],[8,"Builder","","Functionality for building batches from ordered update sequences.",null,null],[10,"new","","Allocates an empty builder.",79,{"inputs":[],"output":{"name":"self"}}],[10,"with_capacity","","Allocates an empty builder with some capacity.",79,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[10,"push","","Adds an element to the batch.",79,null],[11,"extend","","Adds an ordered sequence of elements to the batch.",79,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[10,"done","","Completes building and returns the batch.",79,null],[8,"Merger","","Represents a merge in progress.",null,null],[10,"work","","Perform some amount of work, decrementing `fuel`.",80,{"inputs":[{"name":"self"},{"name":"output"},{"name":"output"},{"name":"option"},{"name":"usize"}],"output":null}],[10,"done","","Extracts merged results.",80,{"inputs":[{"name":"self"}],"output":{"name":"output"}}],[0,"input","differential_dataflow","Input sessions for simplified collection updates.",null,null],[3,"InputSession","differential_dataflow::input","An input session wrapping a single timely dataflow capability.",null,null],[8,"Input","","Create a new collection and input handle to control the collection.",null,null],[10,"new_collection","","Create a new collection and input handle to subsequently control the collection.",81,null],[10,"new_collection_from","","Create a new collection and input handle from initial data.",81,null],[11,"insert","","Adds an element to the collection.",82,{"inputs":[{"name":"self"},{"name":"d"}],"output":null}],[11,"remove","","Removes an element from the collection.",82,{"inputs":[{"name":"self"},{"name":"d"}],"output":null}],[11,"from","","Creates a new session from a reference to an input handle.",82,{"inputs":[{"name":"handle"}],"output":{"name":"self"}}],[11,"update","","Adds to the weight of an element in the collection.",82,{"inputs":[{"name":"self"},{"name":"d"},{"name":"r"}],"output":null}],[11,"flush","","Forces buffered data into the timely dataflow input, and advances its time to match that of the session.",82,{"inputs":[{"name":"self"}],"output":null}],[11,"advance_to","","Advances the logical time for future records.",82,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"epoch","","Reveals the current time of the session.",82,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"time","","Reveals the current time of the session.",82,{"inputs":[{"name":"self"}],"output":{"name":"product"}}],[11,"close","","Closes the input, flushing and sealing the wrapped timely input.",82,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",82,{"inputs":[{"name":"self"}],"output":null}],[0,"difference","differential_dataflow","A type that can be treated as a difference.",null,null],[3,"DiffPair","differential_dataflow::difference","The difference defined by a pair of difference elements.",null,null],[12,"element1","","The first element in the pair.",83,null],[12,"element2","","The second element in the pair.",83,null],[8,"Diff","","A type that can be treated as a difference.",null,null],[10,"is_zero","","Returns true if the element is the additive identity.",84,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"zero","","The additive identity.",84,{"inputs":[],"output":{"name":"self"}}],[11,"cmp","","",83,{"inputs":[{"name":"self"},{"name":"diffpair"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",83,{"inputs":[{"name":"self"},{"name":"diffpair"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",83,{"inputs":[{"name":"self"},{"name":"diffpair"}],"output":{"name":"bool"}}],[11,"le","","",83,{"inputs":[{"name":"self"},{"name":"diffpair"}],"output":{"name":"bool"}}],[11,"gt","","",83,{"inputs":[{"name":"self"},{"name":"diffpair"}],"output":{"name":"bool"}}],[11,"ge","","",83,{"inputs":[{"name":"self"},{"name":"diffpair"}],"output":{"name":"bool"}}],[11,"eq","","",83,{"inputs":[{"name":"self"},{"name":"diffpair"}],"output":{"name":"bool"}}],[11,"ne","","",83,{"inputs":[{"name":"self"},{"name":"diffpair"}],"output":{"name":"bool"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"diffpair"}}],[11,"new","","Creates a new Diff pair from two elements.",83,{"inputs":[{"name":"r1"},{"name":"r2"}],"output":{"name":"self"}}],[11,"is_zero","","",83,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"zero","","",83,{"inputs":[],"output":{"name":"self"}}],[11,"add","","",83,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"sub","","",83,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"neg","","",83,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"mul","","",83,null],[0,"collection","differential_dataflow","Types and traits associated with collections of data.",null,null],[3,"Collection","differential_dataflow::collection","A mutable collection of values of type `D`",null,null],[12,"inner","","The underlying timely dataflow stream.",85,null],[8,"AsCollection","","Conversion to a differential dataflow Collection.",null,null],[10,"as_collection","","Converts the type to a differential dataflow collection.",86,{"inputs":[{"name":"self"}],"output":{"name":"collection"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"collection"}}],[11,"new","","Creates a new Collection from a timely dataflow stream.",85,{"inputs":[{"name":"stream"}],"output":{"name":"collection"}}],[11,"map","","Creates a new collection by applying the supplied function to each input element.",85,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"collection"}}],[11,"map_in_place","","Creates a new collection by applying the supplied function to each input element.",85,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"collection"}}],[11,"flat_map","","Creates a new collection by applying the supplied function to each input element and accumulating the results.",85,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"collection"}}],[11,"negate","","Creates a new collection whose counts are the negation of those in the input.",85,{"inputs":[{"name":"self"}],"output":{"name":"collection"}}],[11,"filter","","Creates a new collection containing those input records satisfying the supplied predicate.",85,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"collection"}}],[11,"concat","","Creates a new collection accumulating the contents of the two collections.",85,{"inputs":[{"name":"self"},{"name":"collection"}],"output":{"name":"collection"}}],[11,"explode","","Replaces each record with another, with a new difference type.",85,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"collection"}}],[11,"enter","","Brings a Collection into a nested scope.",85,{"inputs":[{"name":"self"},{"name":"child"}],"output":{"generics":["child"],"name":"collection"}}],[11,"enter_at","","Brings a Collection into a nested scope, at varying times.",85,{"inputs":[{"name":"self"},{"name":"child"},{"name":"f"}],"output":{"generics":["child"],"name":"collection"}}],[11,"inspect","","Applies a supplied function to each update.",85,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"collection"}}],[11,"inspect_batch","","Applies a supplied function to each batch of updates.",85,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"collection"}}],[11,"probe","","Attaches a timely dataflow probe to the output of a Collection.",85,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"probe_with","","Attaches a timely dataflow probe to the output of a Collection.",85,{"inputs":[{"name":"self"},{"name":"handle"}],"output":{"name":"collection"}}],[11,"assert_eq","","Assert if the collections are ever different.",85,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"assert_empty","","Assert if the collection is ever non-empty.",85,{"inputs":[{"name":"self"}],"output":null}],[11,"scope","","The scope containing the underlying timely dataflow stream.",85,{"inputs":[{"name":"self"}],"output":{"name":"g"}}],[11,"leave","","Returns the final value of a Collection from a nested scope to its containing scope.",85,{"inputs":[{"name":"self"}],"output":{"name":"collection"}}],[8,"Data","differential_dataflow","A composite trait for data types usable in differential dataflow.",null,null],[11,"arrange","differential_dataflow::collection","",85,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["traceagent"],"name":"arranged"}}],[11,"arrange","","",85,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["traceagent"],"name":"arranged"}}],[11,"arrange_by_key","","",85,{"inputs":[{"name":"self"}],"output":{"generics":["traceagent"],"name":"arranged"}}],[11,"arrange_by_self","","",85,{"inputs":[{"name":"self"}],"output":{"generics":["traceagent"],"name":"arranged"}}],[11,"group","","",85,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"collection"}}],[11,"threshold","","",85,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"collection"}}],[11,"count","","",85,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"collection"}}],[11,"group_arranged","","",85,{"inputs":[{"name":"self"},{"name":"l"},{"name":"t2"}],"output":{"generics":["traceagent"],"name":"arranged"}}],[11,"consolidate","","",85,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"iterate","","",85,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"collection"}}],[11,"join_map","","",85,{"inputs":[{"name":"self"},{"name":"collection"},{"name":"l"}],"output":{"name":"collection"}}],[11,"semijoin","","",85,{"inputs":[{"name":"self"},{"name":"collection"}],"output":{"name":"collection"}}],[11,"antijoin","","",85,{"inputs":[{"name":"self"},{"name":"collection"}],"output":{"name":"collection"}}],[11,"join_core","","",85,{"inputs":[{"name":"self"},{"name":"arranged"},{"name":"l"}],"output":{"name":"collection"}}],[11,"count_total","","",85,{"inputs":[{"name":"self"}],"output":{"generics":["isize"],"name":"collection"}}],[11,"threshold_total","","",85,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"collection"}}],[11,"prefix_sum","","",85,{"inputs":[{"name":"self"},{"name":"d"},{"name":"f"}],"output":{"name":"self"}}],[11,"prefix_sum_at","","",85,{"inputs":[{"name":"self"},{"name":"collection"},{"name":"d"},{"name":"f"}],"output":{"name":"self"}}]],"paths":[[3,"OrdWrapper"],[3,"HashableWrapper"],[3,"UnsignedWrapper"],[8,"Hashable"],[3,"BatchWrapper"],[3,"Arranged"],[8,"Arrange"],[8,"ArrangeByKey"],[8,"ArrangeBySelf"],[3,"TraceWriter"],[3,"TraceAgent"],[8,"Group"],[8,"Threshold"],[8,"Count"],[8,"GroupArranged"],[8,"Consolidate"],[8,"Iterate"],[3,"Variable"],[8,"Join"],[8,"JoinCore"],[8,"CountTotal"],[8,"CountTotalCore"],[8,"ThresholdTotal"],[8,"PrefixSum"],[8,"Lattice"],[3,"CursorList"],[3,"CursorPair"],[8,"Cursor"],[8,"CursorDebug"],[3,"Description"],[3,"Spine"],[3,"Spine"],[3,"Batcher"],[3,"OrdValBatch"],[3,"OrdKeyBatch"],[3,"OrdValMerger"],[3,"OrdValCursor"],[3,"OrdValBuilder"],[3,"OrdKeyMerger"],[3,"OrdKeyCursor"],[3,"OrdKeyBuilder"],[3,"OrderedLayer"],[3,"OrderedBuilder"],[3,"OrderedCursor"],[3,"OrderedLeaf"],[3,"OrderedLeafBuilder"],[3,"OrderedLeafCursor"],[3,"HashedLayer"],[3,"HashedBuilder"],[3,"HashedCursor"],[3,"Entry"],[8,"Trie"],[8,"Builder"],[8,"MergeBuilder"],[8,"TupleBuilder"],[8,"Cursor"],[3,"TraceEnter"],[3,"BatchEnter"],[3,"CursorEnter"],[3,"BatchCursorEnter"],[3,"TraceBox"],[3,"TraceRc"],[3,"TraceFreeze"],[3,"BatchFreeze"],[3,"CursorFreeze"],[3,"BatchCursorFreeze"],[3,"RcBatchCursor"],[3,"RcBatcher"],[3,"RcBuilder"],[3,"RcMerger"],[3,"AbomonatedBatchCursor"],[3,"AbomonatedBatcher"],[3,"AbomonatedBuilder"],[3,"AbomonatedMerger"],[8,"TraceReader"],[8,"Trace"],[8,"BatchReader"],[8,"Batch"],[8,"Batcher"],[8,"Builder"],[8,"Merger"],[8,"Input"],[3,"InputSession"],[3,"DiffPair"],[8,"Diff"],[3,"Collection"],[8,"AsCollection"]]};
searchIndex["fnv"] = {"doc":"An implementation of the [Fowler–Noll–Vo hash function][chongo].","items":[[3,"FnvHasher","fnv","An implementation of the Fowler–Noll–Vo hash function.",null,null],[6,"FnvBuildHasher","","A builder for default FNV hashers.",null,null],[6,"FnvHashMap","","A `HashMap` using a default FNV hasher.",null,null],[6,"FnvHashSet","","A `HashSet` using a default FNV hasher.",null,null],[11,"default","","",0,{"inputs":[],"output":{"name":"fnvhasher"}}],[11,"with_key","","Create an FNV hasher starting with a state corresponding to the hash `key`.",0,{"inputs":[{"name":"u64"}],"output":{"name":"fnvhasher"}}],[11,"finish","","",0,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"write","","",0,null]],"paths":[[3,"FnvHasher"]]};
searchIndex["getopts"] = {"doc":"Simple getopt alternative.","items":[[3,"Options","getopts","A description of the options that a program can handle.",null,null],[3,"Matches","","The result of checking command line arguments. Contains a vector of matches and a vector of free strings.",null,null],[12,"free","","Free string fragments",0,null],[4,"ParsingStyle","","What parsing style to use when parsing arguments.",null,null],[13,"FloatingFrees","","Flags and \"free\" arguments can be freely inter-mixed.",1,null],[13,"StopAtFirstFree","","As soon as a \"free\" argument (i.e. non-flag) is encountered, stop considering any remaining arguments as flags.",1,null],[4,"HasArg","","Describes whether an option has an argument.",null,null],[13,"Yes","","The option requires an argument.",2,null],[13,"No","","The option takes no argument.",2,null],[13,"Maybe","","The option argument is optional.",2,null],[4,"Occur","","Describes how often an option may occur.",null,null],[13,"Req","","The option occurs once.",3,null],[13,"Optional","","The option occurs at most once.",3,null],[13,"Multi","","The option occurs zero or more times.",3,null],[4,"Fail","","The type returned when the command line does not conform to the expected format. Use the `Debug` implementation to output detailed information.",null,null],[13,"ArgumentMissing","","The option requires an argument but none was passed.",4,null],[13,"UnrecognizedOption","","The passed option is not declared among the possible options.",4,null],[13,"OptionMissing","","A required option is not present.",4,null],[13,"OptionDuplicated","","A single occurrence option is being used multiple times.",4,null],[13,"UnexpectedArgument","","There's an argument being passed to a non-argument option.",4,null],[6,"Result","","The result of parsing a command line with a set of options.",null,null],[11,"new","","Create a blank set of options.",5,{"inputs":[],"output":{"name":"options"}}],[11,"parsing_style","","Set the parsing style.",5,{"inputs":[{"name":"self"},{"name":"parsingstyle"}],"output":{"name":"options"}}],[11,"long_only","","Set or clear \"long options only\" mode.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"options"}}],[11,"opt","","Create a generic option group, stating all parameters explicitly.",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"hasarg"},{"name":"occur"}],"output":{"name":"options"}}],[11,"optflag","","Create a long option that is optional and does not take an argument.",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"options"}}],[11,"optflagmulti","","Create a long option that can occur more than once and does not take an argument.",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"options"}}],[11,"optflagopt","","Create a long option that is optional and takes an optional argument.",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"options"}}],[11,"optmulti","","Create a long option that is optional, takes an argument, and may occur multiple times.",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"options"}}],[11,"optopt","","Create a long option that is optional and takes an argument.",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"options"}}],[11,"reqopt","","Create a long option that is required and takes an argument.",5,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"},{"name":"str"},{"name":"str"}],"output":{"name":"options"}}],[11,"parse","","Parse command line arguments according to the provided options.",5,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"result"}}],[11,"short_usage","","Derive a short one-line usage summary from a set of long options.",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"usage","","Derive a formatted message from a set of options.",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[11,"usage_with_format","","Derive a custom formatted message from a set of options. The formatted options provided to a closure as an iterator.",5,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"string"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"parsingstyle"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"parsingstyle"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"hasarg"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"hasarg"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"occur"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"occur"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"matches"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"matches"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"matches"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"fail"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"fail"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"fail"}],"output":{"name":"bool"}}],[11,"description","","",4,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"opt_defined","","Returns true if an option was defined",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"opt_present","","Returns true if an option was matched.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"opt_count","","Returns the number of times an option was matched.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"usize"}}],[11,"opts_present","","Returns true if any of several options were matched.",0,null],[11,"opts_str","","Returns the string argument supplied to one of several matching options or `None`.",0,null],[11,"opt_strs","","Returns a vector of the arguments provided to all matches of the given option.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["string"],"name":"vec"}}],[11,"opt_str","","Returns the string argument supplied to a matching option or `None`.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[11,"opt_default","","Returns the matching string, a default, or `None`.",0,{"inputs":[{"name":"self"},{"name":"str"},{"name":"str"}],"output":{"generics":["string"],"name":"option"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Matches"],[4,"ParsingStyle"],[4,"HasArg"],[4,"Occur"],[4,"Fail"],[3,"Options"]]};
searchIndex["graph_map"] = {"doc":"","items":[[0,"graph_map","graph_map","",null,null],[3,"GraphMMap","graph_map::graph_map","",null,null],[11,"nodes","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"edges","","",0,null],[11,"new","","",0,{"inputs":[{"name":"str"}],"output":{"name":"graphmmap"}}],[0,"typed_map","graph_map","",null,null],[3,"TypedMemoryMap","graph_map::typed_map","",null,null],[11,"new","","",1,{"inputs":[{"name":"string"}],"output":{"name":"typedmemorymap"}}],[11,"index","","",1,null]],"paths":[[3,"GraphMMap"],[3,"TypedMemoryMap"]]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"group","libc","",null,null],[12,"gr_name","","",0,null],[12,"gr_passwd","","",0,null],[12,"gr_gid","","",0,null],[12,"gr_mem","","",0,null],[3,"utimbuf","","",null,null],[12,"actime","","",1,null],[12,"modtime","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[3,"rusage","","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[3,"in_addr","","",null,null],[12,"s_addr","","",6,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",7,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",8,null],[12,"imr_interface","","",8,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",9,null],[12,"ipv6mr_interface","","",9,null],[3,"hostent","","",null,null],[12,"h_name","","",10,null],[12,"h_aliases","","",10,null],[12,"h_addrtype","","",10,null],[12,"h_length","","",10,null],[12,"h_addr_list","","",10,null],[3,"iovec","","",null,null],[12,"iov_base","","",11,null],[12,"iov_len","","",11,null],[3,"pollfd","","",null,null],[12,"fd","","",12,null],[12,"events","","",12,null],[12,"revents","","",12,null],[3,"winsize","","",null,null],[12,"ws_row","","",13,null],[12,"ws_col","","",13,null],[12,"ws_xpixel","","",13,null],[12,"ws_ypixel","","",13,null],[3,"linger","","",null,null],[12,"l_onoff","","",14,null],[12,"l_linger","","",14,null],[3,"sigval","","",null,null],[12,"sival_ptr","","",15,null],[3,"itimerval","","",null,null],[12,"it_interval","","",16,null],[12,"it_value","","",16,null],[3,"tms","","",null,null],[12,"tms_utime","","",17,null],[12,"tms_stime","","",17,null],[12,"tms_cutime","","",17,null],[12,"tms_cstime","","",17,null],[3,"servent","","",null,null],[12,"s_name","","",18,null],[12,"s_aliases","","",18,null],[12,"s_port","","",18,null],[12,"s_proto","","",18,null],[3,"protoent","","",null,null],[12,"p_name","","",19,null],[12,"p_aliases","","",19,null],[12,"p_proto","","",19,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",20,null],[12,"sa_data","","",20,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",21,null],[12,"sin_port","","",21,null],[12,"sin_addr","","",21,null],[12,"sin_zero","","",21,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",22,null],[12,"sin6_port","","",22,null],[12,"sin6_flowinfo","","",22,null],[12,"sin6_addr","","",22,null],[12,"sin6_scope_id","","",22,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",23,null],[12,"sun_path","","",23,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",24,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",25,null],[12,"ai_family","","",25,null],[12,"ai_socktype","","",25,null],[12,"ai_protocol","","",25,null],[12,"ai_addrlen","","",25,null],[12,"ai_addr","","",25,null],[12,"ai_canonname","","",25,null],[12,"ai_next","","",25,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",26,null],[12,"nl_pid","","",26,null],[12,"nl_groups","","",26,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",27,null],[12,"sll_protocol","","",27,null],[12,"sll_ifindex","","",27,null],[12,"sll_hatype","","",27,null],[12,"sll_pkttype","","",27,null],[12,"sll_halen","","",27,null],[12,"sll_addr","","",27,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",28,null],[12,"tm_min","","",28,null],[12,"tm_hour","","",28,null],[12,"tm_mday","","",28,null],[12,"tm_mon","","",28,null],[12,"tm_year","","",28,null],[12,"tm_wday","","",28,null],[12,"tm_yday","","",28,null],[12,"tm_isdst","","",28,null],[12,"tm_gmtoff","","",28,null],[12,"tm_zone","","",28,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",29,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",30,null],[12,"dli_fbase","","",30,null],[12,"dli_sname","","",30,null],[12,"dli_saddr","","",30,null],[3,"epoll_event","","",null,null],[12,"events","","",31,null],[12,"u64","","",31,null],[3,"utsname","","",null,null],[12,"sysname","","",32,null],[12,"nodename","","",32,null],[12,"release","","",32,null],[12,"version","","",32,null],[12,"machine","","",32,null],[12,"domainname","","",32,null],[3,"lconv","","",null,null],[12,"decimal_point","","",33,null],[12,"thousands_sep","","",33,null],[12,"grouping","","",33,null],[12,"int_curr_symbol","","",33,null],[12,"currency_symbol","","",33,null],[12,"mon_decimal_point","","",33,null],[12,"mon_thousands_sep","","",33,null],[12,"mon_grouping","","",33,null],[12,"positive_sign","","",33,null],[12,"negative_sign","","",33,null],[12,"int_frac_digits","","",33,null],[12,"frac_digits","","",33,null],[12,"p_cs_precedes","","",33,null],[12,"p_sep_by_space","","",33,null],[12,"n_cs_precedes","","",33,null],[12,"n_sep_by_space","","",33,null],[12,"p_sign_posn","","",33,null],[12,"n_sign_posn","","",33,null],[12,"int_p_cs_precedes","","",33,null],[12,"int_p_sep_by_space","","",33,null],[12,"int_n_cs_precedes","","",33,null],[12,"int_n_sep_by_space","","",33,null],[12,"int_p_sign_posn","","",33,null],[12,"int_n_sign_posn","","",33,null],[3,"sigevent","","",null,null],[12,"sigev_value","","",34,null],[12,"sigev_signo","","",34,null],[12,"sigev_notify","","",34,null],[12,"sigev_notify_thread_id","","",34,null],[3,"dirent","","",null,null],[12,"d_ino","","",35,null],[12,"d_off","","",35,null],[12,"d_reclen","","",35,null],[12,"d_type","","",35,null],[12,"d_name","","",35,null],[3,"dirent64","","",null,null],[12,"d_ino","","",36,null],[12,"d_off","","",36,null],[12,"d_reclen","","",36,null],[12,"d_type","","",36,null],[12,"d_name","","",36,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",37,null],[12,"rlim_max","","",37,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",38,null],[12,"gl_pathv","","",38,null],[12,"gl_offs","","",38,null],[12,"gl_flags","","",38,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",39,null],[12,"ifa_name","","",39,null],[12,"ifa_flags","","",39,null],[12,"ifa_addr","","",39,null],[12,"ifa_netmask","","",39,null],[12,"ifa_ifu","","",39,null],[12,"ifa_data","","",39,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_rwlockattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"pthread_condattr_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",40,null],[12,"pw_passwd","","",40,null],[12,"pw_uid","","",40,null],[12,"pw_gid","","",40,null],[12,"pw_gecos","","",40,null],[12,"pw_dir","","",40,null],[12,"pw_shell","","",40,null],[3,"spwd","","",null,null],[12,"sp_namp","","",41,null],[12,"sp_pwdp","","",41,null],[12,"sp_lstchg","","",41,null],[12,"sp_min","","",41,null],[12,"sp_max","","",41,null],[12,"sp_warn","","",41,null],[12,"sp_inact","","",41,null],[12,"sp_expire","","",41,null],[12,"sp_flag","","",41,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",42,null],[12,"f_frsize","","",42,null],[12,"f_blocks","","",42,null],[12,"f_bfree","","",42,null],[12,"f_bavail","","",42,null],[12,"f_files","","",42,null],[12,"f_ffree","","",42,null],[12,"f_favail","","",42,null],[12,"f_fsid","","",42,null],[12,"f_flag","","",42,null],[12,"f_namemax","","",42,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",43,null],[12,"dqb_bsoftlimit","","",43,null],[12,"dqb_curspace","","",43,null],[12,"dqb_ihardlimit","","",43,null],[12,"dqb_isoftlimit","","",43,null],[12,"dqb_curinodes","","",43,null],[12,"dqb_btime","","",43,null],[12,"dqb_itime","","",43,null],[12,"dqb_valid","","",43,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",44,null],[12,"ssi_errno","","",44,null],[12,"ssi_code","","",44,null],[12,"ssi_pid","","",44,null],[12,"ssi_uid","","",44,null],[12,"ssi_fd","","",44,null],[12,"ssi_tid","","",44,null],[12,"ssi_band","","",44,null],[12,"ssi_overrun","","",44,null],[12,"ssi_trapno","","",44,null],[12,"ssi_status","","",44,null],[12,"ssi_int","","",44,null],[12,"ssi_ptr","","",44,null],[12,"ssi_utime","","",44,null],[12,"ssi_stime","","",44,null],[12,"ssi_addr","","",44,null],[3,"itimerspec","","",null,null],[12,"it_interval","","",45,null],[12,"it_value","","",45,null],[3,"fsid_t","","",null,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",46,null],[12,"mq_maxmsg","","",46,null],[12,"mq_msgsize","","",46,null],[12,"mq_curmsgs","","",46,null],[3,"cpu_set_t","","",null,null],[3,"if_nameindex","","",null,null],[12,"if_index","","",47,null],[12,"if_name","","",47,null],[3,"msginfo","","",null,null],[12,"msgpool","","",48,null],[12,"msgmap","","",48,null],[12,"msgmax","","",48,null],[12,"msgmnb","","",48,null],[12,"msgmni","","",48,null],[12,"msgssz","","",48,null],[12,"msgtql","","",48,null],[12,"msgseg","","",48,null],[3,"mmsghdr","","",null,null],[12,"msg_hdr","","",49,null],[12,"msg_len","","",49,null],[3,"sembuf","","",null,null],[12,"sem_num","","",50,null],[12,"sem_op","","",50,null],[12,"sem_flg","","",50,null],[3,"input_event","","",null,null],[12,"time","","",51,null],[12,"type_","","",51,null],[12,"code","","",51,null],[12,"value","","",51,null],[3,"input_id","","",null,null],[12,"bustype","","",52,null],[12,"vendor","","",52,null],[12,"product","","",52,null],[12,"version","","",52,null],[3,"input_absinfo","","",null,null],[12,"value","","",53,null],[12,"minimum","","",53,null],[12,"maximum","","",53,null],[12,"fuzz","","",53,null],[12,"flat","","",53,null],[12,"resolution","","",53,null],[3,"input_keymap_entry","","",null,null],[12,"flags","","",54,null],[12,"len","","",54,null],[12,"index","","",54,null],[12,"keycode","","",54,null],[12,"scancode","","",54,null],[3,"input_mask","","",null,null],[12,"type_","","",55,null],[12,"codes_size","","",55,null],[12,"codes_ptr","","",55,null],[3,"ff_replay","","",null,null],[12,"length","","",56,null],[12,"delay","","",56,null],[3,"ff_trigger","","",null,null],[12,"button","","",57,null],[12,"interval","","",57,null],[3,"ff_envelope","","",null,null],[12,"attack_length","","",58,null],[12,"attack_level","","",58,null],[12,"fade_length","","",58,null],[12,"fade_level","","",58,null],[3,"ff_constant_effect","","",null,null],[12,"level","","",59,null],[12,"envelope","","",59,null],[3,"ff_ramp_effect","","",null,null],[12,"start_level","","",60,null],[12,"end_level","","",60,null],[12,"envelope","","",60,null],[3,"ff_condition_effect","","",null,null],[12,"right_saturation","","",61,null],[12,"left_saturation","","",61,null],[12,"right_coeff","","",61,null],[12,"left_coeff","","",61,null],[12,"deadband","","",61,null],[12,"center","","",61,null],[3,"ff_periodic_effect","","",null,null],[12,"waveform","","",62,null],[12,"period","","",62,null],[12,"magnitude","","",62,null],[12,"offset","","",62,null],[12,"phase","","",62,null],[12,"envelope","","",62,null],[12,"custom_len","","",62,null],[12,"custom_data","","",62,null],[3,"ff_rumble_effect","","",null,null],[12,"strong_magnitude","","",63,null],[12,"weak_magnitude","","",63,null],[3,"ff_effect","","",null,null],[12,"type_","","",64,null],[12,"id","","",64,null],[12,"direction","","",64,null],[12,"trigger","","",64,null],[12,"replay","","",64,null],[12,"u","","",64,null],[3,"dl_phdr_info","","",null,null],[12,"dlpi_addr","","",65,null],[12,"dlpi_name","","",65,null],[12,"dlpi_phdr","","",65,null],[12,"dlpi_phnum","","",65,null],[12,"dlpi_adds","","",65,null],[12,"dlpi_subs","","",65,null],[12,"dlpi_tls_modid","","",65,null],[12,"dlpi_tls_data","","",65,null],[3,"Elf32_Phdr","","",null,null],[12,"p_type","","",66,null],[12,"p_offset","","",66,null],[12,"p_vaddr","","",66,null],[12,"p_paddr","","",66,null],[12,"p_filesz","","",66,null],[12,"p_memsz","","",66,null],[12,"p_flags","","",66,null],[12,"p_align","","",66,null],[3,"Elf64_Phdr","","",null,null],[12,"p_type","","",67,null],[12,"p_flags","","",67,null],[12,"p_offset","","",67,null],[12,"p_vaddr","","",67,null],[12,"p_paddr","","",67,null],[12,"p_filesz","","",67,null],[12,"p_memsz","","",67,null],[12,"p_align","","",67,null],[3,"ucred","","",null,null],[12,"pid","","",68,null],[12,"uid","","",68,null],[12,"gid","","",68,null],[3,"mntent","","",null,null],[12,"mnt_fsname","","",69,null],[12,"mnt_dir","","",69,null],[12,"mnt_type","","",69,null],[12,"mnt_opts","","",69,null],[12,"mnt_freq","","",69,null],[12,"mnt_passno","","",69,null],[3,"aiocb","","",null,null],[12,"aio_fildes","","",70,null],[12,"aio_lio_opcode","","",70,null],[12,"aio_reqprio","","",70,null],[12,"aio_buf","","",70,null],[12,"aio_nbytes","","",70,null],[12,"aio_sigevent","","",70,null],[12,"aio_offset","","",70,null],[3,"__exit_status","","",null,null],[12,"e_termination","","",71,null],[12,"e_exit","","",71,null],[3,"__timeval","","",null,null],[12,"tv_sec","","",72,null],[12,"tv_usec","","",72,null],[3,"utmpx","","",null,null],[12,"ut_type","","",73,null],[12,"ut_pid","","",73,null],[12,"ut_line","","",73,null],[12,"ut_id","","",73,null],[12,"ut_user","","",73,null],[12,"ut_host","","",73,null],[12,"ut_exit","","",73,null],[12,"ut_session","","",73,null],[12,"ut_tv","","",73,null],[12,"ut_addr_v6","","",73,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",74,null],[12,"sa_mask","","",74,null],[12,"sa_flags","","",74,null],[12,"sa_restorer","","",74,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",75,null],[12,"ss_flags","","",75,null],[12,"ss_size","","",75,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",76,null],[12,"si_errno","","",76,null],[12,"si_code","","",76,null],[12,"_pad","","",76,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",77,null],[12,"gl_pathv","","",77,null],[12,"gl_offs","","",77,null],[12,"gl_flags","","",77,null],[3,"statfs","","",null,null],[12,"f_type","","",78,null],[12,"f_bsize","","",78,null],[12,"f_blocks","","",78,null],[12,"f_bfree","","",78,null],[12,"f_bavail","","",78,null],[12,"f_files","","",78,null],[12,"f_ffree","","",78,null],[12,"f_fsid","","",78,null],[12,"f_namelen","","",78,null],[12,"f_frsize","","",78,null],[3,"msghdr","","",null,null],[12,"msg_name","","",79,null],[12,"msg_namelen","","",79,null],[12,"msg_iov","","",79,null],[12,"msg_iovlen","","",79,null],[12,"msg_control","","",79,null],[12,"msg_controllen","","",79,null],[12,"msg_flags","","",79,null],[3,"cmsghdr","","",null,null],[12,"cmsg_len","","",80,null],[12,"cmsg_level","","",80,null],[12,"cmsg_type","","",80,null],[3,"termios","","",null,null],[12,"c_iflag","","",81,null],[12,"c_oflag","","",81,null],[12,"c_cflag","","",81,null],[12,"c_lflag","","",81,null],[12,"c_line","","",81,null],[12,"c_cc","","",81,null],[12,"c_ispeed","","",81,null],[12,"c_ospeed","","",81,null],[3,"flock","","",null,null],[12,"l_type","","",82,null],[12,"l_whence","","",82,null],[12,"l_start","","",82,null],[12,"l_len","","",82,null],[12,"l_pid","","",82,null],[3,"sem_t","","",null,null],[3,"sigset_t","","",null,null],[3,"sysinfo","","",null,null],[12,"uptime","","",83,null],[12,"loads","","",83,null],[12,"totalram","","",83,null],[12,"freeram","","",83,null],[12,"sharedram","","",83,null],[12,"bufferram","","",83,null],[12,"totalswap","","",83,null],[12,"freeswap","","",83,null],[12,"procs","","",83,null],[12,"pad","","",83,null],[12,"totalhigh","","",83,null],[12,"freehigh","","",83,null],[12,"mem_unit","","",83,null],[12,"_f","","",83,null],[3,"msqid_ds","","",null,null],[12,"msg_perm","","",84,null],[12,"msg_stime","","",84,null],[12,"msg_rtime","","",84,null],[12,"msg_ctime","","",84,null],[12,"msg_qnum","","",84,null],[12,"msg_qbytes","","",84,null],[12,"msg_lspid","","",84,null],[12,"msg_lrpid","","",84,null],[3,"stat","","",null,null],[12,"st_dev","","",85,null],[12,"st_ino","","",85,null],[12,"st_nlink","","",85,null],[12,"st_mode","","",85,null],[12,"st_uid","","",85,null],[12,"st_gid","","",85,null],[12,"st_rdev","","",85,null],[12,"st_size","","",85,null],[12,"st_blksize","","",85,null],[12,"st_blocks","","",85,null],[12,"st_atime","","",85,null],[12,"st_atime_nsec","","",85,null],[12,"st_mtime","","",85,null],[12,"st_mtime_nsec","","",85,null],[12,"st_ctime","","",85,null],[12,"st_ctime_nsec","","",85,null],[3,"stat64","","",null,null],[12,"st_dev","","",86,null],[12,"st_ino","","",86,null],[12,"st_nlink","","",86,null],[12,"st_mode","","",86,null],[12,"st_uid","","",86,null],[12,"st_gid","","",86,null],[12,"st_rdev","","",86,null],[12,"st_size","","",86,null],[12,"st_blksize","","",86,null],[12,"st_blocks","","",86,null],[12,"st_atime","","",86,null],[12,"st_atime_nsec","","",86,null],[12,"st_mtime","","",86,null],[12,"st_mtime_nsec","","",86,null],[12,"st_ctime","","",86,null],[12,"st_ctime_nsec","","",86,null],[3,"statfs64","","",null,null],[12,"f_type","","",87,null],[12,"f_bsize","","",87,null],[12,"f_blocks","","",87,null],[12,"f_bfree","","",87,null],[12,"f_bavail","","",87,null],[12,"f_files","","",87,null],[12,"f_ffree","","",87,null],[12,"f_fsid","","",87,null],[12,"f_namelen","","",87,null],[12,"f_frsize","","",87,null],[12,"f_flags","","",87,null],[12,"f_spare","","",87,null],[3,"statvfs64","","",null,null],[12,"f_bsize","","",88,null],[12,"f_frsize","","",88,null],[12,"f_blocks","","",88,null],[12,"f_bfree","","",88,null],[12,"f_bavail","","",88,null],[12,"f_files","","",88,null],[12,"f_ffree","","",88,null],[12,"f_favail","","",88,null],[12,"f_fsid","","",88,null],[12,"f_flag","","",88,null],[12,"f_namemax","","",88,null],[3,"pthread_attr_t","","",null,null],[3,"_libc_fpxreg","","",null,null],[12,"significand","","",89,null],[12,"exponent","","",89,null],[3,"_libc_xmmreg","","",null,null],[12,"element","","",90,null],[3,"_libc_fpstate","","",null,null],[12,"cwd","","",91,null],[12,"swd","","",91,null],[12,"ftw","","",91,null],[12,"fop","","",91,null],[12,"rip","","",91,null],[12,"rdp","","",91,null],[12,"mxcsr","","",91,null],[12,"mxcr_mask","","",91,null],[12,"_st","","",91,null],[12,"_xmm","","",91,null],[3,"user_fpregs_struct","","",null,null],[12,"cwd","","",92,null],[12,"swd","","",92,null],[12,"ftw","","",92,null],[12,"fop","","",92,null],[12,"rip","","",92,null],[12,"rdp","","",92,null],[12,"mxcsr","","",92,null],[12,"mxcr_mask","","",92,null],[12,"st_space","","",92,null],[12,"xmm_space","","",92,null],[3,"user_regs_struct","","",null,null],[12,"r15","","",93,null],[12,"r14","","",93,null],[12,"r13","","",93,null],[12,"r12","","",93,null],[12,"rbp","","",93,null],[12,"rbx","","",93,null],[12,"r11","","",93,null],[12,"r10","","",93,null],[12,"r9","","",93,null],[12,"r8","","",93,null],[12,"rax","","",93,null],[12,"rcx","","",93,null],[12,"rdx","","",93,null],[12,"rsi","","",93,null],[12,"rdi","","",93,null],[12,"orig_rax","","",93,null],[12,"rip","","",93,null],[12,"cs","","",93,null],[12,"eflags","","",93,null],[12,"rsp","","",93,null],[12,"ss","","",93,null],[12,"fs_base","","",93,null],[12,"gs_base","","",93,null],[12,"ds","","",93,null],[12,"es","","",93,null],[12,"fs","","",93,null],[12,"gs","","",93,null],[3,"user","","",null,null],[12,"regs","","",94,null],[12,"u_fpvalid","","",94,null],[12,"i387","","",94,null],[12,"u_tsize","","",94,null],[12,"u_dsize","","",94,null],[12,"u_ssize","","",94,null],[12,"start_code","","",94,null],[12,"start_stack","","",94,null],[12,"signal","","",94,null],[12,"u_ar0","","",94,null],[12,"u_fpstate","","",94,null],[12,"magic","","",94,null],[12,"u_comm","","",94,null],[12,"u_debugreg","","",94,null],[3,"mcontext_t","","",null,null],[12,"gregs","","",95,null],[12,"fpregs","","",95,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",96,null],[12,"uc_link","","",96,null],[12,"uc_stack","","",96,null],[12,"uc_mcontext","","",96,null],[12,"uc_sigmask","","",96,null],[3,"ipc_perm","","",null,null],[12,"__key","","",97,null],[12,"uid","","",97,null],[12,"gid","","",97,null],[12,"cuid","","",97,null],[12,"cgid","","",97,null],[12,"mode","","",97,null],[12,"__seq","","",97,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",98,null],[12,"shm_segsz","","",98,null],[12,"shm_atime","","",98,null],[12,"shm_dtime","","",98,null],[12,"shm_ctime","","",98,null],[12,"shm_cpid","","",98,null],[12,"shm_lpid","","",98,null],[12,"shm_nattch","","",98,null],[3,"termios2","","",null,null],[12,"c_iflag","","",99,null],[12,"c_oflag","","",99,null],[12,"c_cflag","","",99,null],[12,"c_lflag","","",99,null],[12,"c_line","","",99,null],[12,"c_cc","","",99,null],[12,"c_ispeed","","",99,null],[12,"c_ospeed","","",99,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFSTOPPED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WSTOPSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFCONTINUED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WIFSIGNALED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WCOREDUMP","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"QCMD","","",null,{"inputs":[{"name":"c_int"},{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_CLR","","",null,null],[5,"CPU_ISSET","","",null,{"inputs":[{"name":"usize"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"CPU_EQUAL","","",null,{"inputs":[{"name":"cpu_set_t"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"major","","",null,{"inputs":[{"name":"dev_t"}],"output":{"name":"c_uint"}}],[5,"minor","","",null,{"inputs":[{"name":"dev_t"}],"output":{"name":"c_uint"}}],[5,"makedev","","",null,{"inputs":[{"name":"c_uint"},{"name":"c_uint"}],"output":{"name":"dev_t"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"getchar","","",null,null],[5,"putchar","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"wcstombs","","",null,null],[5,"memchr","","",null,null],[5,"memcmp","","",null,null],[5,"memcpy","","",null,null],[5,"memmove","","",null,null],[5,"memset","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"getpwnam","","",null,null],[5,"getpwuid","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"getchar_unlocked","","",null,null],[5,"putchar_unlocked","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"openat","","",null,null],[5,"fchmodat","","",null,null],[5,"fchown","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"mkdirat","","",null,null],[5,"readlinkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"fchdir","","",null,null],[5,"chown","","",null,null],[5,"lchown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execl","","",null,null],[5,"execle","","",null,null],[5,"execlp","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgid","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"seteuid","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"tcsetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"times","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_exit","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_init","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_condattr_init","","",null,null],[5,"pthread_condattr_destroy","","",null,null],[5,"pthread_rwlock_init","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_rwlockattr_init","","",null,null],[5,"pthread_rwlockattr_destroy","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"res_init","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"time","","",null,null],[5,"gmtime","","",null,null],[5,"localtime","","",null,null],[5,"difftime","","",null,null],[5,"mknod","","",null,null],[5,"uname","","",null,null],[5,"gethostname","","",null,null],[5,"getservbyname","","",null,null],[5,"getprotobyname","","",null,null],[5,"getprotobynumber","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"sem_init","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"readlink","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"sigprocmask","","",null,null],[5,"sigpending","","",null,null],[5,"timegm","","",null,null],[5,"getsid","","",null,null],[5,"sysconf","","",null,null],[5,"mkfifo","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfmakeraw","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"cfsetspeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcgetsid","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkdtemp","","",null,null],[5,"tmpnam","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"grantpt","","",null,null],[5,"posix_openpt","","",null,null],[5,"ptsname","","",null,null],[5,"unlockpt","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"clock_settime","","",null,null],[5,"dirfd","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"pipe2","","",null,null],[5,"statfs","","",null,null],[5,"statfs64","","",null,null],[5,"fstatfs","","",null,null],[5,"fstatfs64","","",null,null],[5,"statvfs64","","",null,null],[5,"fstatvfs64","","",null,null],[5,"memrchr","","",null,null],[5,"posix_fadvise","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"creat64","","",null,null],[5,"fstat64","","",null,null],[5,"fstatat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"getrlimit64","","",null,null],[5,"lseek64","","",null,null],[5,"lstat64","","",null,null],[5,"mmap64","","",null,null],[5,"open64","","",null,null],[5,"openat64","","",null,null],[5,"pread64","","",null,null],[5,"preadv64","","",null,null],[5,"pwrite64","","",null,null],[5,"pwritev64","","",null,null],[5,"readdir64","","",null,null],[5,"readdir64_r","","",null,null],[5,"setrlimit64","","",null,null],[5,"stat64","","",null,null],[5,"truncate64","","",null,null],[5,"fdopendir","","",null,null],[5,"mknodat","","",null,null],[5,"pthread_condattr_getclock","","",null,null],[5,"pthread_condattr_setclock","","",null,null],[5,"pthread_condattr_setpshared","","",null,null],[5,"accept4","","",null,null],[5,"pthread_mutexattr_setpshared","","",null,null],[5,"pthread_rwlockattr_getpshared","","",null,null],[5,"pthread_rwlockattr_setpshared","","",null,null],[5,"ptsname_r","","",null,null],[5,"clearenv","","",null,null],[5,"waitid","","",null,null],[5,"setreuid","","",null,null],[5,"setregid","","",null,null],[5,"getresuid","","",null,null],[5,"getresgid","","",null,null],[5,"acct","","",null,null],[5,"brk","","",null,null],[5,"sbrk","","",null,null],[5,"vfork","","",null,null],[5,"setresgid","","",null,null],[5,"setresuid","","",null,null],[5,"wait4","","",null,null],[5,"openpty","","",null,null],[5,"execvpe","","",null,null],[5,"fexecve","","",null,null],[5,"aio_read","","",null,null],[5,"aio_write","","",null,null],[5,"aio_fsync","","",null,null],[5,"aio_error","","",null,null],[5,"aio_return","","",null,null],[5,"aio_suspend","","",null,null],[5,"aio_cancel","","",null,null],[5,"lio_listio","","",null,null],[5,"lutimes","","",null,null],[5,"setpwent","","",null,null],[5,"endpwent","","",null,null],[5,"getpwent","","",null,null],[5,"setspent","","",null,null],[5,"endspent","","",null,null],[5,"getspent","","",null,null],[5,"getspnam","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"ftok","","",null,null],[5,"semget","","",null,null],[5,"semop","","",null,null],[5,"semctl","","",null,null],[5,"msgctl","","",null,null],[5,"msgget","","",null,null],[5,"msgrcv","","",null,null],[5,"msgsnd","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"timerfd_create","","",null,null],[5,"timerfd_gettime","","",null,null],[5,"timerfd_settime","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"nl_langinfo_l","","",null,null],[5,"getnameinfo","","",null,null],[5,"pthread_setschedprio","","",null,null],[5,"prlimit","","",null,null],[5,"prlimit64","","",null,null],[5,"getloadavg","","",null,null],[5,"process_vm_readv","","",null,null],[5,"process_vm_writev","","",null,null],[5,"reboot","","",null,null],[5,"setfsgid","","",null,null],[5,"setfsuid","","",null,null],[5,"mkfifoat","","",null,null],[5,"if_nameindex","","",null,null],[5,"if_freenameindex","","",null,null],[5,"sync_file_range","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"mremap","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"madvise","","",null,null],[5,"msync","","",null,null],[5,"recvfrom","","",null,null],[5,"mkstemps","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"bind","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"getdomainname","","",null,null],[5,"setdomainname","","",null,null],[5,"vhangup","","",null,null],[5,"sendmmsg","","",null,null],[5,"recvmmsg","","",null,null],[5,"sync","","",null,null],[5,"syscall","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_create1","","",null,null],[5,"epoll_wait","","",null,null],[5,"epoll_ctl","","",null,null],[5,"pthread_getschedparam","","",null,null],[5,"unshare","","",null,null],[5,"umount","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"tee","","",null,null],[5,"settimeofday","","",null,null],[5,"splice","","",null,null],[5,"eventfd","","",null,null],[5,"sched_rr_get_interval","","",null,null],[5,"sem_timedwait","","",null,null],[5,"sched_setparam","","",null,null],[5,"setns","","",null,null],[5,"swapoff","","",null,null],[5,"vmsplice","","",null,null],[5,"mount","","",null,null],[5,"personality","","",null,null],[5,"prctl","","",null,null],[5,"sched_getparam","","",null,null],[5,"ppoll","","",null,null],[5,"pthread_mutex_timedlock","","",null,null],[5,"clone","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"clock_nanosleep","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"sethostname","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"pthread_condattr_getpshared","","",null,null],[5,"sysinfo","","",null,null],[5,"umount2","","",null,null],[5,"pthread_setschedparam","","",null,null],[5,"swapon","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sendfile","","",null,null],[5,"sigsuspend","","",null,null],[5,"getgrgid_r","","",null,null],[5,"sigaltstack","","",null,null],[5,"sem_close","","",null,null],[5,"getdtablesize","","",null,null],[5,"getgrnam_r","","",null,null],[5,"initgroups","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"sem_open","","",null,null],[5,"getgrnam","","",null,null],[5,"pthread_cancel","","",null,null],[5,"pthread_kill","","",null,null],[5,"sem_unlink","","",null,null],[5,"daemon","","",null,null],[5,"getpwnam_r","","",null,null],[5,"getpwuid_r","","",null,null],[5,"sigwait","","",null,null],[5,"pthread_atfork","","",null,null],[5,"getgrgid","","",null,null],[5,"getgrouplist","","",null,null],[5,"pthread_mutexattr_getpshared","","",null,null],[5,"popen","","",null,null],[5,"faccessat","","",null,null],[5,"pthread_create","","",null,null],[5,"dl_iterate_phdr","","",null,null],[5,"setmntent","","",null,null],[5,"getmntent","","",null,null],[5,"addmntent","","",null,null],[5,"endmntent","","",null,null],[5,"hasmntopt","","",null,null],[5,"utmpxname","","",null,null],[5,"getutxent","","",null,null],[5,"getutxid","","",null,null],[5,"getutxline","","",null,null],[5,"pututxline","","",null,null],[5,"setutxent","","",null,null],[5,"endutxent","","",null,null],[5,"getpt","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"pthread_getaffinity_np","","",null,null],[5,"pthread_setaffinity_np","","",null,null],[5,"pthread_rwlockattr_getkind_np","","",null,null],[5,"pthread_rwlockattr_setkind_np","","",null,null],[5,"sched_getcpu","","",null,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[5,"iopl","","",null,null],[5,"ioperm","","",null,null],[5,"sysctl","","",null,null],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"stat"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"stat64"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"statfs64"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"statvfs64"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"_libc_fpxreg"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"_libc_xmmreg"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"_libc_fpstate"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"user_fpregs_struct"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"user_regs_struct"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"user"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"mcontext_t"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"ucontext_t"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"ipc_perm"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"shmid_ds"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"termios2"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"sigset_t"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"sysinfo"}}],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"msqid_ds"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"aiocb"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"__exit_status"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"__timeval"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"utmpx"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"sigaction"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"stack_t"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"glob64_t"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"statfs"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"msghdr"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"cmsghdr"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"termios"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"flock"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"sem_t"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"dirent"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"dirent64"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"rlimit64"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"glob_t"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"pthread_rwlockattr_t"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"pthread_condattr_t"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"passwd"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"spwd"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"statvfs"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"dqblk"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"signalfd_siginfo"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"itimerspec"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"fsid_t"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"mq_attr"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"cpu_set_t"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"if_nameindex"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"msginfo"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"mmsghdr"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"sembuf"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"input_event"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"input_id"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"input_absinfo"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"input_keymap_entry"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"input_mask"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"ff_replay"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"ff_trigger"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"ff_envelope"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"ff_constant_effect"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"ff_ramp_effect"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"ff_condition_effect"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"ff_periodic_effect"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"ff_rumble_effect"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"ff_effect"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"dl_phdr_info"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"elf32_phdr"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"elf64_phdr"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"ucred"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"mntent"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"addrinfo"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_nl"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_ll"}}],[11,"clone","","",111,{"inputs":[{"name":"self"}],"output":{"name":"fd_set"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"sched_param"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"dl_info"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"epoll_event"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"utsname"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"lconv"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"sigevent"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"group"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"utimbuf"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"timeval"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"rlimit"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"rusage"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"in_addr"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"in6_addr"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"hostent"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"iovec"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"pollfd"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"winsize"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"linger"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"sigval"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"itimerval"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"tms"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"servent"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"protoent"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"clockid_t","","",null,null],[6,"key_t","","",null,null],[6,"id_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"mqd_t","","",null,null],[6,"nfds_t","","",null,null],[6,"nl_item","","",null,null],[6,"idtype_t","","",null,null],[6,"loff_t","","",null,null],[6,"__u8","","",null,null],[6,"__u16","","",null,null],[6,"__s16","","",null,null],[6,"__u32","","",null,null],[6,"__s32","","",null,null],[6,"Elf32_Half","","",null,null],[6,"Elf32_Word","","",null,null],[6,"Elf32_Off","","",null,null],[6,"Elf32_Addr","","",null,null],[6,"Elf64_Half","","",null,null],[6,"Elf64_Word","","",null,null],[6,"Elf64_Off","","",null,null],[6,"Elf64_Addr","","",null,null],[6,"Elf64_Xword","","",null,null],[6,"__priority_which_t","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"msgqnum_t","","",null,null],[6,"msglen_t","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"greg_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"__u64","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"IFNAMSIZ","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"IPPROTO_ICMP","","",null,null],[17,"IPPROTO_ICMPV6","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_UDP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"INADDR_LOOPBACK","","",null,null],[17,"INADDR_ANY","","",null,null],[17,"INADDR_BROADCAST","","",null,null],[17,"INADDR_NONE","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_CANCELLK","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"F_ADD_SEALS","","",null,null],[17,"F_GET_SEALS","","",null,null],[17,"F_SEAL_SEAL","","",null,null],[17,"F_SEAL_SHRINK","","",null,null],[17,"F_SEAL_GROW","","",null,null],[17,"F_SEAL_WRITE","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"TIMER_ABSTIME","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"SCM_RIGHTS","","",null,null],[17,"SCM_CREDENTIALS","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_FREE","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"MADV_SOFT_OFFLINE","","",null,null],[17,"IFF_UP","","",null,null],[17,"IFF_BROADCAST","","",null,null],[17,"IFF_DEBUG","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"IFF_POINTOPOINT","","",null,null],[17,"IFF_NOTRAILERS","","",null,null],[17,"IFF_RUNNING","","",null,null],[17,"IFF_NOARP","","",null,null],[17,"IFF_PROMISC","","",null,null],[17,"IFF_ALLMULTI","","",null,null],[17,"IFF_MASTER","","",null,null],[17,"IFF_SLAVE","","",null,null],[17,"IFF_MULTICAST","","",null,null],[17,"IFF_PORTSEL","","",null,null],[17,"IFF_AUTOMEDIA","","",null,null],[17,"IFF_DYNAMIC","","",null,null],[17,"SOL_IP","","",null,null],[17,"SOL_TCP","","",null,null],[17,"SOL_UDP","","",null,null],[17,"SOL_IPV6","","",null,null],[17,"SOL_ICMPV6","","",null,null],[17,"SOL_RAW","","",null,null],[17,"SOL_DECNET","","",null,null],[17,"SOL_X25","","",null,null],[17,"SOL_PACKET","","",null,null],[17,"SOL_ATM","","",null,null],[17,"SOL_AAL","","",null,null],[17,"SOL_IRDA","","",null,null],[17,"SOL_NETBEUI","","",null,null],[17,"SOL_LLC","","",null,null],[17,"SOL_DCCP","","",null,null],[17,"SOL_NETLINK","","",null,null],[17,"SOL_TIPC","","",null,null],[17,"AF_UNSPEC","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_LOCAL","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_AX25","","",null,null],[17,"AF_IPX","","",null,null],[17,"AF_APPLETALK","","",null,null],[17,"AF_NETROM","","",null,null],[17,"AF_BRIDGE","","",null,null],[17,"AF_ATMPVC","","",null,null],[17,"AF_X25","","",null,null],[17,"AF_INET6","","",null,null],[17,"AF_ROSE","","",null,null],[17,"AF_DECnet","","",null,null],[17,"AF_NETBEUI","","",null,null],[17,"AF_SECURITY","","",null,null],[17,"AF_KEY","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"AF_ROUTE","","",null,null],[17,"AF_PACKET","","",null,null],[17,"AF_ASH","","",null,null],[17,"AF_ECONET","","",null,null],[17,"AF_ATMSVC","","",null,null],[17,"AF_RDS","","",null,null],[17,"AF_SNA","","",null,null],[17,"AF_IRDA","","",null,null],[17,"AF_PPPOX","","",null,null],[17,"AF_WANPIPE","","",null,null],[17,"AF_LLC","","",null,null],[17,"AF_CAN","","",null,null],[17,"AF_TIPC","","",null,null],[17,"AF_BLUETOOTH","","",null,null],[17,"AF_IUCV","","",null,null],[17,"AF_RXRPC","","",null,null],[17,"AF_ISDN","","",null,null],[17,"AF_PHONET","","",null,null],[17,"AF_IEEE802154","","",null,null],[17,"AF_CAIF","","",null,null],[17,"AF_ALG","","",null,null],[17,"PF_UNSPEC","","",null,null],[17,"PF_UNIX","","",null,null],[17,"PF_LOCAL","","",null,null],[17,"PF_INET","","",null,null],[17,"PF_AX25","","",null,null],[17,"PF_IPX","","",null,null],[17,"PF_APPLETALK","","",null,null],[17,"PF_NETROM","","",null,null],[17,"PF_BRIDGE","","",null,null],[17,"PF_ATMPVC","","",null,null],[17,"PF_X25","","",null,null],[17,"PF_INET6","","",null,null],[17,"PF_ROSE","","",null,null],[17,"PF_DECnet","","",null,null],[17,"PF_NETBEUI","","",null,null],[17,"PF_SECURITY","","",null,null],[17,"PF_KEY","","",null,null],[17,"PF_NETLINK","","",null,null],[17,"PF_ROUTE","","",null,null],[17,"PF_PACKET","","",null,null],[17,"PF_ASH","","",null,null],[17,"PF_ECONET","","",null,null],[17,"PF_ATMSVC","","",null,null],[17,"PF_RDS","","",null,null],[17,"PF_SNA","","",null,null],[17,"PF_IRDA","","",null,null],[17,"PF_PPPOX","","",null,null],[17,"PF_WANPIPE","","",null,null],[17,"PF_LLC","","",null,null],[17,"PF_CAN","","",null,null],[17,"PF_TIPC","","",null,null],[17,"PF_BLUETOOTH","","",null,null],[17,"PF_IUCV","","",null,null],[17,"PF_RXRPC","","",null,null],[17,"PF_ISDN","","",null,null],[17,"PF_PHONET","","",null,null],[17,"PF_IEEE802154","","",null,null],[17,"PF_CAIF","","",null,null],[17,"PF_ALG","","",null,null],[17,"SOMAXCONN","","",null,null],[17,"MSG_OOB","","",null,null],[17,"MSG_PEEK","","",null,null],[17,"MSG_DONTROUTE","","",null,null],[17,"MSG_CTRUNC","","",null,null],[17,"MSG_TRUNC","","",null,null],[17,"MSG_DONTWAIT","","",null,null],[17,"MSG_EOR","","",null,null],[17,"MSG_WAITALL","","",null,null],[17,"MSG_FIN","","",null,null],[17,"MSG_SYN","","",null,null],[17,"MSG_CONFIRM","","",null,null],[17,"MSG_RST","","",null,null],[17,"MSG_ERRQUEUE","","",null,null],[17,"MSG_NOSIGNAL","","",null,null],[17,"MSG_MORE","","",null,null],[17,"MSG_WAITFORONE","","",null,null],[17,"MSG_FASTOPEN","","",null,null],[17,"MSG_CMSG_CLOEXEC","","",null,null],[17,"SCM_TIMESTAMP","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"SOCK_RDM","","",null,null],[17,"IP_MULTICAST_IF","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"CR0","","",null,null],[17,"FF0","","",null,null],[17,"BS0","","",null,null],[17,"VT0","","",null,null],[17,"VERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VLNEXT","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"CS5","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHO","","",null,null],[17,"OCRNL","","",null,null],[17,"ONOCR","","",null,null],[17,"ONLRET","","",null,null],[17,"OFILL","","",null,null],[17,"OFDEL","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"CLONE_NEWCGROUP","","",null,null],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"WSTOPPED","","",null,null],[17,"WEXITED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"PTRACE_O_TRACESYSGOOD","","",null,null],[17,"PTRACE_O_TRACEFORK","","",null,null],[17,"PTRACE_O_TRACEVFORK","","",null,null],[17,"PTRACE_O_TRACECLONE","","",null,null],[17,"PTRACE_O_TRACEEXEC","","",null,null],[17,"PTRACE_O_TRACEVFORKDONE","","",null,null],[17,"PTRACE_O_TRACEEXIT","","",null,null],[17,"PTRACE_O_TRACESECCOMP","","",null,null],[17,"PTRACE_O_EXITKILL","","",null,null],[17,"PTRACE_O_SUSPEND_SECCOMP","","",null,null],[17,"PTRACE_O_MASK","","",null,null],[17,"PTRACE_EVENT_FORK","","",null,null],[17,"PTRACE_EVENT_VFORK","","",null,null],[17,"PTRACE_EVENT_CLONE","","",null,null],[17,"PTRACE_EVENT_EXEC","","",null,null],[17,"PTRACE_EVENT_VFORK_DONE","","",null,null],[17,"PTRACE_EVENT_EXIT","","",null,null],[17,"PTRACE_EVENT_SECCOMP","","",null,null],[17,"__WNOTHREAD","","",null,null],[17,"__WALL","","",null,null],[17,"__WCLONE","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"AT_REMOVEDIR","","",null,null],[17,"AT_SYMLINK_FOLLOW","","",null,null],[17,"AT_NO_AUTOMOUNT","","",null,null],[17,"AT_EMPTY_PATH","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"SI_LOAD_SHIFT","","",null,null],[17,"SIGEV_SIGNAL","","",null,null],[17,"SIGEV_NONE","","",null,null],[17,"SIGEV_THREAD","","",null,null],[17,"P_ALL","","",null,null],[17,"P_PID","","",null,null],[17,"P_PGID","","",null,null],[17,"UTIME_OMIT","","",null,null],[17,"UTIME_NOW","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"CODESET","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_LINK_MAX","","",null,null],[17,"_PC_MAX_CANON","","",null,null],[17,"_PC_MAX_INPUT","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_PC_PIPE_BUF","","",null,null],[17,"_PC_CHOWN_RESTRICTED","","",null,null],[17,"_PC_NO_TRUNC","","",null,null],[17,"_PC_VDISABLE","","",null,null],[17,"_PC_SYNC_IO","","",null,null],[17,"_PC_ASYNC_IO","","",null,null],[17,"_PC_PRIO_IO","","",null,null],[17,"_PC_SOCK_MAXBUF","","",null,null],[17,"_PC_FILESIZEBITS","","",null,null],[17,"_PC_REC_INCR_XFER_SIZE","","",null,null],[17,"_PC_REC_MAX_XFER_SIZE","","",null,null],[17,"_PC_REC_MIN_XFER_SIZE","","",null,null],[17,"_PC_REC_XFER_ALIGN","","",null,null],[17,"_PC_ALLOC_SIZE_MIN","","",null,null],[17,"_PC_SYMLINK_MAX","","",null,null],[17,"_PC_2_SYMLINKS","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_UIO_MAXIOV","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_THREAD_PROCESS_SHARED","","",null,null],[17,"_SC_NPROCESSORS_CONF","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_PHYS_PAGES","","",null,null],[17,"_SC_AVPHYS_PAGES","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_PASS_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XOPEN_XPG2","","",null,null],[17,"_SC_XOPEN_XPG3","","",null,null],[17,"_SC_XOPEN_XPG4","","",null,null],[17,"_SC_NZERO","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LP64_OFF64","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_ADVISORY_INFO","","",null,null],[17,"_SC_BARRIERS","","",null,null],[17,"_SC_CLOCK_SELECTION","","",null,null],[17,"_SC_CPUTIME","","",null,null],[17,"_SC_THREAD_CPUTIME","","",null,null],[17,"_SC_MONOTONIC_CLOCK","","",null,null],[17,"_SC_READER_WRITER_LOCKS","","",null,null],[17,"_SC_SPIN_LOCKS","","",null,null],[17,"_SC_REGEXP","","",null,null],[17,"_SC_SHELL","","",null,null],[17,"_SC_SPAWN","","",null,null],[17,"_SC_SPORADIC_SERVER","","",null,null],[17,"_SC_THREAD_SPORADIC_SERVER","","",null,null],[17,"_SC_TIMEOUTS","","",null,null],[17,"_SC_TYPED_MEMORY_OBJECTS","","",null,null],[17,"_SC_2_PBS","","",null,null],[17,"_SC_2_PBS_ACCOUNTING","","",null,null],[17,"_SC_2_PBS_LOCATE","","",null,null],[17,"_SC_2_PBS_MESSAGE","","",null,null],[17,"_SC_2_PBS_TRACK","","",null,null],[17,"_SC_SYMLOOP_MAX","","",null,null],[17,"_SC_STREAMS","","",null,null],[17,"_SC_2_PBS_CHECKPOINT","","",null,null],[17,"_SC_V6_ILP32_OFF32","","",null,null],[17,"_SC_V6_ILP32_OFFBIG","","",null,null],[17,"_SC_V6_LP64_OFF64","","",null,null],[17,"_SC_V6_LPBIG_OFFBIG","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"_SC_TRACE","","",null,null],[17,"_SC_TRACE_EVENT_FILTER","","",null,null],[17,"_SC_TRACE_INHERIT","","",null,null],[17,"_SC_TRACE_LOG","","",null,null],[17,"_SC_IPV6","","",null,null],[17,"_SC_RAW_SOCKETS","","",null,null],[17,"_SC_V7_ILP32_OFF32","","",null,null],[17,"_SC_V7_ILP32_OFFBIG","","",null,null],[17,"_SC_V7_LP64_OFF64","","",null,null],[17,"_SC_V7_LPBIG_OFFBIG","","",null,null],[17,"_SC_SS_REPL_MAX","","",null,null],[17,"_SC_TRACE_EVENT_NAME_MAX","","",null,null],[17,"_SC_TRACE_NAME_MAX","","",null,null],[17,"_SC_TRACE_SYS_MAX","","",null,null],[17,"_SC_TRACE_USER_EVENT_MAX","","",null,null],[17,"_SC_XOPEN_STREAMS","","",null,null],[17,"_SC_THREAD_ROBUST_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_ROBUST_PRIO_PROTECT","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"IFF_LOWER_UP","","",null,null],[17,"IFF_DORMANT","","",null,null],[17,"IFF_ECHO","","",null,null],[17,"TUN_READQ_SIZE","","",null,null],[17,"TUN_TUN_DEV","","",null,null],[17,"TUN_TAP_DEV","","",null,null],[17,"TUN_TYPE_MASK","","",null,null],[17,"IFF_TUN","","",null,null],[17,"IFF_TAP","","",null,null],[17,"IFF_NO_PI","","",null,null],[17,"IFF_ONE_QUEUE","","",null,null],[17,"IFF_VNET_HDR","","",null,null],[17,"IFF_TUN_EXCL","","",null,null],[17,"IFF_MULTI_QUEUE","","",null,null],[17,"IFF_ATTACH_QUEUE","","",null,null],[17,"IFF_DETACH_QUEUE","","",null,null],[17,"IFF_PERSIST","","",null,null],[17,"IFF_NOFILTER","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"PTHREAD_PROCESS_PRIVATE","","",null,null],[17,"PTHREAD_PROCESS_SHARED","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"RENAME_NOREPLACE","","",null,null],[17,"RENAME_EXCHANGE","","",null,null],[17,"RENAME_WHITEOUT","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"IPPROTO_HOPOPTS","","Hop-by-hop option header",null,null],[17,"IPPROTO_IGMP","","group mgmt protocol",null,null],[17,"IPPROTO_IPIP","","for compatibility",null,null],[17,"IPPROTO_EGP","","exterior gateway protocol",null,null],[17,"IPPROTO_PUP","","pup",null,null],[17,"IPPROTO_IDP","","xns idp",null,null],[17,"IPPROTO_TP","","tp-4 w/ class negotiation",null,null],[17,"IPPROTO_DCCP","","DCCP",null,null],[17,"IPPROTO_ROUTING","","IP6 routing header",null,null],[17,"IPPROTO_FRAGMENT","","IP6 fragmentation header",null,null],[17,"IPPROTO_RSVP","","resource reservation",null,null],[17,"IPPROTO_GRE","","General Routing Encap.",null,null],[17,"IPPROTO_ESP","","IP6 Encap Sec. Payload",null,null],[17,"IPPROTO_AH","","IP6 Auth Header",null,null],[17,"IPPROTO_NONE","","IP6 no next header",null,null],[17,"IPPROTO_DSTOPTS","","IP6 destination option",null,null],[17,"IPPROTO_MTP","","",null,null],[17,"IPPROTO_BEETPH","","",null,null],[17,"IPPROTO_ENCAP","","encapsulation header",null,null],[17,"IPPROTO_PIM","","Protocol indep. multicast",null,null],[17,"IPPROTO_COMP","","IP Payload Comp. Protocol",null,null],[17,"IPPROTO_SCTP","","SCTP",null,null],[17,"IPPROTO_MH","","",null,null],[17,"IPPROTO_UDPLITE","","",null,null],[17,"IPPROTO_MPLS","","",null,null],[17,"IPPROTO_RAW","","raw IP packet",null,null],[17,"IPPROTO_MAX","","",null,null],[17,"AF_IB","","",null,null],[17,"AF_MPLS","","",null,null],[17,"AF_NFC","","",null,null],[17,"AF_VSOCK","","",null,null],[17,"PF_IB","","",null,null],[17,"PF_MPLS","","",null,null],[17,"PF_NFC","","",null,null],[17,"PF_VSOCK","","",null,null],[17,"IPC_PRIVATE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"MSG_STAT","","",null,null],[17,"MSG_INFO","","",null,null],[17,"MSG_NOERROR","","",null,null],[17,"MSG_EXCEPT","","",null,null],[17,"MSG_COPY","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLEXCLUSIVE","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"RB_AUTOBOOT","","",null,null],[17,"RB_HALT_SYSTEM","","",null,null],[17,"RB_ENABLE_CAD","","",null,null],[17,"RB_DISABLE_CAD","","",null,null],[17,"RB_POWER_OFF","","",null,null],[17,"RB_SW_SUSPEND","","",null,null],[17,"RB_KEXEC","","",null,null],[17,"AI_PASSIVE","","",null,null],[17,"AI_CANONNAME","","",null,null],[17,"AI_NUMERICHOST","","",null,null],[17,"AI_V4MAPPED","","",null,null],[17,"AI_ALL","","",null,null],[17,"AI_ADDRCONFIG","","",null,null],[17,"AI_NUMERICSERV","","",null,null],[17,"EAI_BADFLAGS","","",null,null],[17,"EAI_NONAME","","",null,null],[17,"EAI_AGAIN","","",null,null],[17,"EAI_FAIL","","",null,null],[17,"EAI_NODATA","","",null,null],[17,"EAI_FAMILY","","",null,null],[17,"EAI_SOCKTYPE","","",null,null],[17,"EAI_SERVICE","","",null,null],[17,"EAI_MEMORY","","",null,null],[17,"EAI_SYSTEM","","",null,null],[17,"EAI_OVERFLOW","","",null,null],[17,"NI_NUMERICHOST","","",null,null],[17,"NI_NUMERICSERV","","",null,null],[17,"NI_NOFQDN","","",null,null],[17,"NI_NAMEREQD","","",null,null],[17,"NI_DGRAM","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_BEFORE","","",null,null],[17,"SYNC_FILE_RANGE_WRITE","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_AFTER","","",null,null],[17,"AIO_CANCELED","","",null,null],[17,"AIO_NOTCANCELED","","",null,null],[17,"AIO_ALLDONE","","",null,null],[17,"LIO_READ","","",null,null],[17,"LIO_WRITE","","",null,null],[17,"LIO_NOP","","",null,null],[17,"LIO_WAIT","","",null,null],[17,"LIO_NOWAIT","","",null,null],[17,"MREMAP_MAYMOVE","","",null,null],[17,"MREMAP_FIXED","","",null,null],[17,"PR_SET_PDEATHSIG","","",null,null],[17,"PR_GET_PDEATHSIG","","",null,null],[17,"PR_GET_DUMPABLE","","",null,null],[17,"PR_SET_DUMPABLE","","",null,null],[17,"PR_GET_UNALIGN","","",null,null],[17,"PR_SET_UNALIGN","","",null,null],[17,"PR_UNALIGN_NOPRINT","","",null,null],[17,"PR_UNALIGN_SIGBUS","","",null,null],[17,"PR_GET_KEEPCAPS","","",null,null],[17,"PR_SET_KEEPCAPS","","",null,null],[17,"PR_GET_FPEMU","","",null,null],[17,"PR_SET_FPEMU","","",null,null],[17,"PR_FPEMU_NOPRINT","","",null,null],[17,"PR_FPEMU_SIGFPE","","",null,null],[17,"PR_GET_FPEXC","","",null,null],[17,"PR_SET_FPEXC","","",null,null],[17,"PR_FP_EXC_SW_ENABLE","","",null,null],[17,"PR_FP_EXC_DIV","","",null,null],[17,"PR_FP_EXC_OVF","","",null,null],[17,"PR_FP_EXC_UND","","",null,null],[17,"PR_FP_EXC_RES","","",null,null],[17,"PR_FP_EXC_INV","","",null,null],[17,"PR_FP_EXC_DISABLED","","",null,null],[17,"PR_FP_EXC_NONRECOV","","",null,null],[17,"PR_FP_EXC_ASYNC","","",null,null],[17,"PR_FP_EXC_PRECISE","","",null,null],[17,"PR_GET_TIMING","","",null,null],[17,"PR_SET_TIMING","","",null,null],[17,"PR_TIMING_STATISTICAL","","",null,null],[17,"PR_TIMING_TIMESTAMP","","",null,null],[17,"PR_SET_NAME","","",null,null],[17,"PR_GET_NAME","","",null,null],[17,"PR_GET_ENDIAN","","",null,null],[17,"PR_SET_ENDIAN","","",null,null],[17,"PR_ENDIAN_BIG","","",null,null],[17,"PR_ENDIAN_LITTLE","","",null,null],[17,"PR_ENDIAN_PPC_LITTLE","","",null,null],[17,"PR_GET_SECCOMP","","",null,null],[17,"PR_SET_SECCOMP","","",null,null],[17,"PR_CAPBSET_READ","","",null,null],[17,"PR_CAPBSET_DROP","","",null,null],[17,"PR_GET_TSC","","",null,null],[17,"PR_SET_TSC","","",null,null],[17,"PR_TSC_ENABLE","","",null,null],[17,"PR_TSC_SIGSEGV","","",null,null],[17,"PR_GET_SECUREBITS","","",null,null],[17,"PR_SET_SECUREBITS","","",null,null],[17,"PR_SET_TIMERSLACK","","",null,null],[17,"PR_GET_TIMERSLACK","","",null,null],[17,"PR_TASK_PERF_EVENTS_DISABLE","","",null,null],[17,"PR_TASK_PERF_EVENTS_ENABLE","","",null,null],[17,"PR_MCE_KILL","","",null,null],[17,"PR_MCE_KILL_CLEAR","","",null,null],[17,"PR_MCE_KILL_SET","","",null,null],[17,"PR_MCE_KILL_LATE","","",null,null],[17,"PR_MCE_KILL_EARLY","","",null,null],[17,"PR_MCE_KILL_DEFAULT","","",null,null],[17,"PR_MCE_KILL_GET","","",null,null],[17,"PR_SET_MM","","",null,null],[17,"PR_SET_MM_START_CODE","","",null,null],[17,"PR_SET_MM_END_CODE","","",null,null],[17,"PR_SET_MM_START_DATA","","",null,null],[17,"PR_SET_MM_END_DATA","","",null,null],[17,"PR_SET_MM_START_STACK","","",null,null],[17,"PR_SET_MM_START_BRK","","",null,null],[17,"PR_SET_MM_BRK","","",null,null],[17,"PR_SET_MM_ARG_START","","",null,null],[17,"PR_SET_MM_ARG_END","","",null,null],[17,"PR_SET_MM_ENV_START","","",null,null],[17,"PR_SET_MM_ENV_END","","",null,null],[17,"PR_SET_MM_AUXV","","",null,null],[17,"PR_SET_MM_EXE_FILE","","",null,null],[17,"PR_SET_MM_MAP","","",null,null],[17,"PR_SET_MM_MAP_SIZE","","",null,null],[17,"PR_SET_PTRACER","","",null,null],[17,"PR_SET_CHILD_SUBREAPER","","",null,null],[17,"PR_GET_CHILD_SUBREAPER","","",null,null],[17,"PR_SET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_TID_ADDRESS","","",null,null],[17,"PR_SET_THP_DISABLE","","",null,null],[17,"PR_GET_THP_DISABLE","","",null,null],[17,"PR_MPX_ENABLE_MANAGEMENT","","",null,null],[17,"PR_MPX_DISABLE_MANAGEMENT","","",null,null],[17,"PR_SET_FP_MODE","","",null,null],[17,"PR_GET_FP_MODE","","",null,null],[17,"PR_FP_MODE_FR","","",null,null],[17,"PR_FP_MODE_FRE","","",null,null],[17,"PR_CAP_AMBIENT","","",null,null],[17,"PR_CAP_AMBIENT_IS_SET","","",null,null],[17,"PR_CAP_AMBIENT_RAISE","","",null,null],[17,"PR_CAP_AMBIENT_LOWER","","",null,null],[17,"PR_CAP_AMBIENT_CLEAR_ALL","","",null,null],[17,"GRND_NONBLOCK","","",null,null],[17,"GRND_RANDOM","","",null,null],[17,"SECCOMP_MODE_DISABLED","","",null,null],[17,"SECCOMP_MODE_STRICT","","",null,null],[17,"SECCOMP_MODE_FILTER","","",null,null],[17,"ITIMER_REAL","","",null,null],[17,"ITIMER_VIRTUAL","","",null,null],[17,"ITIMER_PROF","","",null,null],[17,"TFD_CLOEXEC","","",null,null],[17,"TFD_NONBLOCK","","",null,null],[17,"TFD_TIMER_ABSTIME","","",null,null],[17,"XATTR_CREATE","","",null,null],[17,"XATTR_REPLACE","","",null,null],[17,"_POSIX_VDISABLE","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"FALLOC_FL_COLLAPSE_RANGE","","",null,null],[17,"FALLOC_FL_ZERO_RANGE","","",null,null],[17,"FALLOC_FL_INSERT_RANGE","","",null,null],[17,"FALLOC_FL_UNSHARE_RANGE","","",null,null],[17,"ENOATTR","","",null,null],[17,"SO_ORIGINAL_DST","","",null,null],[17,"IUTF8","","",null,null],[17,"CMSPAR","","",null,null],[17,"MFD_CLOEXEC","","",null,null],[17,"MFD_ALLOW_SEALING","","",null,null],[17,"PT_NULL","","",null,null],[17,"PT_LOAD","","",null,null],[17,"PT_DYNAMIC","","",null,null],[17,"PT_INTERP","","",null,null],[17,"PT_NOTE","","",null,null],[17,"PT_SHLIB","","",null,null],[17,"PT_PHDR","","",null,null],[17,"PT_TLS","","",null,null],[17,"PT_NUM","","",null,null],[17,"PT_LOOS","","",null,null],[17,"PT_GNU_EH_FRAME","","",null,null],[17,"PT_GNU_STACK","","",null,null],[17,"PT_GNU_RELRO","","",null,null],[17,"ETH_ALEN","","",null,null],[17,"ETH_HLEN","","",null,null],[17,"ETH_ZLEN","","",null,null],[17,"ETH_DATA_LEN","","",null,null],[17,"ETH_FRAME_LEN","","",null,null],[17,"ETH_FCS_LEN","","",null,null],[17,"ETH_P_LOOP","","",null,null],[17,"ETH_P_PUP","","",null,null],[17,"ETH_P_PUPAT","","",null,null],[17,"ETH_P_IP","","",null,null],[17,"ETH_P_X25","","",null,null],[17,"ETH_P_ARP","","",null,null],[17,"ETH_P_BPQ","","",null,null],[17,"ETH_P_IEEEPUP","","",null,null],[17,"ETH_P_IEEEPUPAT","","",null,null],[17,"ETH_P_BATMAN","","",null,null],[17,"ETH_P_DEC","","",null,null],[17,"ETH_P_DNA_DL","","",null,null],[17,"ETH_P_DNA_RC","","",null,null],[17,"ETH_P_DNA_RT","","",null,null],[17,"ETH_P_LAT","","",null,null],[17,"ETH_P_DIAG","","",null,null],[17,"ETH_P_CUST","","",null,null],[17,"ETH_P_SCA","","",null,null],[17,"ETH_P_TEB","","",null,null],[17,"ETH_P_RARP","","",null,null],[17,"ETH_P_ATALK","","",null,null],[17,"ETH_P_AARP","","",null,null],[17,"ETH_P_8021Q","","",null,null],[17,"ETH_P_IPX","","",null,null],[17,"ETH_P_IPV6","","",null,null],[17,"ETH_P_PAUSE","","",null,null],[17,"ETH_P_SLOW","","",null,null],[17,"ETH_P_WCCP","","",null,null],[17,"ETH_P_MPLS_UC","","",null,null],[17,"ETH_P_MPLS_MC","","",null,null],[17,"ETH_P_ATMMPOA","","",null,null],[17,"ETH_P_PPP_DISC","","",null,null],[17,"ETH_P_PPP_SES","","",null,null],[17,"ETH_P_LINK_CTL","","",null,null],[17,"ETH_P_ATMFATE","","",null,null],[17,"ETH_P_PAE","","",null,null],[17,"ETH_P_AOE","","",null,null],[17,"ETH_P_8021AD","","",null,null],[17,"ETH_P_802_EX1","","",null,null],[17,"ETH_P_TIPC","","",null,null],[17,"ETH_P_MACSEC","","",null,null],[17,"ETH_P_8021AH","","",null,null],[17,"ETH_P_MVRP","","",null,null],[17,"ETH_P_1588","","",null,null],[17,"ETH_P_PRP","","",null,null],[17,"ETH_P_FCOE","","",null,null],[17,"ETH_P_TDLS","","",null,null],[17,"ETH_P_FIP","","",null,null],[17,"ETH_P_80221","","",null,null],[17,"ETH_P_LOOPBACK","","",null,null],[17,"ETH_P_QINQ1","","",null,null],[17,"ETH_P_QINQ2","","",null,null],[17,"ETH_P_QINQ3","","",null,null],[17,"ETH_P_EDSA","","",null,null],[17,"ETH_P_AF_IUCV","","",null,null],[17,"ETH_P_802_3_MIN","","",null,null],[17,"ETH_P_802_3","","",null,null],[17,"ETH_P_AX25","","",null,null],[17,"ETH_P_ALL","","",null,null],[17,"ETH_P_802_2","","",null,null],[17,"ETH_P_SNAP","","",null,null],[17,"ETH_P_DDCMP","","",null,null],[17,"ETH_P_WAN_PPP","","",null,null],[17,"ETH_P_PPP_MP","","",null,null],[17,"ETH_P_LOCALTALK","","",null,null],[17,"ETH_P_CANFD","","",null,null],[17,"ETH_P_PPPTALK","","",null,null],[17,"ETH_P_TR_802_2","","",null,null],[17,"ETH_P_MOBITEX","","",null,null],[17,"ETH_P_CONTROL","","",null,null],[17,"ETH_P_IRDA","","",null,null],[17,"ETH_P_ECONET","","",null,null],[17,"ETH_P_HDLC","","",null,null],[17,"ETH_P_ARCNET","","",null,null],[17,"ETH_P_DSA","","",null,null],[17,"ETH_P_TRAILER","","",null,null],[17,"ETH_P_PHONET","","",null,null],[17,"ETH_P_IEEE802154","","",null,null],[17,"ETH_P_CAIF","","",null,null],[17,"__UT_LINESIZE","","",null,null],[17,"__UT_NAMESIZE","","",null,null],[17,"__UT_HOSTSIZE","","",null,null],[17,"EMPTY","","",null,null],[17,"RUN_LVL","","",null,null],[17,"BOOT_TIME","","",null,null],[17,"NEW_TIME","","",null,null],[17,"OLD_TIME","","",null,null],[17,"INIT_PROCESS","","",null,null],[17,"LOGIN_PROCESS","","",null,null],[17,"USER_PROCESS","","",null,null],[17,"DEAD_PROCESS","","",null,null],[17,"ACCOUNTING","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"SOL_RXRPC","","",null,null],[17,"SOL_PPPOL2TP","","",null,null],[17,"SOL_BLUETOOTH","","",null,null],[17,"SOL_PNPIPE","","",null,null],[17,"SOL_RDS","","",null,null],[17,"SOL_IUCV","","",null,null],[17,"SOL_CAIF","","",null,null],[17,"SOL_ALG","","",null,null],[17,"SOL_NFC","","",null,null],[17,"MSG_TRYHARD","","",null,null],[17,"LC_PAPER","","",null,null],[17,"LC_NAME","","",null,null],[17,"LC_ADDRESS","","",null,null],[17,"LC_TELEPHONE","","",null,null],[17,"LC_MEASUREMENT","","",null,null],[17,"LC_IDENTIFICATION","","",null,null],[17,"LC_PAPER_MASK","","",null,null],[17,"LC_NAME_MASK","","",null,null],[17,"LC_ADDRESS_MASK","","",null,null],[17,"LC_TELEPHONE_MASK","","",null,null],[17,"LC_MEASUREMENT_MASK","","",null,null],[17,"LC_IDENTIFICATION_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"ENOTSUP","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"SOCK_DCCP","","",null,null],[17,"SOCK_PACKET","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"DCCP_SOCKOPT_PACKET_SIZE","","",null,null],[17,"DCCP_SOCKOPT_SERVICE","","",null,null],[17,"DCCP_SOCKOPT_CHANGE_L","","",null,null],[17,"DCCP_SOCKOPT_CHANGE_R","","",null,null],[17,"DCCP_SOCKOPT_GET_CUR_MPS","","",null,null],[17,"DCCP_SOCKOPT_SERVER_TIMEWAIT","","",null,null],[17,"DCCP_SOCKOPT_SEND_CSCOV","","",null,null],[17,"DCCP_SOCKOPT_RECV_CSCOV","","",null,null],[17,"DCCP_SOCKOPT_AVAILABLE_CCIDS","","",null,null],[17,"DCCP_SOCKOPT_CCID","","",null,null],[17,"DCCP_SOCKOPT_TX_CCID","","",null,null],[17,"DCCP_SOCKOPT_RX_CCID","","",null,null],[17,"DCCP_SOCKOPT_QPOLICY_ID","","",null,null],[17,"DCCP_SOCKOPT_QPOLICY_TXQLEN","","",null,null],[17,"DCCP_SOCKOPT_CCID_RX_INFO","","",null,null],[17,"DCCP_SOCKOPT_CCID_TX_INFO","","",null,null],[17,"DCCP_SERVICE_LIST_MAX_LEN","","maximum number of services provided on the same listening port",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGEV_THREAD_ID","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_EQUIV_CLASS_MAX","","",null,null],[17,"_SC_CHARCLASS_NAME_MAX","","",null,null],[17,"_SC_PII","","",null,null],[17,"_SC_PII_XTI","","",null,null],[17,"_SC_PII_SOCKET","","",null,null],[17,"_SC_PII_INTERNET","","",null,null],[17,"_SC_PII_OSI","","",null,null],[17,"_SC_POLL","","",null,null],[17,"_SC_SELECT","","",null,null],[17,"_SC_PII_INTERNET_STREAM","","",null,null],[17,"_SC_PII_INTERNET_DGRAM","","",null,null],[17,"_SC_PII_OSI_COTS","","",null,null],[17,"_SC_PII_OSI_CLTS","","",null,null],[17,"_SC_PII_OSI_M","","",null,null],[17,"_SC_T_IOV_MAX","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"_SC_CHAR_BIT","","",null,null],[17,"_SC_CHAR_MAX","","",null,null],[17,"_SC_CHAR_MIN","","",null,null],[17,"_SC_INT_MAX","","",null,null],[17,"_SC_INT_MIN","","",null,null],[17,"_SC_LONG_BIT","","",null,null],[17,"_SC_WORD_BIT","","",null,null],[17,"_SC_MB_LEN_MAX","","",null,null],[17,"_SC_SSIZE_MAX","","",null,null],[17,"_SC_SCHAR_MAX","","",null,null],[17,"_SC_SCHAR_MIN","","",null,null],[17,"_SC_SHRT_MAX","","",null,null],[17,"_SC_SHRT_MIN","","",null,null],[17,"_SC_UCHAR_MAX","","",null,null],[17,"_SC_UINT_MAX","","",null,null],[17,"_SC_ULONG_MAX","","",null,null],[17,"_SC_USHRT_MAX","","",null,null],[17,"_SC_NL_ARGMAX","","",null,null],[17,"_SC_NL_LANGMAX","","",null,null],[17,"_SC_NL_MSGMAX","","",null,null],[17,"_SC_NL_NMAX","","",null,null],[17,"_SC_NL_SETMAX","","",null,null],[17,"_SC_NL_TEXTMAX","","",null,null],[17,"_SC_BASE","","",null,null],[17,"_SC_C_LANG_SUPPORT","","",null,null],[17,"_SC_C_LANG_SUPPORT_R","","",null,null],[17,"_SC_DEVICE_IO","","",null,null],[17,"_SC_DEVICE_SPECIFIC","","",null,null],[17,"_SC_DEVICE_SPECIFIC_R","","",null,null],[17,"_SC_FD_MGMT","","",null,null],[17,"_SC_FIFO","","",null,null],[17,"_SC_PIPE","","",null,null],[17,"_SC_FILE_ATTRIBUTES","","",null,null],[17,"_SC_FILE_LOCKING","","",null,null],[17,"_SC_FILE_SYSTEM","","",null,null],[17,"_SC_MULTI_PROCESS","","",null,null],[17,"_SC_SINGLE_PROCESS","","",null,null],[17,"_SC_NETWORKING","","",null,null],[17,"_SC_REGEX_VERSION","","",null,null],[17,"_SC_SIGNALS","","",null,null],[17,"_SC_SYSTEM_DATABASE","","",null,null],[17,"_SC_SYSTEM_DATABASE_R","","",null,null],[17,"_SC_USER_GROUPS","","",null,null],[17,"_SC_USER_GROUPS_R","","",null,null],[17,"_SC_LEVEL1_ICACHE_SIZE","","",null,null],[17,"_SC_LEVEL1_ICACHE_ASSOC","","",null,null],[17,"_SC_LEVEL1_ICACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL1_DCACHE_SIZE","","",null,null],[17,"_SC_LEVEL1_DCACHE_ASSOC","","",null,null],[17,"_SC_LEVEL1_DCACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL2_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL2_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL2_CACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL3_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL3_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL3_CACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL4_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL4_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL4_CACHE_LINESIZE","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"SEEK_DATA","","",null,null],[17,"SEEK_HOLE","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"LINUX_REBOOT_MAGIC1","","",null,null],[17,"LINUX_REBOOT_MAGIC2","","",null,null],[17,"LINUX_REBOOT_MAGIC2A","","",null,null],[17,"LINUX_REBOOT_MAGIC2B","","",null,null],[17,"LINUX_REBOOT_MAGIC2C","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART","","",null,null],[17,"LINUX_REBOOT_CMD_HALT","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_ON","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_POWER_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART2","","",null,null],[17,"LINUX_REBOOT_CMD_SW_SUSPEND","","",null,null],[17,"LINUX_REBOOT_CMD_KEXEC","","",null,null],[17,"NETLINK_ROUTE","","",null,null],[17,"NETLINK_UNUSED","","",null,null],[17,"NETLINK_USERSOCK","","",null,null],[17,"NETLINK_FIREWALL","","",null,null],[17,"NETLINK_SOCK_DIAG","","",null,null],[17,"NETLINK_NFLOG","","",null,null],[17,"NETLINK_XFRM","","",null,null],[17,"NETLINK_SELINUX","","",null,null],[17,"NETLINK_ISCSI","","",null,null],[17,"NETLINK_AUDIT","","",null,null],[17,"NETLINK_FIB_LOOKUP","","",null,null],[17,"NETLINK_CONNECTOR","","",null,null],[17,"NETLINK_NETFILTER","","",null,null],[17,"NETLINK_IP6_FW","","",null,null],[17,"NETLINK_DNRTMSG","","",null,null],[17,"NETLINK_KOBJECT_UEVENT","","",null,null],[17,"NETLINK_GENERIC","","",null,null],[17,"NETLINK_SCSITRANSPORT","","",null,null],[17,"NETLINK_ECRYPTFS","","",null,null],[17,"NETLINK_RDMA","","",null,null],[17,"NETLINK_CRYPTO","","",null,null],[17,"NETLINK_INET_DIAG","","",null,null],[17,"MAX_LINKS","","",null,null],[17,"NLM_F_REQUEST","","",null,null],[17,"NLM_F_MULTI","","",null,null],[17,"NLM_F_ACK","","",null,null],[17,"NLM_F_ECHO","","",null,null],[17,"NLM_F_DUMP_INTR","","",null,null],[17,"NLM_F_DUMP_FILTERED","","",null,null],[17,"NLM_F_ROOT","","",null,null],[17,"NLM_F_MATCH","","",null,null],[17,"NLM_F_ATOMIC","","",null,null],[17,"NLM_F_DUMP","","",null,null],[17,"NLM_F_REPLACE","","",null,null],[17,"NLM_F_EXCL","","",null,null],[17,"NLM_F_CREATE","","",null,null],[17,"NLM_F_APPEND","","",null,null],[17,"NLMSG_NOOP","","",null,null],[17,"NLMSG_ERROR","","",null,null],[17,"NLMSG_DONE","","",null,null],[17,"NLMSG_OVERRUN","","",null,null],[17,"NLMSG_MIN_TYPE","","",null,null],[17,"NETLINK_ADD_MEMBERSHIP","","",null,null],[17,"NETLINK_DROP_MEMBERSHIP","","",null,null],[17,"NETLINK_PKTINFO","","",null,null],[17,"NETLINK_BROADCAST_ERROR","","",null,null],[17,"NETLINK_NO_ENOBUFS","","",null,null],[17,"NETLINK_RX_RING","","",null,null],[17,"NETLINK_TX_RING","","",null,null],[17,"NETLINK_LISTEN_ALL_NSID","","",null,null],[17,"NETLINK_LIST_MEMBERSHIPS","","",null,null],[17,"NETLINK_CAP_ACK","","",null,null],[17,"NLA_F_NESTED","","",null,null],[17,"NLA_F_NET_BYTEORDER","","",null,null],[17,"NLA_TYPE_MASK","","",null,null],[17,"TIOCM_LE","","",null,null],[17,"TIOCM_DTR","","",null,null],[17,"TIOCM_RTS","","",null,null],[17,"TIOCM_ST","","",null,null],[17,"TIOCM_SR","","",null,null],[17,"TIOCM_CTS","","",null,null],[17,"TIOCM_CAR","","",null,null],[17,"TIOCM_RNG","","",null,null],[17,"TIOCM_DSR","","",null,null],[17,"TIOCM_CD","","",null,null],[17,"TIOCM_RI","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCKATTR_T","","",null,null],[17,"O_LARGEFILE","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"O_NOATIME","","",null,null],[17,"O_PATH","","",null,null],[17,"O_TMPFILE","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_SNDBUFFORCE","","",null,null],[17,"SO_RCVBUFFORCE","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_NO_CHECK","","",null,null],[17,"SO_PRIORITY","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_BSDCOMPAT","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_PASSCRED","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_SECURITY_AUTHENTICATION","","",null,null],[17,"SO_SECURITY_ENCRYPTION_TRANSPORT","","",null,null],[17,"SO_SECURITY_ENCRYPTION_NETWORK","","",null,null],[17,"SO_BINDTODEVICE","","",null,null],[17,"SO_ATTACH_FILTER","","",null,null],[17,"SO_DETACH_FILTER","","",null,null],[17,"SO_GET_FILTER","","",null,null],[17,"SO_PEERNAME","","",null,null],[17,"SO_TIMESTAMP","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_PEERSEC","","",null,null],[17,"SO_PASSSEC","","",null,null],[17,"SO_TIMESTAMPNS","","",null,null],[17,"SCM_TIMESTAMPNS","","",null,null],[17,"SO_MARK","","",null,null],[17,"SO_TIMESTAMPING","","",null,null],[17,"SCM_TIMESTAMPING","","",null,null],[17,"SO_PROTOCOL","","",null,null],[17,"SO_DOMAIN","","",null,null],[17,"SO_RXQ_OVFL","","",null,null],[17,"SO_WIFI_STATUS","","",null,null],[17,"SCM_WIFI_STATUS","","",null,null],[17,"SO_PEEK_OFF","","",null,null],[17,"SO_NOFCS","","",null,null],[17,"SO_LOCK_FILTER","","",null,null],[17,"SO_SELECT_ERR_QUEUE","","",null,null],[17,"SO_BUSY_POLL","","",null,null],[17,"SO_MAX_PACING_RATE","","",null,null],[17,"SO_BPF_EXTENSIONS","","",null,null],[17,"SO_INCOMING_CPU","","",null,null],[17,"SO_ATTACH_BPF","","",null,null],[17,"SO_DETACH_BPF","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"TIOCCONS","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"NCCS","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"EPOLL_CLOEXEC","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"__SIZEOF_PTHREAD_CONDATTR_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"PTRACE_PEEKSIGINFO_SHARED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"MINSIGSTKSZ","","",null,null],[17,"CBAUD","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF1","","",null,null],[17,"BS1","","",null,null],[17,"VT1","","",null,null],[17,"VWERASE","","",null,null],[17,"VREPRINT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"CIBAUD","","",null,null],[17,"CBAUDEX","","",null,null],[17,"VSWTC","","",null,null],[17,"OLCUC","","",null,null],[17,"NLDLY","","",null,null],[17,"CRDLY","","",null,null],[17,"TABDLY","","",null,null],[17,"BSDLY","","",null,null],[17,"FFDLY","","",null,null],[17,"VTDLY","","",null,null],[17,"XTABS","","",null,null],[17,"B0","","",null,null],[17,"B50","","",null,null],[17,"B75","","",null,null],[17,"B110","","",null,null],[17,"B134","","",null,null],[17,"B150","","",null,null],[17,"B200","","",null,null],[17,"B300","","",null,null],[17,"B600","","",null,null],[17,"B1200","","",null,null],[17,"B1800","","",null,null],[17,"B2400","","",null,null],[17,"B4800","","",null,null],[17,"B9600","","",null,null],[17,"B19200","","",null,null],[17,"B38400","","",null,null],[17,"EXTA","","",null,null],[17,"EXTB","","",null,null],[17,"BOTHER","","",null,null],[17,"B57600","","",null,null],[17,"B115200","","",null,null],[17,"B230400","","",null,null],[17,"B460800","","",null,null],[17,"B500000","","",null,null],[17,"B576000","","",null,null],[17,"B921600","","",null,null],[17,"B1000000","","",null,null],[17,"B1152000","","",null,null],[17,"B1500000","","",null,null],[17,"B2000000","","",null,null],[17,"B2500000","","",null,null],[17,"B3000000","","",null,null],[17,"B3500000","","",null,null],[17,"B4000000","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"EXTPROC","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"FIONREAD","","",null,null],[17,"R15","","",null,null],[17,"R14","","",null,null],[17,"R13","","",null,null],[17,"R12","","",null,null],[17,"RBP","","",null,null],[17,"RBX","","",null,null],[17,"R11","","",null,null],[17,"R10","","",null,null],[17,"R9","","",null,null],[17,"R8","","",null,null],[17,"RAX","","",null,null],[17,"RCX","","",null,null],[17,"RDX","","",null,null],[17,"RSI","","",null,null],[17,"RDI","","",null,null],[17,"ORIG_RAX","","",null,null],[17,"RIP","","",null,null],[17,"CS","","",null,null],[17,"EFLAGS","","",null,null],[17,"RSP","","",null,null],[17,"SS","","",null,null],[17,"FS_BASE","","",null,null],[17,"GS_BASE","","",null,null],[17,"DS","","",null,null],[17,"ES","","",null,null],[17,"FS","","",null,null],[17,"GS","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"SYS_read","","",null,null],[17,"SYS_write","","",null,null],[17,"SYS_open","","",null,null],[17,"SYS_close","","",null,null],[17,"SYS_stat","","",null,null],[17,"SYS_fstat","","",null,null],[17,"SYS_lstat","","",null,null],[17,"SYS_poll","","",null,null],[17,"SYS_lseek","","",null,null],[17,"SYS_mmap","","",null,null],[17,"SYS_mprotect","","",null,null],[17,"SYS_munmap","","",null,null],[17,"SYS_brk","","",null,null],[17,"SYS_rt_sigaction","","",null,null],[17,"SYS_rt_sigprocmask","","",null,null],[17,"SYS_rt_sigreturn","","",null,null],[17,"SYS_ioctl","","",null,null],[17,"SYS_pread64","","",null,null],[17,"SYS_pwrite64","","",null,null],[17,"SYS_readv","","",null,null],[17,"SYS_writev","","",null,null],[17,"SYS_access","","",null,null],[17,"SYS_pipe","","",null,null],[17,"SYS_select","","",null,null],[17,"SYS_sched_yield","","",null,null],[17,"SYS_mremap","","",null,null],[17,"SYS_msync","","",null,null],[17,"SYS_mincore","","",null,null],[17,"SYS_madvise","","",null,null],[17,"SYS_shmget","","",null,null],[17,"SYS_shmat","","",null,null],[17,"SYS_shmctl","","",null,null],[17,"SYS_dup","","",null,null],[17,"SYS_dup2","","",null,null],[17,"SYS_pause","","",null,null],[17,"SYS_nanosleep","","",null,null],[17,"SYS_getitimer","","",null,null],[17,"SYS_alarm","","",null,null],[17,"SYS_setitimer","","",null,null],[17,"SYS_getpid","","",null,null],[17,"SYS_sendfile","","",null,null],[17,"SYS_socket","","",null,null],[17,"SYS_connect","","",null,null],[17,"SYS_accept","","",null,null],[17,"SYS_sendto","","",null,null],[17,"SYS_recvfrom","","",null,null],[17,"SYS_sendmsg","","",null,null],[17,"SYS_recvmsg","","",null,null],[17,"SYS_shutdown","","",null,null],[17,"SYS_bind","","",null,null],[17,"SYS_listen","","",null,null],[17,"SYS_getsockname","","",null,null],[17,"SYS_getpeername","","",null,null],[17,"SYS_socketpair","","",null,null],[17,"SYS_setsockopt","","",null,null],[17,"SYS_getsockopt","","",null,null],[17,"SYS_clone","","",null,null],[17,"SYS_fork","","",null,null],[17,"SYS_vfork","","",null,null],[17,"SYS_execve","","",null,null],[17,"SYS_exit","","",null,null],[17,"SYS_wait4","","",null,null],[17,"SYS_kill","","",null,null],[17,"SYS_uname","","",null,null],[17,"SYS_semget","","",null,null],[17,"SYS_semop","","",null,null],[17,"SYS_semctl","","",null,null],[17,"SYS_shmdt","","",null,null],[17,"SYS_msgget","","",null,null],[17,"SYS_msgsnd","","",null,null],[17,"SYS_msgrcv","","",null,null],[17,"SYS_msgctl","","",null,null],[17,"SYS_fcntl","","",null,null],[17,"SYS_flock","","",null,null],[17,"SYS_fsync","","",null,null],[17,"SYS_fdatasync","","",null,null],[17,"SYS_truncate","","",null,null],[17,"SYS_ftruncate","","",null,null],[17,"SYS_getdents","","",null,null],[17,"SYS_getcwd","","",null,null],[17,"SYS_chdir","","",null,null],[17,"SYS_fchdir","","",null,null],[17,"SYS_rename","","",null,null],[17,"SYS_mkdir","","",null,null],[17,"SYS_rmdir","","",null,null],[17,"SYS_creat","","",null,null],[17,"SYS_link","","",null,null],[17,"SYS_unlink","","",null,null],[17,"SYS_symlink","","",null,null],[17,"SYS_readlink","","",null,null],[17,"SYS_chmod","","",null,null],[17,"SYS_fchmod","","",null,null],[17,"SYS_chown","","",null,null],[17,"SYS_fchown","","",null,null],[17,"SYS_lchown","","",null,null],[17,"SYS_umask","","",null,null],[17,"SYS_gettimeofday","","",null,null],[17,"SYS_getrlimit","","",null,null],[17,"SYS_getrusage","","",null,null],[17,"SYS_sysinfo","","",null,null],[17,"SYS_times","","",null,null],[17,"SYS_ptrace","","",null,null],[17,"SYS_getuid","","",null,null],[17,"SYS_syslog","","",null,null],[17,"SYS_getgid","","",null,null],[17,"SYS_setuid","","",null,null],[17,"SYS_setgid","","",null,null],[17,"SYS_geteuid","","",null,null],[17,"SYS_getegid","","",null,null],[17,"SYS_setpgid","","",null,null],[17,"SYS_getppid","","",null,null],[17,"SYS_getpgrp","","",null,null],[17,"SYS_setsid","","",null,null],[17,"SYS_setreuid","","",null,null],[17,"SYS_setregid","","",null,null],[17,"SYS_getgroups","","",null,null],[17,"SYS_setgroups","","",null,null],[17,"SYS_setresuid","","",null,null],[17,"SYS_getresuid","","",null,null],[17,"SYS_setresgid","","",null,null],[17,"SYS_getresgid","","",null,null],[17,"SYS_getpgid","","",null,null],[17,"SYS_setfsuid","","",null,null],[17,"SYS_setfsgid","","",null,null],[17,"SYS_getsid","","",null,null],[17,"SYS_capget","","",null,null],[17,"SYS_capset","","",null,null],[17,"SYS_rt_sigpending","","",null,null],[17,"SYS_rt_sigtimedwait","","",null,null],[17,"SYS_rt_sigqueueinfo","","",null,null],[17,"SYS_rt_sigsuspend","","",null,null],[17,"SYS_sigaltstack","","",null,null],[17,"SYS_utime","","",null,null],[17,"SYS_mknod","","",null,null],[17,"SYS_uselib","","",null,null],[17,"SYS_personality","","",null,null],[17,"SYS_ustat","","",null,null],[17,"SYS_statfs","","",null,null],[17,"SYS_fstatfs","","",null,null],[17,"SYS_sysfs","","",null,null],[17,"SYS_getpriority","","",null,null],[17,"SYS_setpriority","","",null,null],[17,"SYS_sched_setparam","","",null,null],[17,"SYS_sched_getparam","","",null,null],[17,"SYS_sched_setscheduler","","",null,null],[17,"SYS_sched_getscheduler","","",null,null],[17,"SYS_sched_get_priority_max","","",null,null],[17,"SYS_sched_get_priority_min","","",null,null],[17,"SYS_sched_rr_get_interval","","",null,null],[17,"SYS_mlock","","",null,null],[17,"SYS_munlock","","",null,null],[17,"SYS_mlockall","","",null,null],[17,"SYS_munlockall","","",null,null],[17,"SYS_vhangup","","",null,null],[17,"SYS_modify_ldt","","",null,null],[17,"SYS_pivot_root","","",null,null],[17,"SYS__sysctl","","",null,null],[17,"SYS_prctl","","",null,null],[17,"SYS_arch_prctl","","",null,null],[17,"SYS_adjtimex","","",null,null],[17,"SYS_setrlimit","","",null,null],[17,"SYS_chroot","","",null,null],[17,"SYS_sync","","",null,null],[17,"SYS_acct","","",null,null],[17,"SYS_settimeofday","","",null,null],[17,"SYS_mount","","",null,null],[17,"SYS_umount2","","",null,null],[17,"SYS_swapon","","",null,null],[17,"SYS_swapoff","","",null,null],[17,"SYS_reboot","","",null,null],[17,"SYS_sethostname","","",null,null],[17,"SYS_setdomainname","","",null,null],[17,"SYS_iopl","","",null,null],[17,"SYS_ioperm","","",null,null],[17,"SYS_create_module","","",null,null],[17,"SYS_init_module","","",null,null],[17,"SYS_delete_module","","",null,null],[17,"SYS_get_kernel_syms","","",null,null],[17,"SYS_query_module","","",null,null],[17,"SYS_quotactl","","",null,null],[17,"SYS_nfsservctl","","",null,null],[17,"SYS_getpmsg","","",null,null],[17,"SYS_putpmsg","","",null,null],[17,"SYS_afs_syscall","","",null,null],[17,"SYS_tuxcall","","",null,null],[17,"SYS_security","","",null,null],[17,"SYS_gettid","","",null,null],[17,"SYS_readahead","","",null,null],[17,"SYS_setxattr","","",null,null],[17,"SYS_lsetxattr","","",null,null],[17,"SYS_fsetxattr","","",null,null],[17,"SYS_getxattr","","",null,null],[17,"SYS_lgetxattr","","",null,null],[17,"SYS_fgetxattr","","",null,null],[17,"SYS_listxattr","","",null,null],[17,"SYS_llistxattr","","",null,null],[17,"SYS_flistxattr","","",null,null],[17,"SYS_removexattr","","",null,null],[17,"SYS_lremovexattr","","",null,null],[17,"SYS_fremovexattr","","",null,null],[17,"SYS_tkill","","",null,null],[17,"SYS_time","","",null,null],[17,"SYS_futex","","",null,null],[17,"SYS_sched_setaffinity","","",null,null],[17,"SYS_sched_getaffinity","","",null,null],[17,"SYS_set_thread_area","","",null,null],[17,"SYS_io_setup","","",null,null],[17,"SYS_io_destroy","","",null,null],[17,"SYS_io_getevents","","",null,null],[17,"SYS_io_submit","","",null,null],[17,"SYS_io_cancel","","",null,null],[17,"SYS_get_thread_area","","",null,null],[17,"SYS_lookup_dcookie","","",null,null],[17,"SYS_epoll_create","","",null,null],[17,"SYS_epoll_ctl_old","","",null,null],[17,"SYS_epoll_wait_old","","",null,null],[17,"SYS_remap_file_pages","","",null,null],[17,"SYS_getdents64","","",null,null],[17,"SYS_set_tid_address","","",null,null],[17,"SYS_restart_syscall","","",null,null],[17,"SYS_semtimedop","","",null,null],[17,"SYS_fadvise64","","",null,null],[17,"SYS_timer_create","","",null,null],[17,"SYS_timer_settime","","",null,null],[17,"SYS_timer_gettime","","",null,null],[17,"SYS_timer_getoverrun","","",null,null],[17,"SYS_timer_delete","","",null,null],[17,"SYS_clock_settime","","",null,null],[17,"SYS_clock_gettime","","",null,null],[17,"SYS_clock_getres","","",null,null],[17,"SYS_clock_nanosleep","","",null,null],[17,"SYS_exit_group","","",null,null],[17,"SYS_epoll_wait","","",null,null],[17,"SYS_epoll_ctl","","",null,null],[17,"SYS_tgkill","","",null,null],[17,"SYS_utimes","","",null,null],[17,"SYS_vserver","","",null,null],[17,"SYS_mbind","","",null,null],[17,"SYS_set_mempolicy","","",null,null],[17,"SYS_get_mempolicy","","",null,null],[17,"SYS_mq_open","","",null,null],[17,"SYS_mq_unlink","","",null,null],[17,"SYS_mq_timedsend","","",null,null],[17,"SYS_mq_timedreceive","","",null,null],[17,"SYS_mq_notify","","",null,null],[17,"SYS_mq_getsetattr","","",null,null],[17,"SYS_kexec_load","","",null,null],[17,"SYS_waitid","","",null,null],[17,"SYS_add_key","","",null,null],[17,"SYS_request_key","","",null,null],[17,"SYS_keyctl","","",null,null],[17,"SYS_ioprio_set","","",null,null],[17,"SYS_ioprio_get","","",null,null],[17,"SYS_inotify_init","","",null,null],[17,"SYS_inotify_add_watch","","",null,null],[17,"SYS_inotify_rm_watch","","",null,null],[17,"SYS_migrate_pages","","",null,null],[17,"SYS_openat","","",null,null],[17,"SYS_mkdirat","","",null,null],[17,"SYS_mknodat","","",null,null],[17,"SYS_fchownat","","",null,null],[17,"SYS_futimesat","","",null,null],[17,"SYS_newfstatat","","",null,null],[17,"SYS_unlinkat","","",null,null],[17,"SYS_renameat","","",null,null],[17,"SYS_linkat","","",null,null],[17,"SYS_symlinkat","","",null,null],[17,"SYS_readlinkat","","",null,null],[17,"SYS_fchmodat","","",null,null],[17,"SYS_faccessat","","",null,null],[17,"SYS_pselect6","","",null,null],[17,"SYS_ppoll","","",null,null],[17,"SYS_unshare","","",null,null],[17,"SYS_set_robust_list","","",null,null],[17,"SYS_get_robust_list","","",null,null],[17,"SYS_splice","","",null,null],[17,"SYS_tee","","",null,null],[17,"SYS_sync_file_range","","",null,null],[17,"SYS_vmsplice","","",null,null],[17,"SYS_move_pages","","",null,null],[17,"SYS_utimensat","","",null,null],[17,"SYS_epoll_pwait","","",null,null],[17,"SYS_signalfd","","",null,null],[17,"SYS_timerfd_create","","",null,null],[17,"SYS_eventfd","","",null,null],[17,"SYS_fallocate","","",null,null],[17,"SYS_timerfd_settime","","",null,null],[17,"SYS_timerfd_gettime","","",null,null],[17,"SYS_accept4","","",null,null],[17,"SYS_signalfd4","","",null,null],[17,"SYS_eventfd2","","",null,null],[17,"SYS_epoll_create1","","",null,null],[17,"SYS_dup3","","",null,null],[17,"SYS_pipe2","","",null,null],[17,"SYS_inotify_init1","","",null,null],[17,"SYS_preadv","","",null,null],[17,"SYS_pwritev","","",null,null],[17,"SYS_rt_tgsigqueueinfo","","",null,null],[17,"SYS_perf_event_open","","",null,null],[17,"SYS_recvmmsg","","",null,null],[17,"SYS_fanotify_init","","",null,null],[17,"SYS_fanotify_mark","","",null,null],[17,"SYS_prlimit64","","",null,null],[17,"SYS_name_to_handle_at","","",null,null],[17,"SYS_open_by_handle_at","","",null,null],[17,"SYS_clock_adjtime","","",null,null],[17,"SYS_syncfs","","",null,null],[17,"SYS_sendmmsg","","",null,null],[17,"SYS_setns","","",null,null],[17,"SYS_getcpu","","",null,null],[17,"SYS_process_vm_readv","","",null,null],[17,"SYS_process_vm_writev","","",null,null],[17,"SYS_kcmp","","",null,null],[17,"SYS_finit_module","","",null,null],[17,"SYS_sched_setattr","","",null,null],[17,"SYS_sched_getattr","","",null,null],[17,"SYS_renameat2","","",null,null],[17,"SYS_seccomp","","",null,null],[17,"SYS_getrandom","","",null,null],[17,"SYS_memfd_create","","",null,null],[17,"SYS_kexec_file_load","","",null,null],[17,"SYS_bpf","","",null,null],[17,"SYS_execveat","","",null,null],[17,"SYS_userfaultfd","","",null,null],[17,"SYS_membarrier","","",null,null],[17,"SYS_mlock2","","",null,null],[17,"SYS_copy_file_range","","",null,null],[17,"SYS_preadv2","","",null,null],[17,"SYS_pwritev2","","",null,null],[17,"SYS_pkey_mprotect","","",null,null],[17,"SYS_pkey_alloc","","",null,null],[17,"SYS_pkey_free","","",null,null]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"itimerval"],[3,"tms"],[3,"servent"],[3,"protoent"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"sigevent"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"passwd"],[3,"spwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"itimerspec"],[3,"mq_attr"],[3,"if_nameindex"],[3,"msginfo"],[3,"mmsghdr"],[3,"sembuf"],[3,"input_event"],[3,"input_id"],[3,"input_absinfo"],[3,"input_keymap_entry"],[3,"input_mask"],[3,"ff_replay"],[3,"ff_trigger"],[3,"ff_envelope"],[3,"ff_constant_effect"],[3,"ff_ramp_effect"],[3,"ff_condition_effect"],[3,"ff_periodic_effect"],[3,"ff_rumble_effect"],[3,"ff_effect"],[3,"dl_phdr_info"],[3,"Elf32_Phdr"],[3,"Elf64_Phdr"],[3,"ucred"],[3,"mntent"],[3,"aiocb"],[3,"__exit_status"],[3,"__timeval"],[3,"utmpx"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"statfs"],[3,"msghdr"],[3,"cmsghdr"],[3,"termios"],[3,"flock"],[3,"sysinfo"],[3,"msqid_ds"],[3,"stat"],[3,"stat64"],[3,"statfs64"],[3,"statvfs64"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"user_fpregs_struct"],[3,"user_regs_struct"],[3,"user"],[3,"mcontext_t"],[3,"ucontext_t"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"termios2"],[3,"pthread_attr_t"],[3,"sigset_t"],[3,"sem_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_rwlockattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"fd_set"]]};
searchIndex["memmap"] = {"doc":"A cross-platform Rust API for memory maps.","items":[[3,"MmapOptions","memmap","",null,null],[12,"stack","","Indicates that the memory map should be suitable for a stack.",0,null],[3,"Mmap","","A memory-mapped buffer.",null,null],[3,"MmapView","","A view of a memory map.",null,null],[3,"MmapViewSync","","A thread-safe view of a memory map.",null,null],[4,"Protection","","Memory map protection.",null,null],[13,"Read","","A read-only memory map. Writes to the memory map will result in a panic.",1,null],[13,"ReadWrite","","A read-write memory map. Writes to the memory map will be reflected in the file after a call to `Mmap::flush` or after the `Mmap` is dropped.",1,null],[13,"ReadCopy","","A read, copy-on-write memory map. Writes to the memory map will not be carried through to the underlying file. It is unspecified whether changes made to the file after the memory map is created will be visible.",1,null],[13,"ReadExecute","","A readable and executable mapping.",1,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"protection"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"protection"}],"output":{"name":"bool"}}],[11,"write","","Returns `true` if the `Protection` is writable.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"mmapoptions"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"mmapoptions"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"mmapoptions"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"mmapoptions"}],"output":{"name":"bool"}}],[11,"open","","Opens a file-backed memory map.",2,{"inputs":[{"name":"file"},{"name":"protection"}],"output":{"generics":["mmap"],"name":"result"}}],[11,"open_path","","Opens a file-backed memory map.",2,{"inputs":[{"name":"p"},{"name":"protection"}],"output":{"generics":["mmap"],"name":"result"}}],[11,"open_with_offset","","Opens a file-backed memory map with the specified offset and length.",2,{"inputs":[{"name":"file"},{"name":"protection"},{"name":"usize"},{"name":"usize"}],"output":{"generics":["mmap"],"name":"result"}}],[11,"anonymous","","Opens an anonymous memory map.",2,{"inputs":[{"name":"usize"},{"name":"protection"}],"output":{"generics":["mmap"],"name":"result"}}],[11,"anonymous_with_options","","Opens an anonymous memory map with the provided options.",2,{"inputs":[{"name":"usize"},{"name":"protection"},{"name":"mmapoptions"}],"output":{"generics":["mmap"],"name":"result"}}],[11,"flush","","Flushes outstanding memory map modifications to disk.",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"flush_async","","Asynchronously flushes outstanding memory map modifications to disk.",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"flush_range","","Flushes outstanding memory map modifications in the range to disk.",2,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"result"}}],[11,"flush_async_range","","Asynchronously flushes outstanding memory map modifications in the range to disk.",2,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"result"}}],[11,"set_protection","","Change the `Protection` this mapping was created with.",2,{"inputs":[{"name":"self"},{"name":"protection"}],"output":{"name":"result"}}],[11,"len","","Returns the length of the memory map.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"ptr","","Returns a pointer to the mapped memory.",2,null],[11,"mut_ptr","","Returns a pointer to the mapped memory.",2,null],[11,"as_slice","","Returns the memory mapped file as an immutable slice.",2,null],[11,"as_mut_slice","","Returns the memory mapped file as a mutable slice.",2,null],[11,"into_view","","Creates a splittable mmap view from the mmap.",2,{"inputs":[{"name":"self"}],"output":{"name":"mmapview"}}],[11,"into_view_sync","","Creates a thread-safe splittable mmap view from the mmap.",2,{"inputs":[{"name":"self"}],"output":{"name":"mmapviewsync"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"split_at","","Split the view into disjoint pieces at the specified offset.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"restrict","","Restricts the range of the view to the provided offset and length.",3,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"result"}}],[11,"flush","","Flushes outstanding view modifications to disk.",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"flush_async","","Asynchronously flushes outstanding memory map view modifications to disk.",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"len","","Returns the length of the memory map view.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"ptr","","Returns a shared pointer to the mapped memory.",3,null],[11,"mut_ptr","","Returns a mutable pointer to the mapped memory.",3,null],[11,"as_slice","","Returns the memory mapped file as an immutable slice.",3,null],[11,"as_mut_slice","","Returns the memory mapped file as a mutable slice.",3,null],[11,"clone","","Clones the view of the memory map.",3,{"inputs":[{"name":"self"}],"output":{"name":"mmapview"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"split_at","","Split the view into disjoint pieces at the specified offset.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"restrict","","Restricts the range of this view to the provided offset and length.",4,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"result"}}],[11,"flush","","Flushes outstanding view modifications to disk.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"flush_async","","Asynchronously flushes outstanding memory map view modifications to disk.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"len","","Returns the length of the memory map view.",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"ptr","","Returns a shared pointer to the mapped memory.",4,null],[11,"mut_ptr","","Returns a mutable pointer to the mapped memory.",4,null],[11,"as_slice","","Returns the memory mapped file as an immutable slice.",4,null],[11,"as_mut_slice","","Returns the memory mapped file as a mutable slice.",4,null],[11,"clone","","Clones the view of the memory map.",4,{"inputs":[{"name":"self"}],"output":{"name":"mmapviewsync"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"MmapOptions"],[4,"Protection"],[3,"Mmap"],[3,"MmapView"],[3,"MmapViewSync"]]};
searchIndex["quote"] = {"doc":"Quasi-quoting without a Syntex dependency, intended for use with Macros 1.1.","items":[[3,"Tokens","quote","Tokens produced by a `quote!(...)` invocation.",null,null],[3,"ByteStr","","Wrap a `&str` so it interpolates as a byte-string: `b\"abc\"`.",null,null],[12,"0","","",0,null],[3,"Hex","","Wrap an integer so it interpolates as a hexadecimal.",null,null],[12,"0","","",1,null],[3,"Ident","","An identifier that should be interpolated without quotes.",null,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":{"name":"bool"}}],[11,"new","","Empty tokens.",2,{"inputs":[],"output":{"name":"self"}}],[11,"append","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"append_all","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"append_separated","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"i"},{"name":"s"}],"output":null}],[11,"append_terminated","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"i"},{"name":"s"}],"output":null}],[11,"as_str","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into_string","","",2,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"parse","","",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"as_ref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_tokens","","",0,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"hash","","",3,null],[11,"new","","",3,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"generics":["str"],"name":"cow"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"to_tokens","","",3,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[8,"ToTokens","","Types that can be interpolated inside a `quote!(...)` invocation.",null,null],[10,"to_tokens","","Write `self` to the given `Tokens`.",4,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[14,"quote","","The whole point.",null,null]],"paths":[[3,"ByteStr"],[3,"Hex"],[3,"Tokens"],[3,"Ident"],[8,"ToTokens"]]};
searchIndex["syn"] = {"doc":"","items":[[3,"Attribute","syn","Doc-comments are promoted to attributes that have `is_sugared_doc` = true",null,null],[12,"style","","",0,null],[12,"value","","",0,null],[12,"is_sugared_doc","","",0,null],[3,"Field","","A field of a struct or enum variant.",null,null],[12,"ident","","Name of the field, if any.",1,null],[12,"vis","","Visibility of the field.",1,null],[12,"attrs","","Attributes tagged on the field.",1,null],[12,"ty","","Type of the field.",1,null],[3,"Variant","","An enum variant.",null,null],[12,"ident","","Name of the variant.",2,null],[12,"attrs","","Attributes tagged on the variant.",2,null],[12,"data","","Type of variant.",2,null],[12,"discriminant","","Explicit discriminant, e.g. `Foo = 1`",2,null],[3,"Generics","","Represents lifetimes and type parameters attached to a declaration of a function, enum, trait, etc.",null,null],[12,"lifetimes","","",3,null],[12,"ty_params","","",3,null],[12,"where_clause","","",3,null],[3,"Lifetime","","",null,null],[12,"ident","","",4,null],[3,"LifetimeDef","","A lifetime definition, e.g. `'a: 'b+'c+'d`",null,null],[12,"attrs","","",5,null],[12,"lifetime","","",5,null],[12,"bounds","","",5,null],[3,"TyParam","","A generic type parameter, e.g. `T: Into<String>`.",null,null],[12,"attrs","","",6,null],[12,"ident","","",6,null],[12,"bounds","","",6,null],[12,"default","","",6,null],[3,"WhereBoundPredicate","","A type bound.",null,null],[12,"bound_lifetimes","","Any lifetimes from a `for` binding",7,null],[12,"bounded_ty","","The type being bounded",7,null],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+'static`)",7,null],[3,"WhereClause","","A `where` clause in a definition",null,null],[12,"predicates","","",8,null],[3,"WhereEqPredicate","","An equality predicate (unsupported).",null,null],[12,"lhs_ty","","",9,null],[12,"rhs_ty","","",9,null],[3,"WhereRegionPredicate","","A lifetime predicate.",null,null],[12,"lifetime","","",10,null],[12,"bounds","","",10,null],[3,"ImplGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"Turbofish","","Returned by `TyGenerics::as_turbofish`.",null,null],[3,"TyGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"Ident","","",null,null],[3,"ByteStrLit","","",null,null],[12,"value","","",11,null],[12,"style","","",11,null],[3,"FloatLit","","",null,null],[12,"value","","",12,null],[12,"suffix","","",12,null],[3,"IntLit","","",null,null],[12,"value","","",13,null],[12,"suffix","","",13,null],[3,"StrLit","","",null,null],[12,"value","","",14,null],[12,"style","","",14,null],[3,"Delimited","","",null,null],[12,"delim","","The type of delimiter",15,null],[12,"tts","","The delimited sequence of token trees",15,null],[3,"Mac","","Represents a macro invocation. The Path indicates which macro is being invoked, and the vector of token-trees contains the source of the macro invocation.",null,null],[12,"path","","",16,null],[12,"tts","","",16,null],[3,"DeriveInput","","Struct or enum sent to a `proc_macro_derive` macro.",null,null],[12,"ident","","Name of the struct or enum.",17,null],[12,"vis","","Visibility of the struct or enum.",17,null],[12,"attrs","","Attributes tagged on the whole struct or enum.",17,null],[12,"generics","","Generics required to complete the definition.",17,null],[12,"body","","Data within the struct or enum.",17,null],[3,"AngleBracketedParameterData","","A path like `Foo<'a, T>`",null,null],[12,"lifetimes","","The lifetime parameters for this path segment.",18,null],[12,"types","","The type parameters for this path segment, if present.",18,null],[12,"bindings","","Bindings (equality constraints) on associated types, if present.",18,null],[3,"BareFnArg","","An argument in a function type.",null,null],[12,"name","","",19,null],[12,"ty","","",19,null],[3,"BareFnTy","","",null,null],[12,"unsafety","","",20,null],[12,"abi","","",20,null],[12,"lifetimes","","",20,null],[12,"inputs","","",20,null],[12,"output","","",20,null],[12,"variadic","","",20,null],[3,"MutTy","","",null,null],[12,"ty","","",21,null],[12,"mutability","","",21,null],[3,"ParenthesizedParameterData","","A path like `Foo(A,B) -> C`",null,null],[12,"inputs","","`(A, B)`",22,null],[12,"output","","`C`",22,null],[3,"Path","","A \"Path\" is essentially Rust's notion of a name.",null,null],[12,"global","","A `::foo` path, is relative to the crate root rather than current module (like paths in an import).",23,null],[12,"segments","","The segments in the path: the things separated by `::`.",23,null],[3,"PathSegment","","A segment of a path: an identifier, an optional lifetime, and a set of types.",null,null],[12,"ident","","The identifier portion of this path segment.",24,null],[12,"parameters","","Type/lifetime parameters attached to this path. They come in two flavors: `Path<A,B,C>` and `Path(A,B) -> C`. Note that this is more than just simple syntactic sugar; the use of parens affects the region binding rules, so we preserve the distinction.",24,null],[3,"PolyTraitRef","","",null,null],[12,"bound_lifetimes","","The `'a` in `<'a> Foo<&'a T>`",25,null],[12,"trait_ref","","The `Foo<&'a T>` in `<'a> Foo<&'a T>`",25,null],[3,"QSelf","","The explicit Self type in a \"qualified path\". The actual path, including the trait and the associated item, is stored separately. `position` represents the index of the associated item qualified with this Self type.",null,null],[12,"ty","","",26,null],[12,"position","","",26,null],[3,"TypeBinding","","Bind a type to an associated type: `A=Foo`.",null,null],[12,"ident","","",27,null],[12,"ty","","",27,null],[4,"AttrStyle","","Distinguishes between Attributes that decorate items and Attributes that are contained as statements within items. These two cases need to be distinguished for pretty-printing.",null,null],[13,"Outer","","Attribute of the form `#![...]`.",28,null],[13,"Inner","","Attribute of the form `#[...]`.",28,null],[4,"MetaItem","","A compile-time attribute item.",null,null],[13,"Word","","Word meta item.",29,null],[13,"List","","List meta item.",29,null],[13,"NameValue","","Name-value meta item.",29,null],[4,"NestedMetaItem","","Possible values inside of compile-time attribute lists.",null,null],[13,"MetaItem","","A full `MetaItem`.",30,null],[13,"Literal","","A Rust literal.",30,null],[4,"ConstExpr","","",null,null],[13,"Call","","A function call",31,null],[13,"Binary","","A binary operation (For example: `a + b`, `a * b`)",31,null],[13,"Unary","","A unary operation (For example: `!x`, `*x`)",31,null],[13,"Lit","","A literal (For example: `1`, `\"foo\"`)",31,null],[13,"Cast","","A cast (`foo as f64`)",31,null],[13,"Path","","Variable reference, possibly containing `::` and/or type parameters, e.g. foo::bar::.",31,null],[13,"Index","","An indexing operation (`foo[2]`)",31,null],[13,"Paren","","No-op: used solely so we can pretty-print faithfully",31,null],[13,"Other","","If compiling with full support for expression syntax, any expression is allowed",31,null],[4,"VariantData","","Data stored within an enum variant or struct.",null,null],[13,"Struct","","Struct variant, e.g. `Point { x: f64, y: f64 }`.",32,null],[13,"Tuple","","Tuple variant, e.g. `Some(T)`.",32,null],[13,"Unit","","Unit variant, e.g. `None`.",32,null],[4,"Visibility","","Visibility level of an item.",null,null],[13,"Public","","Public, i.e. `pub`.",33,null],[13,"Crate","","Crate-visible, i.e. `pub(crate)`.",33,null],[13,"Restricted","","Restricted, e.g. `pub(some::module)`.",33,null],[13,"Inherited","","Inherited, i.e. private.",33,null],[4,"TraitBoundModifier","","A modifier on a bound, currently this is only used for `?Sized`, where the modifier is `Maybe`. Negative bounds should also be handled here.",null,null],[13,"None","","",34,null],[13,"Maybe","","",34,null],[4,"TyParamBound","","The AST represents all type param bounds as types. `typeck::collect::compute_bounds` matches these against the \"special\" built-in traits (see `middle::lang_items`) and detects Copy, Send and Sync.",null,null],[13,"Trait","","",35,null],[13,"Region","","",35,null],[4,"WherePredicate","","A single predicate in a `where` clause",null,null],[13,"BoundPredicate","","A type binding, e.g. `for<'c> Foo: Send+Clone+'c`",36,null],[13,"RegionPredicate","","A lifetime predicate, e.g. `'a: 'b+'c`",36,null],[13,"EqPredicate","","An equality predicate (unsupported)",36,null],[4,"FloatTy","","",null,null],[13,"F32","","",37,null],[13,"F64","","",37,null],[13,"Unsuffixed","","",37,null],[4,"IntTy","","",null,null],[13,"Isize","","",38,null],[13,"I8","","",38,null],[13,"I16","","",38,null],[13,"I32","","",38,null],[13,"I64","","",38,null],[13,"Usize","","",38,null],[13,"U8","","",38,null],[13,"U16","","",38,null],[13,"U32","","",38,null],[13,"U64","","",38,null],[13,"Unsuffixed","","",38,null],[4,"Lit","","Literal kind.",null,null],[13,"Str","","A string literal (`\"foo\"`)",39,null],[13,"ByteStr","","A byte string (`b\"foo\"`)",39,null],[13,"Byte","","A byte char (`b'f'`)",39,null],[13,"Char","","A character literal (`'a'`)",39,null],[13,"Int","","An integer literal (`1`)",39,null],[13,"Float","","A float literal (`1f64` or `1E10f64` or `1.0E10`)",39,null],[13,"Bool","","A boolean literal",39,null],[4,"StrStyle","","",null,null],[13,"Cooked","","A regular string, like `\"foo\"`",40,null],[13,"Raw","","A raw string, like `r##\"foo\"##`",40,null],[4,"BinOpToken","","",null,null],[13,"Plus","","",41,null],[13,"Minus","","",41,null],[13,"Star","","",41,null],[13,"Slash","","",41,null],[13,"Percent","","",41,null],[13,"Caret","","",41,null],[13,"And","","",41,null],[13,"Or","","",41,null],[13,"Shl","","",41,null],[13,"Shr","","",41,null],[4,"DelimToken","","A delimiter token",null,null],[13,"Paren","","A round parenthesis: `(` or `)`",42,null],[13,"Bracket","","A square bracket: `[` or `]`",42,null],[13,"Brace","","A curly brace: `{` or `}`",42,null],[4,"Token","","",null,null],[13,"Eq","","",43,null],[13,"Lt","","",43,null],[13,"Le","","",43,null],[13,"EqEq","","",43,null],[13,"Ne","","",43,null],[13,"Ge","","",43,null],[13,"Gt","","",43,null],[13,"AndAnd","","",43,null],[13,"OrOr","","",43,null],[13,"Not","","",43,null],[13,"Tilde","","",43,null],[13,"BinOp","","",43,null],[13,"BinOpEq","","",43,null],[13,"At","","",43,null],[13,"Dot","","",43,null],[13,"DotDot","","",43,null],[13,"DotDotDot","","",43,null],[13,"Comma","","",43,null],[13,"Semi","","",43,null],[13,"Colon","","",43,null],[13,"ModSep","","",43,null],[13,"RArrow","","",43,null],[13,"LArrow","","",43,null],[13,"FatArrow","","",43,null],[13,"Pound","","",43,null],[13,"Dollar","","",43,null],[13,"Question","","",43,null],[13,"Literal","","",43,null],[13,"Ident","","",43,null],[13,"Underscore","","",43,null],[13,"Lifetime","","",43,null],[13,"DocComment","","",43,null],[4,"TokenTree","","When the main rust parser encounters a syntax-extension invocation, it parses the arguments to the invocation as a token-tree. This is a very loose structure, such that all sorts of different AST-fragments can be passed to syntax extensions using a uniform type.",null,null],[13,"Token","","A single token",44,null],[13,"Delimited","","A delimited sequence of token trees",44,null],[4,"Body","","Body of a derived struct or enum.",null,null],[13,"Enum","","It's an enum.",45,null],[13,"Struct","","It's a struct.",45,null],[4,"BinOp","","",null,null],[13,"Add","","The `+` operator (addition)",46,null],[13,"Sub","","The `-` operator (subtraction)",46,null],[13,"Mul","","The `*` operator (multiplication)",46,null],[13,"Div","","The `/` operator (division)",46,null],[13,"Rem","","The `%` operator (modulus)",46,null],[13,"And","","The `&&` operator (logical and)",46,null],[13,"Or","","The `||` operator (logical or)",46,null],[13,"BitXor","","The `^` operator (bitwise xor)",46,null],[13,"BitAnd","","The `&` operator (bitwise and)",46,null],[13,"BitOr","","The `|` operator (bitwise or)",46,null],[13,"Shl","","The `<<` operator (shift left)",46,null],[13,"Shr","","The `>>` operator (shift right)",46,null],[13,"Eq","","The `==` operator (equality)",46,null],[13,"Lt","","The `<` operator (less than)",46,null],[13,"Le","","The `<=` operator (less than or equal to)",46,null],[13,"Ne","","The `!=` operator (not equal to)",46,null],[13,"Ge","","The `>=` operator (greater than or equal to)",46,null],[13,"Gt","","The `>` operator (greater than)",46,null],[4,"UnOp","","",null,null],[13,"Deref","","The `*` operator for dereferencing",47,null],[13,"Not","","The `!` operator for logical inversion",47,null],[13,"Neg","","The `-` operator for negation",47,null],[4,"Abi","","",null,null],[13,"Named","","",48,null],[13,"Rust","","",48,null],[4,"FunctionRetTy","","",null,null],[13,"Default","","Return type is not specified.",49,null],[13,"Ty","","Everything else",49,null],[4,"Mutability","","",null,null],[13,"Mutable","","",50,null],[13,"Immutable","","",50,null],[4,"PathParameters","","Parameters of a path segment.",null,null],[13,"AngleBracketed","","The `<'a, A, B, C>` in `foo::bar::baz::<'a, A, B, C>`",51,null],[13,"Parenthesized","","The `(A, B)` and `C` in `Foo(A, B) -> C`",51,null],[4,"Ty","","The different kinds of types recognized by the compiler",null,null],[13,"Slice","","A variable-length array (`[T]`)",52,null],[13,"Array","","A fixed length array (`[T; n]`)",52,null],[13,"Ptr","","A raw pointer (`*const T` or `*mut T`)",52,null],[13,"Rptr","","A reference (`&'a T` or `&'a mut T`)",52,null],[13,"BareFn","","A bare function (e.g. `fn(usize) -> bool`)",52,null],[13,"Never","","The never type (`!`)",52,null],[13,"Tup","","A tuple (`(A, B, C, D, ...)`)",52,null],[13,"Path","","A path (`module::module::...::Type`), optionally \"qualified\", e.g. `<Vec<T> as SomeTrait>::SomeType`.",52,null],[13,"TraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",52,null],[13,"ImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",52,null],[13,"Paren","","No-op; kept solely so that we can pretty-print faithfully",52,null],[13,"Infer","","TyKind::Infer means the type should be inferred instead of it having been specified. This can appear anywhere in a type.",52,null],[13,"Mac","","A macro in the type position.",52,null],[4,"Unsafety","","",null,null],[13,"Unsafe","","",53,null],[13,"Normal","","",53,null],[5,"parse_derive_input","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["deriveinput","string"],"name":"result"}}],[5,"parse_type","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["ty","string"],"name":"result"}}],[5,"parse_path","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["path","string"],"name":"result"}}],[5,"parse_where_clause","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["whereclause","string"],"name":"result"}}],[5,"parse_token_trees","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["vec","string"],"name":"result"}}],[5,"parse_ident","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["ident","string"],"name":"result"}}],[5,"parse_ty_param_bound","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["typarambound","string"],"name":"result"}}],[5,"parse_outer_attr","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["attribute","string"],"name":"result"}}],[11,"to_tokens","","",0,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",29,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",30,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"attribute"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"name","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"attrstyle"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"attrstyle"}],"output":{"name":"bool"}}],[11,"hash","","",28,null],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"metaitem"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"metaitem"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"metaitem"}],"output":{"name":"bool"}}],[11,"hash","","",29,null],[11,"name","","Name of the item.",29,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"nestedmetaitem"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"nestedmetaitem"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"nestedmetaitem"}],"output":{"name":"bool"}}],[11,"hash","","",30,null],[11,"to_tokens","","",31,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"constexpr"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"constexpr"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"constexpr"}],"output":{"name":"bool"}}],[11,"hash","","",31,null],[11,"to_tokens","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",32,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",33,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"variant"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"variantdata"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"hash","","",32,null],[11,"fields","","Slice containing the fields stored in the variant.",32,null],[11,"fields_mut","","Mutable slice containing the fields stored in the variant.",32,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"field"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"visibility"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"hash","","",33,null],[11,"to_tokens","","",3,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",54,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",55,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",56,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",4,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",5,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",6,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",35,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",8,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",36,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",7,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",10,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",9,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"generics"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"bool"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"generics"}}],[11,"hash","","",3,null],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"split_for_impl","","Split a type's generics into the pieces required for impl'ing a trait for that type.",3,null],[11,"as_turbofish","","Turn a type's generics like `<X, Y>` into a turbofish like `::<X, Y>`.",55,{"inputs":[{"name":"self"}],"output":{"name":"turbofish"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"lifetime"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"hash","","",4,null],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"new","","",4,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"lifetimedef"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"bool"}}],[11,"hash","","",5,null],[11,"new","","",5,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"typaram"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"bool"}}],[11,"hash","","",6,null],[11,"from","","",6,{"inputs":[{"name":"ident"}],"output":{"name":"self"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"typarambound"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"bool"}}],[11,"hash","","",35,null],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"traitboundmodifier"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"traitboundmodifier"}],"output":{"name":"bool"}}],[11,"hash","","",34,null],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"whereclause"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"bool"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"whereclause"}}],[11,"hash","","",8,null],[11,"none","","",8,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"wherepredicate"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"bool"}}],[11,"hash","","",36,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"whereboundpredicate"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"whereboundpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"whereboundpredicate"}],"output":{"name":"bool"}}],[11,"hash","","",7,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"whereregionpredicate"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"whereregionpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"whereregionpredicate"}],"output":{"name":"bool"}}],[11,"hash","","",10,null],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"whereeqpredicate"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"whereeqpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"whereeqpredicate"}],"output":{"name":"bool"}}],[11,"hash","","",9,null],[11,"to_tokens","","",57,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"hash","","",57,null],[11,"cmp","","",57,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",57,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",57,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"le","","",57,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"gt","","",57,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"ge","","",57,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"new","","",57,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",57,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",57,{"inputs":[{"generics":["str"],"name":"cow"}],"output":{"name":"self"}}],[11,"from","","",57,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",57,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"as_ref","","",57,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"to_tokens","","",39,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"lit"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"hash","","",39,null],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"strstyle"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"strstyle"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"strstyle"}],"output":{"name":"bool"}}],[11,"hash","","",40,null],[11,"from","","",39,{"inputs":[{"name":"string"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"str"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"lit"}}],[11,"from","","",39,null],[11,"from","","",39,{"inputs":[{"name":"char"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"bool"}],"output":{"name":"lit"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"intty"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"intty"}],"output":{"name":"bool"}}],[11,"hash","","",38,null],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"floatty"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"floatty"}],"output":{"name":"bool"}}],[11,"hash","","",37,null],[11,"from","","",39,{"inputs":[{"name":"isize"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"i8"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"i16"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"i32"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"i64"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"usize"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"u8"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"u16"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"u32"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"u64"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"f32"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"f64"}],"output":{"name":"lit"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"strlit"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bytestrlit"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"intlit"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"floatlit"}}],[11,"to_tokens","","",16,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",44,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",15,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",43,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",41,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"mac"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"mac"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"mac"}],"output":{"name":"bool"}}],[11,"hash","","",16,null],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"tokentree"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"tokentree"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"tokentree"}],"output":{"name":"bool"}}],[11,"hash","","",44,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"delimited"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"delimited"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"delimited"}],"output":{"name":"bool"}}],[11,"hash","","",15,null],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"hash","","",43,null],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"binoptoken"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"binoptoken"}],"output":{"name":"bool"}}],[11,"hash","","",41,null],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"delimtoken"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"delimtoken"}],"output":{"name":"bool"}}],[11,"hash","","",42,null],[11,"to_tokens","","",17,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"deriveinput"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"deriveinput"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"deriveinput"}],"output":{"name":"bool"}}],[11,"hash","","",17,null],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"body"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"body"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"body"}],"output":{"name":"bool"}}],[11,"hash","","",45,null],[11,"op","","",46,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"assign_op","","",46,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",46,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"op","","",47,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"to_tokens","","",47,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"binop"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"binop"}],"output":{"name":"bool"}}],[11,"hash","","",46,null],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"unop"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"unop"}],"output":{"name":"bool"}}],[11,"hash","","",47,null],[11,"to_tokens","","",52,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",50,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",23,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",24,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",51,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",18,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",27,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",22,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",25,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",20,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",19,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",53,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",48,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"ty"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"hash","","",52,null],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"mutty"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"mutty"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"mutty"}],"output":{"name":"bool"}}],[11,"hash","","",21,null],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"mutability"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"mutability"}],"output":{"name":"bool"}}],[11,"hash","","",50,null],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"hash","","",23,null],[11,"from","","",23,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"pathsegment"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"hash","","",24,null],[11,"from","","",24,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"pathparameters"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"hash","","",51,null],[11,"none","","",51,{"inputs":[],"output":{"name":"self"}}],[11,"is_empty","","",51,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"anglebracketedparameterdata"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"anglebracketedparameterdata"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"anglebracketedparameterdata"}],"output":{"name":"bool"}}],[11,"default","","",18,{"inputs":[],"output":{"name":"anglebracketedparameterdata"}}],[11,"hash","","",18,null],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"typebinding"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":{"name":"bool"}}],[11,"hash","","",27,null],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"parenthesizedparameterdata"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"parenthesizedparameterdata"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"parenthesizedparameterdata"}],"output":{"name":"bool"}}],[11,"hash","","",22,null],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"polytraitref"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"bool"}}],[11,"hash","","",25,null],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"qself"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"qself"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"qself"}],"output":{"name":"bool"}}],[11,"hash","","",26,null],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"barefnty"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"barefnty"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"barefnty"}],"output":{"name":"bool"}}],[11,"hash","","",20,null],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"unsafety"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"unsafety"}],"output":{"name":"bool"}}],[11,"hash","","",53,null],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"abi"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"abi"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"abi"}],"output":{"name":"bool"}}],[11,"hash","","",48,null],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"barefnarg"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"barefnarg"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"barefnarg"}],"output":{"name":"bool"}}],[11,"hash","","",19,null],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"functionretty"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":{"name":"bool"}}],[11,"hash","","",49,null],[0,"visit","","AST walker. Each overridden visit method has full control over what happens with its node, it can do its own traversal of the node's children, call `visit::walk_*` to apply the default traversal algorithm, or prevent deeper traversal by doing nothing.",null,null],[5,"walk_opt_ident","syn::visit","",null,{"inputs":[{"name":"v"},{"name":"option"}],"output":null}],[5,"walk_lifetime_def","","",null,{"inputs":[{"name":"v"},{"name":"lifetimedef"}],"output":null}],[5,"walk_poly_trait_ref","","",null,{"inputs":[{"name":"v"},{"name":"polytraitref"},{"name":"traitboundmodifier"}],"output":null}],[5,"walk_derive_input","","",null,{"inputs":[{"name":"v"},{"name":"deriveinput"}],"output":null}],[5,"walk_variant","","",null,{"inputs":[{"name":"v"},{"name":"variant"},{"name":"generics"}],"output":null}],[5,"walk_ty","","",null,{"inputs":[{"name":"v"},{"name":"ty"}],"output":null}],[5,"walk_path","","",null,{"inputs":[{"name":"v"},{"name":"path"}],"output":null}],[5,"walk_path_segment","","",null,{"inputs":[{"name":"v"},{"name":"pathsegment"}],"output":null}],[5,"walk_path_parameters","","",null,{"inputs":[{"name":"v"},{"name":"pathparameters"}],"output":null}],[5,"walk_assoc_type_binding","","",null,{"inputs":[{"name":"v"},{"name":"typebinding"}],"output":null}],[5,"walk_ty_param_bound","","",null,{"inputs":[{"name":"v"},{"name":"typarambound"}],"output":null}],[5,"walk_generics","","",null,{"inputs":[{"name":"v"},{"name":"generics"}],"output":null}],[5,"walk_fn_ret_ty","","",null,{"inputs":[{"name":"v"},{"name":"functionretty"}],"output":null}],[5,"walk_variant_data","","",null,{"inputs":[{"name":"v"},{"name":"variantdata"}],"output":null}],[5,"walk_field","","",null,{"inputs":[{"name":"v"},{"name":"field"}],"output":null}],[5,"walk_const_expr","","",null,{"inputs":[{"name":"v"},{"name":"constexpr"}],"output":null}],[5,"walk_mac","","",null,{"inputs":[{"name":"v"},{"name":"mac"}],"output":null}],[8,"Visitor","","Each method of the Visitor trait is a hook to be potentially overridden.  Each method's default implementation recursively visits the substructure of the input via the corresponding `walk` method; e.g. the `visit_mod` method by default calls `visit::walk_mod`.",null,null],[11,"visit_ident","","",58,{"inputs":[{"name":"self"},{"name":"ident"}],"output":null}],[11,"visit_derive_input","","",58,{"inputs":[{"name":"self"},{"name":"deriveinput"}],"output":null}],[11,"visit_ty","","",58,{"inputs":[{"name":"self"},{"name":"ty"}],"output":null}],[11,"visit_generics","","",58,{"inputs":[{"name":"self"},{"name":"generics"}],"output":null}],[11,"visit_ty_param_bound","","",58,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":null}],[11,"visit_poly_trait_ref","","",58,{"inputs":[{"name":"self"},{"name":"polytraitref"},{"name":"traitboundmodifier"}],"output":null}],[11,"visit_variant_data","","",58,{"inputs":[{"name":"self"},{"name":"variantdata"},{"name":"ident"},{"name":"generics"}],"output":null}],[11,"visit_field","","",58,{"inputs":[{"name":"self"},{"name":"field"}],"output":null}],[11,"visit_variant","","",58,{"inputs":[{"name":"self"},{"name":"variant"},{"name":"generics"}],"output":null}],[11,"visit_lifetime","","",58,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":null}],[11,"visit_lifetime_def","","",58,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":null}],[11,"visit_path","","",58,{"inputs":[{"name":"self"},{"name":"path"}],"output":null}],[11,"visit_path_segment","","",58,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":null}],[11,"visit_path_parameters","","",58,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":null}],[11,"visit_assoc_type_binding","","",58,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":null}],[11,"visit_attribute","","",58,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":null}],[11,"visit_fn_ret_ty","","",58,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":null}],[11,"visit_const_expr","","",58,{"inputs":[{"name":"self"},{"name":"constexpr"}],"output":null}],[11,"visit_lit","","",58,{"inputs":[{"name":"self"},{"name":"lit"}],"output":null}],[11,"visit_mac","","",58,{"inputs":[{"name":"self"},{"name":"mac"}],"output":null}],[0,"parse","syn","This module contains a set of exported nom parsers which can be used to parse custom grammars when used alongside the `synom` crate.",null,null],[4,"IResult","syn::parse","The result of a parser.",null,null],[13,"Done","","Parsing succeeded. The first field contains the rest of the unparsed data and the second field contains the parse result.",59,null],[13,"Error","","Parsing failed.",59,null],[5,"lit","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","lit"],"name":"iresult"}}],[5,"string","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","strlit"],"name":"iresult"}}],[5,"byte_string","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","bytestrlit"],"name":"iresult"}}],[5,"byte","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","u8"],"name":"iresult"}}],[5,"character","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","char"],"name":"iresult"}}],[5,"float","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","floatlit"],"name":"iresult"}}],[5,"int","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","intlit"],"name":"iresult"}}],[5,"boolean","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","bool"],"name":"iresult"}}],[5,"ty","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","ty"],"name":"iresult"}}],[5,"path","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","path"],"name":"iresult"}}],[5,"tt","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","tokentree"],"name":"iresult"}}],[5,"ident","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","ident"],"name":"iresult"}}],[5,"lifetime","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","lifetime"],"name":"iresult"}}],[11,"expect","","Unwraps the result, asserting the the parse is complete. Panics with a message based on the given string if the parse failed or is incomplete.",59,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"o"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",59,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"iresult"}}]],"paths":[[3,"Attribute"],[3,"Field"],[3,"Variant"],[3,"Generics"],[3,"Lifetime"],[3,"LifetimeDef"],[3,"TyParam"],[3,"WhereBoundPredicate"],[3,"WhereClause"],[3,"WhereEqPredicate"],[3,"WhereRegionPredicate"],[3,"ByteStrLit"],[3,"FloatLit"],[3,"IntLit"],[3,"StrLit"],[3,"Delimited"],[3,"Mac"],[3,"DeriveInput"],[3,"AngleBracketedParameterData"],[3,"BareFnArg"],[3,"BareFnTy"],[3,"MutTy"],[3,"ParenthesizedParameterData"],[3,"Path"],[3,"PathSegment"],[3,"PolyTraitRef"],[3,"QSelf"],[3,"TypeBinding"],[4,"AttrStyle"],[4,"MetaItem"],[4,"NestedMetaItem"],[4,"ConstExpr"],[4,"VariantData"],[4,"Visibility"],[4,"TraitBoundModifier"],[4,"TyParamBound"],[4,"WherePredicate"],[4,"FloatTy"],[4,"IntTy"],[4,"Lit"],[4,"StrStyle"],[4,"BinOpToken"],[4,"DelimToken"],[4,"Token"],[4,"TokenTree"],[4,"Body"],[4,"BinOp"],[4,"UnOp"],[4,"Abi"],[4,"FunctionRetTy"],[4,"Mutability"],[4,"PathParameters"],[4,"Ty"],[4,"Unsafety"],[3,"ImplGenerics"],[3,"TyGenerics"],[3,"Turbofish"],[3,"Ident"],[8,"Visitor"],[4,"IResult"]]};
searchIndex["synom"] = {"doc":"Adapted from `nom` by removing the `IResult::Incomplete` variant which:","items":[[4,"IResult","synom","The result of a parser.",null,null],[13,"Done","","Parsing succeeded. The first field contains the rest of the unparsed data and the second field contains the parse result.",0,null],[13,"Error","","Parsing failed.",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"iresult"}}],[11,"expect","","Unwraps the result, asserting the the parse is complete. Panics with a message based on the given string if the parse failed or is incomplete.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"o"}}],[14,"punct","","Parse a piece of punctuation like \"+\" or \"+=\".",null,null],[14,"keyword","","Parse a keyword like \"fn\" or \"struct\".",null,null],[14,"option","","Turn a failed parse into `None` and a successful parse into `Some`.",null,null],[14,"opt_vec","","Turn a failed parse into an empty vector. The argument parser must itself return a vector.",null,null],[14,"epsilon","","Parses nothing and always succeeds.",null,null],[14,"separated_list","","Zero or more values separated by some separator. Does not allow a trailing seperator.",null,null],[14,"terminated_list","","Zero or more values separated by some separator. A trailing separator is allowed.",null,null],[14,"named","","Define a function from a parser combination.",null,null],[14,"call","","Invoke the given parser function with the passed in arguments.",null,null],[14,"map","","Transform the result of a parser by applying a function or closure.",null,null],[14,"not","","Parses successfully if the given parser fails to parse. Does not consume any of the input.",null,null],[14,"cond","","Conditionally execute the given parser.",null,null],[14,"cond_reduce","","Fail to parse if condition is false, otherwise parse the given parser.",null,null],[14,"preceded","","Parse two things, returning the value of the second.",null,null],[14,"terminated","","Parse two things, returning the value of the first.",null,null],[14,"many0","","Parse zero or more values using the given parser.",null,null],[14,"peek","","Parse a value without consuming it from the input data.",null,null],[14,"take_until","","Parse the part of the input up to but not including the given string. Fail to parse if the given string is not present in the input.",null,null],[14,"tag","","Parse the given string from exactly the current position in the input. You almost always want `punct!` or `keyword!` instead of this.",null,null],[14,"switch","","Pattern-match the result of a parser to select which other parser to run.",null,null],[14,"value","","Produce the given value without parsing anything. Useful as an argument to `switch!`.",null,null],[14,"delimited","","Value surrounded by a pair of delimiters.",null,null],[14,"separated_nonempty_list","","One or more values separated by some separator. Does not allow a trailing separator.",null,null],[14,"tuple","","Run a series of parsers and produce all of the results in a tuple.",null,null],[14,"alt","","Run a series of parsers, returning the result of the first one which succeeds.",null,null],[14,"do_parse","","Run a series of parsers, one after another, optionally assigning the results a name. Fail if any of the parsers fails.",null,null]],"paths":[[4,"IResult"]]};
searchIndex["synstructure"] = {"doc":"This crate provides helper types for matching against enum variants, and extracting bindings to each of the fields in the deriving Struct or Enum in a generic way.","items":[[3,"BindingInfo","synstructure","Information about a specific binding. This contains both an `Ident` reference to the given field, and the syn `&'a Field` descriptor for that field.",null,null],[12,"binding","","The name which this BindingInfo will bind to.",0,null],[12,"style","","The type of binding which this BindingInfo will create.",0,null],[3,"VariantAst","","This type is similar to `syn`'s `Variant` type, however each of the fields are references rather than owned. When this is used as the AST for a real variant, this struct simply borrows the fields of the `syn` `Variant`, however this type may also be used as the sole variant for astruct.",null,null],[12,"ident","","",1,null],[12,"attrs","","",1,null],[12,"data","","",1,null],[12,"discriminant","","",1,null],[3,"VariantInfo","","A wrapper around a `syn` `DeriveInput`'s variant which provides utilities for destructuring `Variant`s with `match` expressions.",null,null],[12,"prefix","","",2,null],[3,"Structure","","A wrapper around a `syn` `DeriveInput` which provides utilities for creating custom derive trait implementations.",null,null],[4,"BindStyle","","The type of binding to use when generating a pattern.",null,null],[13,"Move","","`x`",3,null],[13,"MoveMut","","`mut x`",3,null],[13,"Ref","","`ref x`",3,null],[13,"RefMut","","`ref mut x`",3,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bindstyle"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"bindstyle"}],"output":{"name":"bool"}}],[11,"hash","","",3,null],[11,"to_tokens","","",3,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bindinginfo"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"bindinginfo"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"bindinginfo"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"to_tokens","","",0,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"ast","","Returns a reference to the underlying `syn` AST node which this `BindingInfo` references",0,{"inputs":[{"name":"self"}],"output":{"name":"field"}}],[11,"pat","","Generates the pattern fragment for this field binding.",0,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[11,"referenced_ty_params","","Returns a list of the type parameters which are referenced in this field's type.",0,{"inputs":[{"name":"self"}],"output":{"generics":["ident"],"name":"vec"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"variantast"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"variantast"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"variantast"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"variantinfo"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"variantinfo"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"variantinfo"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"bindings","","Returns a slice of the bindings in this Variant.",2,null],[11,"bindings_mut","","Returns a mut slice of the bindings in this Variant.",2,null],[11,"ast","","Returns a `VariantAst` object which contains references to the underlying `syn` AST node which this `Variant` was created from.",2,{"inputs":[{"name":"self"}],"output":{"name":"variantast"}}],[11,"omitted_bindings","","True if any bindings were omitted due to a `filter` call.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"pat","","Generates the match-arm pattern which could be used to match against this Variant.",2,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[11,"construct","","Generates the token stream required to construct the current variant.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"tokens"}}],[11,"each","","Runs the passed-in function once for each bound field, passing in a `BindingInfo`. and generating a `match` arm which evaluates the returned tokens.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"tokens"}}],[11,"fold","","Runs the passed-in function once for each bound field, passing in the result of the previous call, and a `BindingInfo`. generating a `match` arm which evaluates to the resulting tokens.",2,{"inputs":[{"name":"self"},{"name":"i"},{"name":"f"}],"output":{"name":"tokens"}}],[11,"filter","","Filter the bindings created by this `Variant` object. This has 2 effects:",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"remove_binding","","Remove the binding at the given index.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"bind_with","","Updates the `BindStyle` for each of the passed-in fields by calling the passed-in function for each `BindingInfo`.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"binding_name","","Updates the binding name for each fo the passed-in fields by calling the passed-in function for each `BindingInfo`.",2,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"referenced_ty_params","","Returns a list of the type parameters which are referenced in this field's type.",2,{"inputs":[{"name":"self"}],"output":{"generics":["ident"],"name":"vec"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"structure"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"structure"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"structure"}],"output":{"name":"bool"}}],[11,"hash","","",4,null],[11,"new","","Create a new `Structure` with the variants and fields from the passed-in `DeriveInput`.",4,{"inputs":[{"name":"deriveinput"}],"output":{"name":"self"}}],[11,"variants","","Returns a slice of the variants in this Structure.",4,null],[11,"variants_mut","","Returns a mut slice of the variants in this Structure.",4,null],[11,"ast","","Returns a reference to the underlying `syn` AST node which this `Structure` was created from.",4,{"inputs":[{"name":"self"}],"output":{"name":"deriveinput"}}],[11,"omitted_variants","","True if any variants were omitted due to a `filter_variants` call.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"each","","Runs the passed-in function once for each bound field, passing in a `BindingInfo`. and generating `match` arms which evaluate the returned tokens.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"tokens"}}],[11,"fold","","Runs the passed-in function once for each bound field, passing in the result of the previous call, and a `BindingInfo`. generating `match` arms which evaluate to the resulting tokens.",4,{"inputs":[{"name":"self"},{"name":"i"},{"name":"f"}],"output":{"name":"tokens"}}],[11,"each_variant","","Runs the passed-in function once for each variant, passing in a `VariantInfo`. and generating `match` arms which evaluate the returned tokens.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"tokens"}}],[11,"filter","","Filter the bindings created by this `Structure` object. This has 2 effects:",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"filter_variants","","Filter the variants matched by this `Structure` object. This has 2 effects:",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"remove_variant","","Remove the variant at the given index.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"bind_with","","Updates the `BindStyle` for each of the passed-in fields by calling the passed-in function for each `BindingInfo`.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"binding_name","","Updates the binding name for each fo the passed-in fields by calling the passed-in function for each `BindingInfo`.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"referenced_ty_params","","Returns a list of the type parameters which are refrenced in the types of non-filtered fields / variants.",4,{"inputs":[{"name":"self"}],"output":{"generics":["ident"],"name":"vec"}}],[11,"add_trait_bounds","","Add trait bounds for a trait with the given path for each type parmaeter referenced in the types of non-filtered fields.",4,{"inputs":[{"name":"self"},{"name":"typarambound"},{"name":"vec"}],"output":null}],[11,"bound_impl","","Creates an `impl` block with the required generic type fields filled in to implement the trait `path`.",4,{"inputs":[{"name":"self"},{"name":"p"},{"name":"b"}],"output":{"name":"tokens"}}],[11,"unsafe_bound_impl","","This method is the same as `bound_impl`, except also includes the `unsafe` keyword for implementing unsafe traits.",4,{"inputs":[{"name":"self"},{"name":"p"},{"name":"b"}],"output":{"name":"tokens"}}],[11,"unbound_impl","","This method is like `bound_impl` but doesn't add the additional bounds to the where clause.",4,{"inputs":[{"name":"self"},{"name":"p"},{"name":"b"}],"output":{"name":"tokens"}}],[11,"unsafe_unbound_impl","","This method is the same as `unbound_impl`, except also includes the `unsafe` keyword for implementing unsafe traits.",4,{"inputs":[{"name":"self"},{"name":"p"},{"name":"b"}],"output":{"name":"tokens"}}],[14,"decl_derive","","The `decl_derive!` macro declares a custom derive wrapper. It will parse the incoming TokenStream into a `synstructure::Structure` object, and pass it into the inner function.",null,null],[14,"test_derive","","Run a test on a custom derive. This macro expands both the original struct and the expansion to ensure that they compile correctly, and confirms that feeding the original struct into the named derive will produce the written output.",null,null]],"paths":[[3,"BindingInfo"],[3,"VariantAst"],[3,"VariantInfo"],[4,"BindStyle"],[3,"Structure"]]};
searchIndex["time"] = {"doc":"Simple time handling.","items":[[3,"Duration","time","ISO 8601 time duration with nanosecond precision. This also allows for the negative duration; see individual methods for details.",null,null],[3,"OutOfRangeError","","Represents error when converting `Duration` to/from a standard library implementation",null,null],[3,"Timespec","","A record specifying a time value in seconds and nanoseconds, where nanoseconds represent the offset from the given second.",null,null],[12,"sec","","",0,null],[12,"nsec","","",0,null],[3,"PreciseTime","","An opaque structure representing a moment in time.",null,null],[3,"SteadyTime","","A structure representing a moment in time.",null,null],[3,"Tm","","Holds a calendar date and time broken down into its components (year, month, day, and so on), also called a broken-down time value.",null,null],[12,"tm_sec","","Seconds after the minute - [0, 60]",1,null],[12,"tm_min","","Minutes after the hour - [0, 59]",1,null],[12,"tm_hour","","Hours after midnight - [0, 23]",1,null],[12,"tm_mday","","Day of the month - [1, 31]",1,null],[12,"tm_mon","","Months since January - [0, 11]",1,null],[12,"tm_year","","Years since 1900",1,null],[12,"tm_wday","","Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, ..., 6 = Saturday.",1,null],[12,"tm_yday","","Days since January 1 - [0, 365]",1,null],[12,"tm_isdst","","Daylight Saving Time flag.",1,null],[12,"tm_utcoff","","Identifies the time zone that was used to compute this broken-down time value, including any adjustment for Daylight Saving Time. This is the number of seconds east of UTC. For example, for U.S. Pacific Daylight Time, the value is `-7*60*60 = -25200`.",1,null],[12,"tm_nsec","","Nanoseconds after the second - [0, 109 - 1]",1,null],[3,"TmFmt","","A wrapper around a `Tm` and format string that implements Display.",null,null],[4,"ParseError","","",null,null],[13,"InvalidSecond","","",2,null],[13,"InvalidMinute","","",2,null],[13,"InvalidHour","","",2,null],[13,"InvalidDay","","",2,null],[13,"InvalidMonth","","",2,null],[13,"InvalidYear","","",2,null],[13,"InvalidDayOfWeek","","",2,null],[13,"InvalidDayOfMonth","","",2,null],[13,"InvalidDayOfYear","","",2,null],[13,"InvalidZoneOffset","","",2,null],[13,"InvalidTime","","",2,null],[13,"InvalidSecondsSinceEpoch","","",2,null],[13,"MissingFormatConverter","","",2,null],[13,"InvalidFormatSpecifier","","",2,null],[13,"UnexpectedCharacter","","",2,null],[5,"strptime","","Parses the time from the string according to the format string.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"generics":["tm","parseerror"],"name":"result"}}],[5,"get_time","","Returns the current time as a `timespec` containing the seconds and nanoseconds since 1970-01-01T00:00:00Z.",null,{"inputs":[],"output":{"name":"timespec"}}],[5,"precise_time_ns","","Returns the current value of a high-resolution performance counter in nanoseconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"precise_time_s","","Returns the current value of a high-resolution performance counter in seconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"f64"}}],[5,"tzset","","",null,{"inputs":[],"output":null}],[5,"empty_tm","","",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at_utc","","Returns the specified time in UTC",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now_utc","","Returns the current time in UTC",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at","","Returns the specified time in the local timezone",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now","","Returns the current time in the local timezone",null,{"inputs":[],"output":{"name":"tm"}}],[5,"strftime","","Formats the time according to the format string.",null,{"inputs":[{"name":"str"},{"name":"tm"}],"output":{"generics":["string","parseerror"],"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"weeks","","Makes a new `Duration` with given number of weeks. Equivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days. Equivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours. Equivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes. Equivalent to `Duration::seconds(minutes * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds. Panics when the duration is more than `i64::MAX` milliseconds or less than `i64::MIN` milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the closure.",4,{"inputs":[{"name":"f"}],"output":{"name":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_days","","Returns the total number of whole days in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_hours","","Returns the total number of whole hours in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration, or `None` on overflow (exceeding 263 microseconds in either direction).",4,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration, or `None` on overflow (exceeding 263 nanoseconds in either direction).",4,{"inputs":[{"name":"self"}],"output":{"generics":["i64"],"name":"option"}}],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["duration"],"name":"option"}}],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["duration"],"name":"option"}}],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",4,{"inputs":[{"name":"stdduration"}],"output":{"generics":["duration","outofrangeerror"],"name":"result"}}],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",4,{"inputs":[{"name":"self"}],"output":{"generics":["stdduration","outofrangeerror"],"name":"result"}}],[11,"neg","","",4,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"add","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"sub","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"mul","","",4,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"div","","",4,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"outofrangeerror"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"ordering"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"new","","",0,{"inputs":[{"name":"i64"},{"name":"i32"}],"output":{"name":"timespec"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"duration"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"precisetime"}}],[11,"now","","Returns a `PreciseTime` representing the current moment in time.",6,{"inputs":[],"output":{"name":"precisetime"}}],[11,"to","","Returns a `Duration` representing the span of time from the value of `self` to the value of `later`.",6,{"inputs":[{"name":"self"},{"name":"precisetime"}],"output":{"name":"duration"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"steadytime"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"cmp","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"ordering"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"now","","Returns a `SteadyTime` representing the current moment in time.",7,{"inputs":[],"output":{"name":"steadytime"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"duration"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"add","","",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"add","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"duration"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"ordering"}}],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",1,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"to_local","","Convert time to the local timezone",1,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"to_utc","","Convert time to the UTC",1,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO C, in the local timezone.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO C.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"strftime","","Formats the time according to the format string.",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["tmfmt","parseerror"],"name":"result"}}],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is compatible with ISO 8601.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Timespec"],[3,"Tm"],[4,"ParseError"],[3,"TmFmt"],[3,"Duration"],[3,"OutOfRangeError"],[3,"PreciseTime"],[3,"SteadyTime"]]};
searchIndex["timely"] = {"doc":"Timely dataflow is framework for managing and executing data-parallel dataflow computations.","items":[[8,"Push","timely","Pushing elements of type `T`.",null,null],[10,"push","","Pushes `element` and provides the opportunity to take ownership.",0,null],[11,"send","","Pushes `element` and drops any resulting resources.",0,null],[11,"done","","Pushes `None`, conventionally signalling a flush.",0,null],[8,"Pull","","Pulling elements of type `T`.",null,null],[10,"pull","","Pulls an element and provides the opportunity to take ownership.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"recv","","Takes an `Option<T>` and leaves `None` behind.",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[4,"Configuration","","Possible configurations for the communication infrastructure.",null,null],[13,"Thread","","Use one thread.",2,null],[13,"Process","","Use one process with an indicated number of threads.",2,null],[13,"Cluster","","Expect multiple processes indicated by `(threads, process, host_list, report)`.",2,null],[0,"progress","","Progress tracking mechanisms to support notification in timely dataflow",null,null],[0,"change_batch","timely::progress","A collection of updates of the form `(T, i64)`.",null,null],[3,"ChangeBatch","timely::progress::change_batch","A collection of updates of the form `(T, i64)`.",null,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"changebatch"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"changebatch"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"changebatch"}],"output":{"name":"bool"}}],[11,"new","","Allocates a new empty `ChangeBatch`.",3,{"inputs":[],"output":{"name":"changebatch"}}],[11,"new_from","","Allocates a new `ChangeBatch` with a single entry.",3,{"inputs":[{"name":"t"},{"name":"i64"}],"output":{"name":"changebatch"}}],[11,"update","","Adds a new update, for `item` with `value`.",3,{"inputs":[{"name":"self"},{"name":"t"},{"name":"i64"}],"output":null}],[11,"extend","","Performs a sequence of updates described by `iterator`.",3,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"into_inner","","Extracts the `Vec<(T, i64)>` from the map, consuming it.",3,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"iter","","Iterates over the contents of the map.",3,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"drain","","Drains the set of updates.",3,{"inputs":[{"name":"self"}],"output":{"name":"drain"}}],[11,"clear","","Clears the map.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"is_empty","","True iff all keys have value zero.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"canonicalize","","Compact and sort data, so that two instances can be compared without false negatives.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"drain_into","","Drains `self` into `other`.",3,{"inputs":[{"name":"self"},{"name":"changebatch"}],"output":null}],[0,"frontier","timely::progress","Tracks minimal sets of mutually incomparable elements of a partial order.",null,null],[3,"Antichain","timely::progress::frontier","A set of mutually incomparable elements.",null,null],[3,"MutableAntichain","","An antichain based on a multiset whose elements frequencies can be updated.",null,null],[11,"default","","",4,{"inputs":[],"output":{"name":"antichain"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"antichain"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"antichain"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"antichain"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"insert","","Updates the `Antichain` if the element is not greater than or equal to some present element.",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"new","","Creates a new empty `Antichain`.",4,{"inputs":[],"output":{"name":"antichain"}}],[11,"from_elem","","Creates a new singleton `Antichain`.",4,{"inputs":[{"name":"t"}],"output":{"name":"antichain"}}],[11,"clear","","Clears the contents of the antichain.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"sort","","Sorts the elements so that comparisons between antichains can be made.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"less_than","","Returns true if any item in the antichain is strictly less than the argument.",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"less_equal","","Returns true if any item in the antichain is less than or equal to the argument.",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"dominates","","Returns true if every element of `other` is greater or equal to some element of `self`.",4,{"inputs":[{"name":"self"},{"name":"antichain"}],"output":{"name":"bool"}}],[11,"elements","","Reveals the elements in the antichain.",4,null],[11,"default","","",5,{"inputs":[],"output":{"name":"mutableantichain"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"mutableantichain"}}],[11,"new","","Creates a new empty `MutableAntichain`.",5,{"inputs":[],"output":{"name":"mutableantichain"}}],[11,"clear","","Removes all elements.",5,{"inputs":[{"name":"self"}],"output":null}],[11,"frontier","","Reveals the minimal elements with positive count.",5,null],[11,"new_bottom","","Creates a new singleton `MutableAntichain`.",5,{"inputs":[{"name":"t"}],"output":{"name":"mutableantichain"}}],[11,"is_empty","","Returns true if there are no elements in the `MutableAntichain`.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"less_than","","Returns true if any item in the `MutableAntichain` is strictly less than the argument.",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"less_equal","","Returns true if any item in the `MutableAntichain` is less than or equal to the argument.",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"update_dirty","","Allows a single-element push, but dirties the antichain and prevents inspection until cleaned.",5,{"inputs":[{"name":"self"},{"name":"t"},{"name":"i64"}],"output":null}],[11,"update_iter","","Applies updates to the antichain and applies `action` to each frontier change.",5,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"update_iter_and","","Applies updates to the antichain and applies `action` to each frontier change.",5,{"inputs":[{"name":"self"},{"name":"i"},{"name":"a"}],"output":null}],[0,"nested","timely::progress","Coordination of progress information between a scope-as-operator and its children operators.",null,null],[0,"pointstamp_counter","timely::progress::nested","Manages pointstamp counts (timestamp, location) within a sub operator.",null,null],[3,"PointstampCounter","timely::progress::nested::pointstamp_counter","Represents changes to pointstamps before and after transmission along a scope's topology.",null,null],[12,"source","","timestamp updates indexed by (scope, output)",6,null],[12,"target","","timestamp updates indexed by (scope, input)",6,null],[12,"pushed","","pushed updates indexed by (scope, input)",6,null],[11,"default","","",6,{"inputs":[],"output":{"name":"pointstampcounter"}}],[11,"update_target","","Updates the count for a time at a target.",6,{"inputs":[{"name":"self"},{"name":"target"},{"name":"t"},{"name":"i64"}],"output":null}],[11,"update_source","","Updates the count for a time at a source.",6,{"inputs":[{"name":"self"},{"name":"source"},{"name":"t"},{"name":"i64"}],"output":null}],[11,"clear","","Clears the pointstamp counter.",6,{"inputs":[{"name":"self"}],"output":null}],[11,"allocate_for_operator","","Allocates internal state given an operator's inputs and outputs.",6,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":null}],[0,"summary","timely::progress::nested","Path summaries that are either child local, or leave the scope and re-enter from the parent.",null,null],[4,"Summary","timely::progress::nested::summary","Summarizes a path within a scope.",null,null],[13,"Local","","Reachable within the scope, and a summary adjusting only the inner coordinate.",7,null],[13,"Outer","","Reachable outside the scope, with adjustments to both coordinates.",7,null],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"summary"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"summary"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"summary"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"summary"}}],[11,"less_equal","","",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"results_in","","",7,{"inputs":[{"name":"self"},{"name":"product"}],"output":{"generics":["product"],"name":"option"}}],[11,"followed_by","","",7,{"inputs":[{"name":"self"},{"name":"summary"}],"output":{"generics":["summary"],"name":"option"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[0,"product","timely::progress::nested","A pair timestamp suitable for use with the product partial order.",null,null],[3,"Product","timely::progress::nested::product","A nested pair of timestamps, one outer and one inner.",null,null],[12,"outer","","Outer timestamp.",8,null],[12,"inner","","Inner timestamp.",8,null],[8,"Empty","","A type that does not affect total orderedness.",null,null],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"product"}}],[11,"hash","","",8,null],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"product"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"product"}],"output":{"name":"bool"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"product"}}],[11,"cmp","","",8,{"inputs":[{"name":"self"},{"name":"product"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"self"},{"name":"product"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",8,{"inputs":[{"name":"self"},{"name":"product"}],"output":{"name":"bool"}}],[11,"le","","",8,{"inputs":[{"name":"self"},{"name":"product"}],"output":{"name":"bool"}}],[11,"gt","","",8,{"inputs":[{"name":"self"},{"name":"product"}],"output":{"name":"bool"}}],[11,"ge","","",8,{"inputs":[{"name":"self"},{"name":"product"}],"output":{"name":"bool"}}],[11,"new","","Creates a new product from outer and inner coordinates.",8,{"inputs":[{"name":"touter"},{"name":"tinner"}],"output":{"name":"product"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"less_equal","","",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"entomb","","",8,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"exhume","","",8,null],[0,"subgraph","timely::progress::nested","Implements `Operate` for a scoped collection of child operators.",null,null],[3,"Source","timely::progress::nested::subgraph","Names a source of a data stream.",null,null],[12,"index","","Index of the source operator.",9,null],[12,"port","","Number of the output port from the operator.",9,null],[3,"Target","","Names a target of a data stream.",null,null],[12,"index","","Index of the target operator.",10,null],[12,"port","","Nmuber of the input port to the operator.",10,null],[3,"SubgraphBuilder","","A builder structure for initializing `Subgraph`s.",null,null],[12,"name","","The name of this subgraph.",11,null],[12,"path","","A sequence of integers uniquely identifying the subgraph.",11,null],[3,"Subgraph","","A dataflow subgraph.",null,null],[12,"path","","Path of identifiers from the root.",12,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"source"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"source"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"source"}],"output":{"name":"bool"}}],[11,"cmp","","",9,{"inputs":[{"name":"self"},{"name":"source"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"source"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"self"},{"name":"source"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"self"},{"name":"source"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"self"},{"name":"source"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"self"},{"name":"source"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"target"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"target"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"target"}],"output":{"name":"bool"}}],[11,"cmp","","",10,{"inputs":[{"name":"self"},{"name":"target"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"self"},{"name":"target"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",10,{"inputs":[{"name":"self"},{"name":"target"}],"output":{"name":"bool"}}],[11,"le","","",10,{"inputs":[{"name":"self"},{"name":"target"}],"output":{"name":"bool"}}],[11,"gt","","",10,{"inputs":[{"name":"self"},{"name":"target"}],"output":{"name":"bool"}}],[11,"ge","","",10,{"inputs":[{"name":"self"},{"name":"target"}],"output":{"name":"bool"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_input","","Allocates a new input to the subgraph and returns the target to that input in the outer graph.",11,{"inputs":[{"name":"self"},{"generics":["refcell"],"name":"rc"}],"output":{"name":"target"}}],[11,"new_output","","Allocates a new output from the subgraph and returns the source of that output in the outer graph.",11,{"inputs":[{"name":"self"}],"output":{"name":"source"}}],[11,"connect","","Introduces a dependence from the source to the target.",11,{"inputs":[{"name":"self"},{"name":"source"},{"name":"target"}],"output":null}],[11,"new_from","","Creates a new Subgraph from a channel allocator and \"descriptive\" indices.",11,{"inputs":[{"name":"usize"},{"generics":["usize"],"name":"vec"},{"name":"logger"}],"output":{"name":"subgraphbuilder"}}],[11,"allocate_child_id","","Allocates a new child identifier, for later use.",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"add_child","","Adds a new child to the subgraph.",11,{"inputs":[{"name":"self"},{"generics":["operate"],"name":"box"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"build","","Now that initialization is complete, actually build a subgraph.",11,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"subgraph"}}],[11,"name","","",12,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"local","","",12,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"inputs","","",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"outputs","","",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_internal_summary","","",12,null],[11,"set_external_summary","","",12,null],[11,"push_external_progress","","",12,null],[11,"pull_internal_progress","","Report changes in messages and capabilities for the subgraph and its peers.",12,null],[0,"reachability","timely::progress::nested","Manages pointstamp reachability within a graph.",null,null],[3,"Builder","timely::progress::nested::reachability","A topology builder, which can summarize reachability along paths.",null,null],[3,"Summary","","A summary of minimal path summaries in a timely dataflow graph.",null,null],[12,"source_target","","Compiled source-to-target reachability.",13,null],[12,"target_target","","Compiled target-to-target reachability.",13,null],[3,"Tracker","","An interactive tracker of propagated reachability information.",null,null],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"builder"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new empty topology builder.",14,{"inputs":[],"output":{"name":"self"}}],[11,"add_node","","Add links internal to operators.",14,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"},{"name":"usize"},{"generics":["vec"],"name":"vec"}],"output":null}],[11,"add_edge","","Add links between operators.",14,{"inputs":[{"name":"self"},{"name":"source"},{"name":"target"}],"output":null}],[11,"summarize","","Compiles the current nodes and edges into immutable path summaries.",14,{"inputs":[{"name":"self"}],"output":{"name":"summary"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"summary"}}],[11,"default","","",15,{"inputs":[],"output":{"name":"tracker"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"update_target","","Updates the count for a time at a target.",15,{"inputs":[{"name":"self"},{"name":"target"},{"name":"t"},{"name":"i64"}],"output":null}],[11,"update_source","","Updates the count for a time at a source.",15,{"inputs":[{"name":"self"},{"name":"source"},{"name":"t"},{"name":"i64"}],"output":null}],[11,"clear","","Clears the pointstamp counter.",15,{"inputs":[{"name":"self"}],"output":null}],[11,"is_empty","","",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"allocate_from","","Allocate a new `Tracker` using the shape from `summaries`.",15,{"inputs":[{"name":"summary"}],"output":{"name":"self"}}],[11,"propagate_node","","Propagates updates from an indicated node.",15,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"propagate_all","","Propagates all updates made to sources and targets.",15,{"inputs":[{"name":"self"}],"output":null}],[11,"pushed_mut","","Provides access to pushed changes for a node.",15,null],[0,"timestamp","timely::progress","A partially ordered measure of progress at each timely dataflow location.",null,null],[3,"RootTimestamp","timely::progress::timestamp","An empty timestamp used by the root scope.",null,null],[3,"RootSummary","","An empty path summary for root timestamps.",null,null],[8,"Timestamp","","A composite trait for types that serve as timestamps in timely dataflow.",null,null],[16,"Summary","","A type summarizing action on a timestamp along a dataflow path.",16,null],[8,"PathSummary","","A summary of how a timestamp advances along a timely dataflow path.",null,null],[10,"results_in","","Advances a timestamp according to the timestamp actions on the path.",17,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"option"}}],[10,"followed_by","","Composes this path summary with another path summary.",17,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"roottimestamp"}}],[11,"hash","","",18,null],[11,"cmp","","",18,{"inputs":[{"name":"self"},{"name":"roottimestamp"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",18,{"inputs":[{"name":"self"},{"name":"roottimestamp"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"roottimestamp"}],"output":{"name":"bool"}}],[11,"default","","",18,{"inputs":[],"output":{"name":"roottimestamp"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"less_equal","","",18,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Constructs a new `Product<RootTimestamp,T>`.",18,{"inputs":[{"name":"t"}],"output":{"generics":["roottimestamp"],"name":"product"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"rootsummary"}}],[11,"cmp","","",19,{"inputs":[{"name":"self"},{"name":"rootsummary"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",19,{"inputs":[{"name":"self"},{"name":"rootsummary"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"rootsummary"}],"output":{"name":"bool"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",19,{"inputs":[],"output":{"name":"rootsummary"}}],[11,"results_in","","",19,{"inputs":[{"name":"self"},{"name":"roottimestamp"}],"output":{"generics":["roottimestamp"],"name":"option"}}],[11,"followed_by","","",19,{"inputs":[{"name":"self"},{"name":"rootsummary"}],"output":{"generics":["rootsummary"],"name":"option"}}],[11,"less_equal","","",19,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[0,"operate","timely::progress","Methods which describe an operators topology, and the progress it makes.",null,null],[8,"Operate","timely::progress::operate","Methods for describing an operators topology, and the progress it makes.",null,null],[11,"local","","Indicates if the operator is strictly local to this worker.",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"inputs","","The number of inputs.",20,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"outputs","","The number of outputs.",20,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_internal_summary","","Fetches summary information about internal structure of the operator.",20,null],[11,"set_external_summary","","Presents summary information about the external structure around the operator.",20,null],[11,"push_external_progress","","Reports a summary of progress statements external to the operator and its peer group.",20,null],[10,"pull_internal_progress","","Retrieves a summary of progress statements internal to the operator.",20,null],[10,"name","","A descripitive name for the operator",20,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"notify_me","","Indicates of whether the operator requires `push_external_progress` information or not.",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"broadcast","timely::progress","Broadcasts progress information among workers.",null,null],[3,"Progcaster","timely::progress::broadcast","Manages broadcasting of progress updates to and receiving updates from workers.",null,null],[6,"ProgressVec","","A list of progress updates corresponding to `((child_scope, [in/out]_port, timestamp), delta)`",null,null],[6,"ProgressMsg","","A progress update message consisting of source worker id, sequence number and lists of message and internal updates",null,null],[11,"new","","Creates a new `Progcaster` using a channel from the supplied allocator.",21,{"inputs":[{"name":"a"},{"name":"vec"},{"name":"logger"}],"output":{"name":"progcaster"}}],[11,"send_and_recv","","Sends and receives progress updates, broadcasting the contents of `messages` and `internal`, and updating each with updates from other workers.",21,{"inputs":[{"name":"self"},{"name":"changebatch"},{"name":"changebatch"}],"output":null}],[0,"dataflow","timely","Abstractions for timely dataflow programming.",null,null],[0,"operators","timely::dataflow","Extension traits for `Stream` implementing various operators.",null,null],[3,"Notificator","timely::dataflow::operators","Tracks requests for notification and delivers available notifications.",null,null],[3,"FrontierNotificator","","Tracks requests for notification and delivers available notifications.",null,null],[3,"Capability","","The capability to send data with a certain timestamp on a dataflow edge.",null,null],[3,"CapabilitySet","","A set of capabilities, for possibly incomparable times.",null,null],[0,"enterleave","","Extension traits to move a `Stream` between an outer `Scope` and inner `Scope`.",null,null],[8,"Enter","timely::dataflow::operators::enterleave","Extension trait to move a `Stream` into a child of its current `Scope`.",null,null],[10,"enter","","Moves the `Stream` argument into a child of its current `Scope`.",22,{"inputs":[{"name":"self"},{"name":"child"}],"output":{"generics":["child"],"name":"stream"}}],[8,"EnterAt","","Extension trait to move a `Stream` into a child of its current `Scope` setting the timestamp for each element.",null,null],[10,"enter_at","","Moves the `Stream` argument into a child of its current `Scope` setting the timestamp for each element by `initial`.",23,{"inputs":[{"name":"self"},{"name":"child"},{"name":"f"}],"output":{"generics":["child"],"name":"stream"}}],[8,"Leave","","Extension trait to move a `Stream` to the parent of its current `Scope`.",null,null],[10,"leave","","Moves a `Stream` to the parent of its current `Scope`.",24,{"inputs":[{"name":"self"}],"output":{"name":"stream"}}],[0,"input","timely::dataflow::operators","Create new `Streams` connected to external inputs.",null,null],[3,"Handle","timely::dataflow::operators::input","A handle to an input `Stream`, used to introduce data to a timely dataflow computation.",null,null],[8,"Input","","Create a new `Stream` and `Handle` through which to supply input.",null,null],[10,"new_input","","Create a new `Stream` and `Handle` through which to supply input.",25,null],[10,"input_from","","Create a new stream from a supplied interactive handle.",25,{"inputs":[{"name":"self"},{"name":"handle"}],"output":{"generics":["child"],"name":"stream"}}],[11,"new","","Allocates a new input handle, from which one can create timely streams.",26,{"inputs":[],"output":{"name":"self"}}],[11,"to_stream","","Creates an input stream from the handle in the supplied scope.",26,{"inputs":[{"name":"self"},{"name":"child"}],"output":{"generics":["child"],"name":"stream"}}],[11,"send","","Sends one record into the corresponding timely dataflow `Stream`, at the current epoch.",26,{"inputs":[{"name":"self"},{"name":"d"}],"output":null}],[11,"send_batch","","Sends a batch of records into the corresponding timely dataflow `Stream`, at the current epoch.",26,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"advance_to","","Advances the current epoch to `next`.",26,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"close","","Closes the input.",26,{"inputs":[{"name":"self"}],"output":null}],[11,"epoch","","Reports the current epoch.",26,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"time","","Reports the current timestamp.",26,{"inputs":[{"name":"self"}],"output":{"name":"product"}}],[11,"drop","","",26,{"inputs":[{"name":"self"}],"output":null}],[0,"unordered_input","timely::dataflow::operators","Create new `Streams` connected to external inputs.",null,null],[3,"UnorderedHandle","timely::dataflow::operators::unordered_input","A handle to an input `Stream`, used to introduce data to a timely dataflow computation.",null,null],[8,"UnorderedInput","","Create a new `Stream` and `Handle` through which to supply input.",null,null],[10,"new_unordered_input","","Create a new capability-based `Stream` and `Handle` through which to supply input. This input supports multiple open epochs (timestamps) at the same time.",27,null],[11,"session","","Allocates a new automatically flushing session based on the supplied capability.",28,{"inputs":[{"name":"self"},{"name":"capability"}],"output":{"generics":["pushcounter"],"name":"autoflushsession"}}],[11,"drop","","",28,{"inputs":[{"name":"self"}],"output":null}],[0,"feedback","timely::dataflow::operators","Create cycles in a timely dataflow graph.",null,null],[3,"Handle","timely::dataflow::operators::feedback","A handle used to bind the source of a loop variable.",null,null],[8,"LoopVariable","","Creates a `Stream` and a `Handle` to later bind the source of that `Stream`.",null,null],[10,"loop_variable","","Creates a `Stream` and a `Handle` to later bind the source of that `Stream`.",29,null],[8,"ConnectLoop","","Connect a `Stream` to the input of a loop variable.",null,null],[10,"connect_loop","","Connect a `Stream` to be the input of a loop variable.",30,{"inputs":[{"name":"self"},{"name":"handle"}],"output":null}],[0,"concat","timely::dataflow::operators","Merges the contents of multiple streams.",null,null],[8,"Concat","timely::dataflow::operators::concat","Merge the contents of two streams.",null,null],[10,"concat","","Merge the contents of two streams.",31,{"inputs":[{"name":"self"},{"name":"stream"}],"output":{"name":"stream"}}],[8,"Concatenate","","Merge the contents of multiple streams.",null,null],[10,"concatenate","","Merge the contents of multiple streams.",32,{"inputs":[{"name":"self"},{"generics":["stream"],"name":"vec"}],"output":{"name":"stream"}}],[0,"partition","timely::dataflow::operators","Partition a stream of records into multiple streams.",null,null],[8,"Partition","timely::dataflow::operators::partition","Partition a stream of records into multiple streams.",null,null],[10,"partition","","Produces `parts` output streams, containing records produced and assigned by `route`.",33,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"f"}],"output":{"generics":["stream"],"name":"vec"}}],[0,"map","timely::dataflow::operators","Extension methods for `Stream` based on record-by-record transformation.",null,null],[8,"Map","timely::dataflow::operators::map","Extension trait for `Stream`.",null,null],[10,"map","","Consumes each element of the stream and yields a new element.",34,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"stream"}}],[10,"map_in_place","","Updates each element of the stream and yields the element, re-using memory where possible.",34,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"stream"}}],[10,"flat_map","","Consumes each element of the stream and yields some number of new elements.",34,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"stream"}}],[0,"inspect","timely::dataflow::operators","Extension trait and implementation for observing and action on streamed data.",null,null],[8,"Inspect","timely::dataflow::operators::inspect","Methods to inspect records and batches of records on a stream.",null,null],[10,"inspect","","Runs a supplied closure on each observed data element.",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[10,"inspect_batch","","Runs a supplied closure on each observed data batch (time and data slice).",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[0,"filter","timely::dataflow::operators","Filters a stream by a predicate.",null,null],[8,"Filter","timely::dataflow::operators::filter","Extension trait for filtering.",null,null],[10,"filter","","Returns a new instance of `self` containing only records satisfying `predicate`.",36,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"self"}}],[0,"delay","timely::dataflow::operators","Operators acting on timestamps to logically delay records",null,null],[8,"Delay","timely::dataflow::operators::delay","Methods to advance the timestamps of records or batches of records.",null,null],[10,"delay","","Advances the timestamp of records using a supplied function.",37,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[10,"delay_batch","","Advances the timestamp of batches of records using a supplied function.",37,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[0,"exchange","timely::dataflow::operators","Exchange records between workers.",null,null],[8,"Exchange","timely::dataflow::operators::exchange","Exchange records between workers.",null,null],[10,"exchange","","Exchange records so that all records with the same `route` are at the same worker.",38,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[10,"exchange_ts","","Exchange records by time so that all records whose time and data evaluate to the same `route` are at the same worker.",38,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[0,"broadcast","timely::dataflow::operators","Broadcast records to all workers.",null,null],[8,"Broadcast","timely::dataflow::operators::broadcast","Broadcast records to all workers.",null,null],[10,"broadcast","","Broadcast records to all workers.",39,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[0,"probe","timely::dataflow::operators","Monitor progress at a `Stream`.",null,null],[3,"Handle","timely::dataflow::operators::probe","Reports information about progress at the probe.",null,null],[8,"Probe","","Monitors progress at a `Stream`.",null,null],[10,"probe","","Constructs a progress probe which indicates which timestamps have elapsed at the operator.",40,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[10,"probe_with","","Inserts a progress probe in a stream.",40,{"inputs":[{"name":"self"},{"name":"handle"}],"output":{"name":"stream"}}],[11,"less_than","","returns true iff the frontier is strictly less than `time`.",41,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"less_equal","","returns true iff the frontier is less than or equal to `time`.",41,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"done","","returns true iff the frontier is empty.",41,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Allocates a new handle.",41,{"inputs":[],"output":{"name":"self"}}],[11,"with_frontier","","Invokes a method on the frontier, returning its result.",41,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[0,"to_stream","timely::dataflow::operators","Conversion to the `Stream` type from iterators.",null,null],[8,"ToStream","timely::dataflow::operators::to_stream","Converts to a timely `Stream`.",null,null],[10,"to_stream","","Converts to a timely `Stream`.",42,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"stream"}}],[0,"capture","timely::dataflow::operators","Operators to capture and replay timely dataflow streams.",null,null],[0,"capture","timely::dataflow::operators::capture","Traits and types for capturing timely dataflow streams.",null,null],[8,"Capture","timely::dataflow::operators::capture::capture","Capture a stream of timestamped data for later replay.",null,null],[10,"capture_into","","Captures a stream of timestamped data for later replay.",43,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[11,"capture","","Captures a stream using Rust's MPSC channels.",43,{"inputs":[{"name":"self"}],"output":{"generics":["event"],"name":"receiver"}}],[0,"replay","timely::dataflow::operators::capture","Traits and types for replaying captured timely dataflow streams.",null,null],[8,"Replay","timely::dataflow::operators::capture::replay","Replay a capture stream into a scope with the same timestamp.",null,null],[10,"replay_into","","Replays `self` into the provided scope, as a `Stream<S, D>`.",44,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"stream"}}],[0,"extract","timely::dataflow::operators::capture","Traits and types for extracting captured timely dataflow streams.",null,null],[8,"Extract","timely::dataflow::operators::capture::extract","Supports extracting a sequence of timestamp and data.",null,null],[10,"extract","","Converts `self` into a sequence of timestamped data.",45,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[0,"event","timely::dataflow::operators::capture","Traits and types describing timely dataflow events.",null,null],[4,"Event","timely::dataflow::operators::capture::event","Data and progress events of the captured stream.",null,null],[13,"Progress","","Progress received via `push_external_progress`.",46,null],[13,"Messages","","Messages received via the data stream.",46,null],[0,"link","","A linked-list event pusher and iterator.",null,null],[3,"EventLink","timely::dataflow::operators::capture::event::link","A linked list of Event<T, D>.",null,null],[12,"event","","An event, if one exists.",47,null],[12,"next","","The next event, if it exists.",47,null],[11,"new","","Allocates a new `EventLink`.",47,{"inputs":[],"output":{"name":"eventlink"}}],[0,"binary","timely::dataflow::operators::capture::event","A binary event pusher and iterator.",null,null],[3,"EventWriter","timely::dataflow::operators::capture::event::binary","A wrapper for `W: Write` implementing `EventPusher<T, D>`.",null,null],[3,"EventReader","","A Wrapper for `R: Read` implementing `EventIterator<T, D>`.",null,null],[11,"new","","Allocates a new `EventWriter` wrapping a supplied writer.",48,{"inputs":[{"name":"w"}],"output":{"name":"eventwriter"}}],[11,"push","","",48,{"inputs":[{"name":"self"},{"name":"event"}],"output":null}],[11,"new","","Allocates a new `EventReader` wrapping a supplied reader.",49,{"inputs":[{"name":"r"}],"output":{"name":"eventreader"}}],[11,"next","","",49,{"inputs":[{"name":"self"}],"output":{"generics":["event"],"name":"option"}}],[8,"EventIterator","timely::dataflow::operators::capture::event","Iterates over contained `Event<T, D>`.",null,null],[10,"next","","Iterates over references to `Event<T, D>` elements.",50,{"inputs":[{"name":"self"}],"output":{"generics":["event"],"name":"option"}}],[8,"EventPusher","","Receives `Event<T, D>` events.",null,null],[10,"push","","Provides a new `Event<T, D>` to the pusher.",51,{"inputs":[{"name":"self"},{"name":"event"}],"output":null}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"event"}}],[11,"entomb","","",46,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"exhume","","",46,null],[0,"aggregation","timely::dataflow::operators","Aggregation operators of various flavors",null,null],[0,"state_machine","timely::dataflow::operators::aggregation","General purpose state transition operator. ",null,null],[8,"StateMachine","timely::dataflow::operators::aggregation::state_machine","Generic state-transition machinery: each key has a state, and receives a sequence of events.  Events are applied in time-order, but no other promises are made. Each state transition can produce output, which is sent. ",null,null],[10,"state_machine","","Tracks a state for each presented key, using user-supplied state transition logic.",52,{"inputs":[{"name":"self"},{"name":"f"},{"name":"h"}],"output":{"name":"stream"}}],[0,"aggregate","timely::dataflow::operators::aggregation","General purpose intra-timestamp aggregation",null,null],[8,"Aggregate","timely::dataflow::operators::aggregation::aggregate","Generic intra-timestamp aggregation",null,null],[10,"aggregate","","Aggregates data of the form `(key, val)`, using user-supplied logic.",53,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"},{"name":"h"}],"output":{"name":"stream"}}],[0,"generic","timely::dataflow::operators","Generic operators defined by user-provided closures.",null,null],[3,"InputHandle","timely::dataflow::operators::generic","Handle to an operator's input stream.",null,null],[3,"FrontieredInputHandle","","Handle to an operator's input stream and frontier.",null,null],[12,"handle","","The underlying input handle.",54,null],[12,"frontier","","The frontier as reported by timely progress tracking.",54,null],[3,"OutputHandle","","Handle to an operator's output stream.",null,null],[3,"Notificator","","Tracks requests for notification and delivers available notifications.",null,null],[3,"FrontierNotificator","","Tracks requests for notification and delivers available notifications.",null,null],[0,"unary","","Methods to construct generic streaming and blocking unary operators.",null,null],[8,"Unary","timely::dataflow::operators::generic::unary","Methods to construct generic streaming and blocking unary operators.",null,null],[10,"unary_stream","","Creates a new dataflow operator that partitions its input stream by a parallelization strategy `pact`, and repeatedly invokes `logic` which can read from the input stream and write to the output stream.",55,{"inputs":[{"name":"self"},{"name":"p"},{"name":"str"},{"name":"l"}],"output":{"name":"stream"}}],[10,"unary_notify","","Creates a new dataflow operator that partitions its input stream by a parallelization strategy `pact`, and repeatedly invokes `logic` which can read from the input stream, write to the output stream, and request and receive notifications. The method also requires a vector of the initial notifications the operator requires (commonly none).",55,{"inputs":[{"name":"self"},{"name":"p"},{"name":"str"},{"name":"vec"},{"name":"l"}],"output":{"name":"stream"}}],[0,"binary","timely::dataflow::operators::generic","Methods to construct generic streaming and blocking binary operators.",null,null],[8,"Binary","timely::dataflow::operators::generic::binary","Methods to construct generic streaming and blocking binary operators.",null,null],[10,"binary_stream","","Creates a new dataflow operator that partitions each of its input stream by a parallelization strategy `pact`, and repeatedly invokes `logic` which can read from the input streams and write to the output stream.",56,{"inputs":[{"name":"self"},{"name":"stream"},{"name":"p1"},{"name":"p2"},{"name":"str"},{"name":"l"}],"output":{"name":"stream"}}],[10,"binary_notify","","Creates a new dataflow operator that partitions its input stream by a parallelization strategy `pact`, and repeatedly invokes `logic` which can read from the input streams, write to the output stream, and request and receive notifications. The method also requires a vector of the initial notifications the operator requires (commonly none).",56,{"inputs":[{"name":"self"},{"name":"stream"},{"name":"p1"},{"name":"p2"},{"name":"str"},{"name":"vec"},{"name":"l"}],"output":{"name":"stream"}}],[0,"operator","timely::dataflow::operators::generic","Methods to construct generic streaming and blocking unary operators.",null,null],[5,"source","timely::dataflow::operators::generic::operator","Creates a new data stream source for a scope.",null,{"inputs":[{"name":"g"},{"name":"str"},{"name":"b"}],"output":{"name":"stream"}}],[8,"Operator","","Methods to construct generic streaming and blocking operators.",null,null],[10,"unary_frontier","","Creates a new dataflow operator that partitions its input stream by a parallelization strategy `pact`, and repeteadly invokes `logic`, the function returned by the function passed as `constructor`. `logic` can read from the input stream, write to the output stream, and inspect the frontier at the input.",57,{"inputs":[{"name":"self"},{"name":"p"},{"name":"str"},{"name":"b"}],"output":{"name":"stream"}}],[10,"unary","","Creates a new dataflow operator that partitions its input stream by a parallelization strategy `pact`, and repeteadly invokes `logic`, the function returned by the function passed as `constructor`. `logic` can read from the input stream, and write to the output stream.",57,{"inputs":[{"name":"self"},{"name":"p"},{"name":"str"},{"name":"b"}],"output":{"name":"stream"}}],[10,"binary_frontier","","Creates a new dataflow operator that partitions its input streams by a parallelization strategy `pact`, and repeteadly invokes `logic`, the function returned by the function passed as `constructor`. `logic` can read from the input streams, write to the output stream, and inspect the frontier at the inputs.",57,{"inputs":[{"name":"self"},{"name":"stream"},{"name":"p1"},{"name":"p2"},{"name":"str"},{"name":"b"}],"output":{"name":"stream"}}],[10,"binary","","Creates a new dataflow operator that partitions its input streams by a parallelization strategy `pact`, and repeteadly invokes `logic`, the function returned by the function passed as `constructor`. `logic` can read from the input streams, write to the output stream, and inspect the frontier at the inputs.",57,{"inputs":[{"name":"self"},{"name":"stream"},{"name":"p1"},{"name":"p2"},{"name":"str"},{"name":"b"}],"output":{"name":"stream"}}],[10,"sink","","Creates a new dataflow operator that partitions its input stream by a parallelization strategy `pact`, and repeteadly invokes the function `logic` which can read from the input stream and inspect the frontier at the input.",57,{"inputs":[{"name":"self"},{"name":"p"},{"name":"str"},{"name":"l"}],"output":null}],[0,"builder_rc","timely::dataflow::operators::generic","Types to build operators with general shapes.",null,null],[3,"OperatorBuilder","timely::dataflow::operators::generic::builder_rc","Builds operators with generic shape.",null,null],[11,"new","","Allocates a new generic operator builder from its containing scope.",58,{"inputs":[{"name":"string"},{"name":"g"}],"output":{"name":"self"}}],[11,"set_notify","","Indicates whether the operator requires frontier information.",58,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"new_input","","Adds a new input to a generic operator builder, returning the `Pull` implementor to use.",58,{"inputs":[{"name":"self"},{"name":"stream"},{"name":"p"}],"output":{"name":"inputhandle"}}],[11,"new_input_connection","","Adds a new input with connection information to a generic operator builder, returning the `Pull` implementor to use.",58,{"inputs":[{"name":"self"},{"name":"stream"},{"name":"p"},{"generics":["antichain"],"name":"vec"}],"output":{"name":"inputhandle"}}],[11,"new_output","","Adds a new output to a generic operator builder, returning the `Pull` implementor to use.",58,null],[11,"new_output_connection","","Adds a new output with connection information to a generic operator builder, returning the `Pull` implementor to use.",58,null],[11,"build","","Creates an operator implementation from supplied logic constructor.",58,{"inputs":[{"name":"self"},{"name":"b"}],"output":null}],[0,"builder_raw","timely::dataflow::operators::generic","Types to build operators with general shapes.",null,null],[3,"OperatorShape","timely::dataflow::operators::generic::builder_raw","Contains type-free information about the operator properties.",null,null],[3,"OperatorBuilder","","Builds operators with generic shape.",null,null],[11,"inputs","","The number of inputs of this operator",59,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"outputs","","The number of outputs of this operator",59,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","Allocates a new generic operator builder from its containing scope.",60,{"inputs":[{"name":"string"},{"name":"g"}],"output":{"name":"self"}}],[11,"index","","The operator's index",60,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"shape","","Return a reference to the operator's shape",60,{"inputs":[{"name":"self"}],"output":{"name":"operatorshape"}}],[11,"set_notify","","Indicates whether the operator requires frontier information.",60,{"inputs":[{"name":"self"},{"name":"bool"}],"output":null}],[11,"new_input","","Adds a new input to a generic operator builder, returning the `Pull` implementor to use.",60,null],[11,"new_input_connection","","Adds a new input to a generic operator builder, returning the `Pull` implementor to use.",60,null],[11,"new_output","","Adds a new input to a generic operator builder, returning the `Push` implementor to use.",60,null],[11,"new_output_connection","","Adds a new input to a generic operator builder, returning the `Push` implementor to use.",60,null],[11,"build","","Creates an operator implementation from supplied logic constructor.",60,{"inputs":[{"name":"self"},{"name":"pep"},{"name":"pip"}],"output":null}],[11,"next","timely::dataflow::operators::generic","Reads the next input buffer (at some timestamp `t`) and a corresponding capability for `t`. The timestamp `t` of the input buffer can be retrieved by invoking `.time()` on the capability. Returns `None` when there's no more data available.",61,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"for_each","","Repeatedly calls `logic` till exhaustion of the available input data. `logic` receives a capability and an input buffer.",61,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"next","","Reads the next input buffer (at some timestamp `t`) and a corresponding capability for `t`. The timestamp `t` of the input buffer can be retrieved by invoking `.time()` on the capability. Returns `None` when there's no more data available.",54,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"for_each","","Repeatedly calls `logic` till exhaustion of the available input data. `logic` receives a capability and an input buffer.",54,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"frontier","","Inspect the frontier associated with this input.",54,{"inputs":[{"name":"self"}],"output":{"name":"mutableantichain"}}],[11,"session","","Obtains a session that can send data at the timestamp associated with capability `cap`.",62,{"inputs":[{"name":"self"},{"name":"capability"}],"output":{"generics":["pushcounter"],"name":"session"}}],[11,"drop","","",62,{"inputs":[{"name":"self"}],"output":null}],[11,"new","timely::dataflow::operators","Allocates a new `Notificator`.",63,null],[11,"frontier","","Reveals the elements in the frontier of the indicated input.",63,null],[11,"notify_at","","Requests a notification at the time associated with capability `cap`.",63,{"inputs":[{"name":"self"},{"name":"capability"}],"output":null}],[11,"for_each","","Repeatedly calls `logic` until exhaustion of the available notifications.",63,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"next","","Retrieve the next available notification.",63,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Allocates a new `FrontierNotificator`.",64,{"inputs":[],"output":{"name":"self"}}],[11,"from","","Allocates a new `FrontierNotificator` with initial capabilities.",64,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"notify_at","","Requests a notification at the time associated with capability `cap`. Takes ownership of the capability.",64,{"inputs":[{"name":"self"},{"name":"capability"}],"output":null}],[11,"notify_at_frontiered","","Requests a notification at the time associated with capability `cap`.",64,null],[11,"make_available","","Enables pending notifications not in advance of any element of `frontiers`.",64,null],[11,"next","","Returns the next available capability with respect to the supplied frontiers, if one exists.",64,null],[11,"for_each","","Repeatedly calls `logic` till exhaustion of the notifications made available by inspecting the frontiers.",64,null],[11,"monotonic","","Creates a notificator session in which delivered notification will be non-decreasing.",64,null],[0,"reclock","","Extension methods for `Stream` based on record-by-record transformation.",null,null],[8,"Reclock","timely::dataflow::operators::reclock","Extension trait for reclocking a stream.",null,null],[10,"reclock","","Delays records until an input is observed on the `clock` input.",65,{"inputs":[{"name":"self"},{"name":"stream"}],"output":{"name":"stream"}}],[0,"count","timely::dataflow::operators","Counts the number of records at each time.",null,null],[8,"Accumulate","timely::dataflow::operators::count","Accumulates records within a timestamp.",null,null],[10,"accumulate","","Accumulates records within a timestamp.",66,{"inputs":[{"name":"self"},{"name":"a"},{"name":"f"}],"output":{"name":"stream"}}],[11,"count","","Counts the number of records observed at each time.",66,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"stream"}}],[11,"time","timely::dataflow::operators","The timestamp associated with this capability.",67,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"delayed","","Makes a new capability for a timestamp `new_time` greater or equal to the timestamp of the source capability (`self`).",67,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"capability"}}],[11,"downgrade","","Downgrades the capability to one corresponding to `new_time`.",67,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"drop","","",67,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"capability"}}],[11,"deref","","",67,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",67,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"less_equal","","",67,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",67,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"new","","Allocates an empty capability set.",68,{"inputs":[],"output":{"name":"self"}}],[11,"insert","","Inserts `capability` into the set, discarding redundant capabilities.",68,{"inputs":[{"name":"self"},{"name":"capability"}],"output":null}],[11,"delayed","","Creates a new capability to send data at `time`.",68,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"capability"}}],[11,"downgrade","","Downgrades the set of capabilities to correspond with the times in `frontier`.",68,null],[0,"channels","timely::dataflow","Structured communication between timely dataflow operators.",null,null],[0,"pushers","timely::dataflow::channels","A collection of types that may be pushed at.",null,null],[0,"tee","timely::dataflow::channels::pushers","A `Push` implementor with a list of `Box<Push>` to forward pushes to.",null,null],[3,"Tee","timely::dataflow::channels::pushers::tee","Wraps a shared list of `Box<Push>` to forward pushes to. Owned by `Stream`.",null,null],[3,"TeeHelper","","A shared list of `Box<Push>` used to add `Push` implementors.",null,null],[11,"push","","",69,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"new","","Allocates a new pair of `Tee` and `TeeHelper`.",69,null],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"tee"}}],[11,"add_pusher","","Adds a new `Push` implementor to the list of recipients shared with a `Stream`.",70,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[0,"exchange","timely::dataflow::channels::pushers","The exchange pattern distributes pushed data between many target pushees. ",null,null],[3,"Exchange","timely::dataflow::channels::pushers::exchange","Distributes records among target pushees according to a distribution function.",null,null],[11,"new","","Allocates a new `Exchange` from a supplied set of pushers and a distribution function.",71,{"inputs":[{"name":"vec"},{"name":"h"}],"output":{"name":"exchange"}}],[11,"push","","",71,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[0,"counter","timely::dataflow::channels::pushers","A wrapper which counts the number of records pushed past and updates a shared count map.",null,null],[3,"Counter","timely::dataflow::channels::pushers::counter","A wrapper which updates shared `produced` based on the number of records pushed.",null,null],[11,"push","","",72,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"new","","Allocates a new `Counter` from a pushee and shared counts.",72,{"inputs":[{"name":"p"}],"output":{"name":"counter"}}],[11,"produced","","A references to shared changes in counts, for cloning or draining.",72,{"inputs":[{"name":"self"}],"output":{"name":"rc"}}],[0,"buffer","timely::dataflow::channels::pushers","Buffering and session mechanisms to provide the appearance of record-at-a-time sending,  with the performance of batched sends.",null,null],[3,"Buffer","timely::dataflow::channels::pushers::buffer","Buffers data sent at the same time, for efficient communication.",null,null],[3,"Session","","An output session for sending records at a specified time.",null,null],[3,"AutoflushSession","","A session which will flush itself when dropped.",null,null],[11,"new","","Creates a new `Buffer`.",73,{"inputs":[{"name":"p"}],"output":{"name":"buffer"}}],[11,"session","","Returns a `Session`, which accepts data to send at the associated time",73,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"session"}}],[11,"autoflush_session","","Allocates a new `AutoflushSession` which flushes itself on drop.",73,{"inputs":[{"name":"self"},{"name":"capability"}],"output":{"name":"autoflushsession"}}],[11,"inner","","Returns a reference to the inner `P: Push` type.",73,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"cease","","Flushes all data and pushes a `None` to `self.pusher`, indicating a flush.",73,{"inputs":[{"name":"self"}],"output":null}],[11,"give","","Provides one record at the time specified by the `Session`.",74,{"inputs":[{"name":"self"},{"name":"d"}],"output":null}],[11,"give_iterator","","Provides an iterator of records at the time specified by the `Session`.",74,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"give_content","","Provides a fully formed `Content<D>` message for senders which can use this type.",74,{"inputs":[{"name":"self"},{"name":"content"}],"output":null}],[11,"give","","Transmits a single record.",75,{"inputs":[{"name":"self"},{"name":"d"}],"output":null}],[11,"give_iterator","","Transmits records produced by an iterator.",75,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"give_content","","Transmits a pre-packed batch of data.",75,{"inputs":[{"name":"self"},{"name":"content"}],"output":null}],[11,"drop","","",75,{"inputs":[{"name":"self"}],"output":null}],[0,"pullers","timely::dataflow::channels","A collection of types that may be pulled from.",null,null],[0,"counter","timely::dataflow::channels::pullers","A wrapper which accounts records pulled past in a shared count map.",null,null],[3,"Counter","timely::dataflow::channels::pullers::counter","A wrapper which accounts records pulled past in a shared count map.",null,null],[11,"next","","Retrieves the next timestamp and batch of data.",76,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Allocates a new `Counter` from a boxed puller.",76,{"inputs":[{"name":"p"}],"output":{"name":"self"}}],[11,"consumed","","A references to shared changes in counts, for cloning or draining.",76,{"inputs":[{"name":"self"}],"output":{"name":"rc"}}],[0,"message","timely::dataflow::channels","Types relating to batching of timestamped records. Core type for communicating a collection of `D: Data` records.",null,null],[3,"Message","timely::dataflow::channels::message","A serializable representation of timestamped data.",null,null],[12,"time","","The timestamp associated with the message.",77,null],[12,"data","","The data in the message.",77,null],[12,"from","","The source worker.",77,null],[12,"seq","","A sequence number for this worker-to-worker stream.",77,null],[4,"Content","","A batch of data, represented either as serialized bytes or typed Rust objects.",null,null],[13,"Bytes","","A serialized representation of data.",78,null],[13,"Typed","","Typed data, which may be efficiently mutated or claimed for ownership.",78,null],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"message"}}],[11,"new","","Allocates a new message from a time, content, source worker id, and sequence number.",77,{"inputs":[{"name":"t"},{"name":"content"},{"name":"usize"},{"name":"usize"}],"output":{"name":"message"}}],[11,"into_bytes","","",77,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"from_bytes","","",77,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"content"}}],[11,"take","","Gives ownership of the content, leaving an empty vector behind.",78,{"inputs":[{"name":"self"}],"output":{"name":"content"}}],[11,"default_length","","Default number of elements in a typed allocated message. This could vary as a function of `std::mem::size_of::<D>()`, so is left as a method rather than a constant.",78,{"inputs":[],"output":{"name":"usize"}}],[11,"len","","The length of the underlying typed vector.",78,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"from_typed","","Constructs a `Message` from typed data, replacing its argument with `Vec::new()`.",78,{"inputs":[{"name":"vec"}],"output":{"name":"content"}}],[11,"into_typed","","Returns the typed vector, cleared, or a Vec::new() if the data are binary (and drops them on the floor, I guess! Ouch. ALLOC : dropping of binary data. likely called only by persons who pushed typed data on, ALLOC : so perhaps not all that common. Could put a panic! here just for fun! :D ALLOC : casual dropping of contents of `data`, which might have allocated memory.",78,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"push_at","","Pushes `buffer` into `pusher`, ensuring that `buffer` remains valid once returned.",78,{"inputs":[{"name":"vec"},{"name":"t"},{"name":"p"}],"output":null}],[11,"replace_with","","Swaps the contents with another vector.",78,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"vec"}}],[11,"deref","","",78,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"deref_mut","","",78,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[0,"pact","timely::dataflow::channels","Parallelization contracts, describing how data must be exchanged between operators. Parallelization contracts, describing requirements for data movement along dataflow edges.",null,null],[3,"Pipeline","timely::dataflow::channels::pact","A direct connection",null,null],[3,"Exchange","","An exchange between multiple observers by data",null,null],[3,"TimeExchange","","An exchange between multiple observers by time and data",null,null],[3,"Pusher","","Wraps a `Message<T,D>` pusher to provide a `Push<(T, Content<D>)>`.",null,null],[3,"Puller","","Wraps a `Message<T,D>` puller to provide a `Pull<(T, Content<D>)>`.",null,null],[8,"ParallelizationContract","","A `ParallelizationContract` allocates paired `Push` and `Pull` implementors.",null,null],[16,"Pusher","","Type implementing `Push` produced by this pact.",79,null],[16,"Puller","","Type implementing `Pull` produced by this pact.",79,null],[10,"connect","","Alloctes a matched pair of push and pull endpoints implementing the pact.",79,null],[11,"connect","","",80,null],[11,"new","","Allocates a new `Exchange` pact from a distribution function.",81,{"inputs":[{"name":"f"}],"output":{"name":"exchange"}}],[11,"connect","","",81,null],[11,"new","","Allocates a new `TimeExchange` pact from a distribution function.",82,{"inputs":[{"name":"f"}],"output":{"name":"timeexchange"}}],[11,"connect","","",82,null],[11,"new","","Allocates a new pusher.",83,{"inputs":[{"name":"p"},{"name":"usize"},{"name":"usize"},{"name":"usize"},{"generics":["usize"],"name":"option"},{"name":"logger"}],"output":{"name":"self"}}],[11,"push","","",83,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"new","","Allocates a new `Puller`.",84,{"inputs":[{"name":"p"},{"name":"usize"},{"name":"usize"},{"generics":["usize"],"name":"option"},{"name":"logger"}],"output":{"name":"self"}}],[11,"pull","","",84,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"scopes","timely::dataflow","Hierarchical organization of timely dataflow graphs.",null,null],[0,"root","timely::dataflow::scopes","The root scope of all timely dataflow computations.",null,null],[3,"Root","timely::dataflow::scopes::root","A `Root` is the entry point to a timely dataflow computation. It wraps a `Allocate`, and has a list of child `Operate`s.",null,null],[11,"new","","Allocates a new `Root` bound to a channel allocator.",85,{"inputs":[{"name":"a"},{"generics":["fn"],"name":"arc"}],"output":{"name":"root"}}],[11,"step","","Performs one step of the computation.",85,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"step_while","","Calls `self.step()` as long as `func` evaluates to true.",85,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"index","","The index of the worker out of its peers.",85,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"peers","","The total number of peer workers.",85,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"dataflow","","Construct a new dataflow.",85,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"dataflow_using","","Construct a new dataflow binding resources that are released only after the dataflow is dropped.",85,{"inputs":[{"name":"self"},{"name":"v"},{"name":"f"}],"output":{"name":"r"}}],[11,"new_identifier","","",85,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"index","","",85,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"peers","","",85,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"allocate","","",85,null],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[0,"child","timely::dataflow::scopes","A child dataflow scope, used to build nested dataflow scopes.",null,null],[3,"Child","timely::dataflow::scopes::child","A `Child` wraps a `Subgraph` and a parent `G: Scope`. It manages the addition of `Operate`s to a subgraph, and the connection of edges between them.",null,null],[12,"subgraph","","The subgraph under assembly.",86,null],[12,"parent","","A copy of the child's parent scope.",86,null],[12,"logging","","The log writer for this scope.",86,null],[11,"index","","This worker's unique identifier.",86,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"peers","","The total number of workers in the computation.",86,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new_identifier","","",86,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"name","","",86,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"addr","","",86,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"vec"}}],[11,"add_edge","","",86,{"inputs":[{"name":"self"},{"name":"source"},{"name":"target"}],"output":null}],[11,"add_operator_with_index","","",86,{"inputs":[{"name":"self"},{"name":"sc"},{"name":"usize"}],"output":null}],[11,"allocate_operator_index","","",86,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"scoped","","",86,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"logging","","",86,{"inputs":[{"name":"self"}],"output":{"name":"logger"}}],[11,"index","","",86,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"peers","","",86,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"allocate","","",86,null],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[8,"ScopeParent","timely::dataflow::scopes","The information a child scope needs from its parent.",null,null],[16,"Timestamp","","The timestamp associated with data in this scope.",87,null],[10,"new_identifier","","Allocates a new locally unique identifier.",87,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[8,"Scope","","The fundamental operations required to add and connect operators in a timely dataflow graph.",null,null],[10,"name","","A useful name describing the scope.",88,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[10,"addr","","A sequence of scope identifiers describing the path from the `Root` to this scope.",88,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"vec"}}],[10,"add_edge","","Connects a source of data with a target of the data. This only links the two for the purposes of tracking progress, rather than effect any data movement itself.",88,{"inputs":[{"name":"self"},{"name":"source"},{"name":"target"}],"output":null}],[11,"add_operator","","Adds a child `Operate` to the builder's scope. Returns the new child's index.",88,{"inputs":[{"name":"self"},{"name":"sc"}],"output":{"name":"usize"}}],[10,"allocate_operator_index","","Allocates a new operator index, for use with `add_operator_with_index`.",88,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"add_operator_with_index","","Adds a child `Operate` to the builder's scope using a supplied index.",88,{"inputs":[{"name":"self"},{"name":"sc"},{"name":"usize"}],"output":null}],[10,"scoped","","Creates a `Subgraph` from a closure acting on a `Child` scope, and returning whatever the closure returns.",88,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[10,"logging","","Obtains the logger associated with this scope.",88,{"inputs":[{"name":"self"}],"output":{"name":"logger"}}],[0,"stream","timely::dataflow","A handle to a typed stream of timely data.",null,null],[3,"Stream","timely::dataflow::stream","Abstraction of a stream of `D: Data` records timestamped with `S::Timestamp`.",null,null],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"stream"}}],[11,"connect_to","","Connects the stream to a destination.",89,{"inputs":[{"name":"self"},{"name":"target"},{"name":"p"},{"name":"usize"}],"output":null}],[11,"new","","Allocates a `Stream` from a supplied `Source` name and rendezvous point.",89,{"inputs":[{"name":"source"},{"name":"teehelper"},{"name":"s"}],"output":{"name":"self"}}],[11,"name","","The name of the stream's source operator.",89,{"inputs":[{"name":"self"}],"output":{"name":"source"}}],[11,"scope","","The scope immediately containing the stream.",89,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[0,"execute","timely","Starts a timely dataflow execution from configuration information and per-worker logic.",null,null],[5,"example","timely::execute","Executes a single-threaded timely dataflow computation.",null,{"inputs":[{"name":"f"}],"output":{"name":"t"}}],[5,"execute","","Executes a timely dataflow from a configuration and per-communicator logic.",null,{"inputs":[{"name":"configuration"},{"name":"f"}],"output":{"generics":["workerguards","string"],"name":"result"}}],[5,"execute_logging","","Executes a timely dataflow from a configuration and per-communicator logic.",null,{"inputs":[{"name":"configuration"},{"name":"loggerconfig"},{"name":"f"}],"output":{"generics":["workerguards","string"],"name":"result"}}],[5,"execute_from_args","","Executes a timely dataflow from supplied arguments and per-communicator logic.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"generics":["workerguards","string"],"name":"result"}}],[5,"execute_from_args_logging","","Executes a timely dataflow from supplied arguments and per-communicator logic.",null,{"inputs":[{"name":"i"},{"name":"loggerconfig"},{"name":"f"}],"output":{"generics":["workerguards","string"],"name":"result"}}],[0,"order","timely","Traits and types for partially ordered sets.",null,null],[8,"PartialOrder","timely::order","A type that is partially ordered.",null,null],[11,"less_than","","Returns true iff one element is strictly less than the other.",90,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"less_equal","","Returns true iff one element is less than or equal to the other.",90,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[8,"TotalOrder","","A type that is totally ordered.",null,null],[0,"logging","timely","Traits, implementations, and macros related to logging timely events.",null,null],[3,"LoggerConfig","timely::logging","Shared wrapper for log writer constructors.",null,null],[12,"timely_logging","","Log writer constructors.",91,null],[12,"communication_logging","","Log writer constructors for communication.",91,null],[3,"EventPusherTee","","An EventPusher that supports dynamically adding new EventPushers.",null,null],[3,"OperatesEvent","","The creation of an `Operate` implementor.",null,null],[12,"id","","Worker-unique identifier for the operator.",92,null],[12,"addr","","Sequence of nested scope identifiers indicating the path from the root to this instance.",92,null],[12,"name","","A helpful name.",92,null],[3,"ChannelsEvent","","The creation of a channel between operators.",null,null],[12,"id","","Worker-unique identifier for the channel",93,null],[12,"scope_addr","","Sequence of nested scope identifiers indicating the path from the root to this instance.",93,null],[12,"source","","Source descriptor, indicating operator index and output port.",93,null],[12,"target","","Target descriptor, indicating operator index and input port.",93,null],[3,"ProgressEvent","","Send or receive of progress information.",null,null],[12,"is_send","","`true` if the event is a send, and `false` if it is a receive.",94,null],[12,"source","","Source worker index.",94,null],[12,"comm_channel","","Communication channel identifier",94,null],[12,"seq_no","","Message sequence number.",94,null],[12,"addr","","Sequence of nested scope identifiers indicating the path from the root to this instance.",94,null],[12,"messages","","List of message updates, containing Target descriptor, timestamp as string, and delta.",94,null],[12,"internal","","List of capability updates, containing Source descriptor, timestamp as string, and delta.",94,null],[3,"PushProgressEvent","","External progress pushed onto an operator",null,null],[12,"op_id","","Worker-unique operator identifier",95,null],[3,"MessagesEvent","","Message send or receive event",null,null],[12,"is_send","","`true` if send event, `false` if receive event.",96,null],[12,"channel","","Channel identifier",96,null],[12,"comm_channel","","Communication channel identifier",96,null],[12,"source","","Source worker index.",96,null],[12,"target","","Target worker index.",96,null],[12,"seq_no","","Message sequence number.",96,null],[12,"length","","Number of typed records in the message.",96,null],[3,"ScheduleEvent","","Operator start or stop.",null,null],[12,"id","","Worker-unique identifier for the operator, linkable to the identifiers in `OperatesEvent`.",97,null],[12,"start_stop","","`Start` if the operator is starting, `Stop` if it is stopping. activity is true if it looks like some useful work was performed during this call (data was read or written, notifications were requested / delivered)",97,null],[3,"ApplicationEvent","","Application-defined code startor stop",null,null],[12,"id","","Unique event type identifier",98,null],[12,"is_start","","True when activity begins, false when it stops",98,null],[3,"GuardedMessageEvent","","Application-defined code start or stop",null,null],[12,"is_start","","True when activity begins, false when it stops",99,null],[3,"GuardedProgressEvent","","Application-defined code start or stop",null,null],[12,"is_start","","True when activity begins, false when it stops",100,null],[3,"TimelySetup","","Identifier of the worker that generated a log line",null,null],[12,"index","","Worker index",101,null],[3,"CommChannelsEvent","","Event on a communication channel",null,null],[12,"comm_channel","","Communication channel identifier",102,null],[12,"comm_channel_kind","","Kind of communication channel (progress / data)",102,null],[3,"InputEvent","","Input logic start/stop",null,null],[12,"start_stop","","True when activity begins, false when it stops",103,null],[4,"StartStop","","Records the starting and stopping of an operator.",null,null],[13,"Start","","Operator starts.",104,null],[13,"Stop","","Operator stops; did it have any activity?",104,null],[12,"activity","timely::logging::StartStop","Did the operator perform non-trivial work.",104,null],[4,"CommChannelKind","timely::logging","Kind of communication channel",null,null],[13,"Progress","","Communication channel carrying progress information",105,null],[13,"Data","","Communication channel carrying data",105,null],[4,"TimelyEvent","","An event in a timely worker",null,null],[13,"Operates","","",106,null],[13,"Channels","","",106,null],[13,"Progress","","",106,null],[13,"PushProgress","","",106,null],[13,"Messages","","",106,null],[13,"Schedule","","",106,null],[13,"Application","","",106,null],[13,"GuardedMessage","","",106,null],[13,"GuardedProgress","","",106,null],[13,"CommChannels","","",106,null],[13,"Input","","",106,null],[5,"new_inactive_logger","","A log writer that does not log anything.",null,{"inputs":[],"output":{"name":"logger"}}],[6,"Logger","","A log writer.",null,null],[11,"new","","Makes a new `LoggerConfig` wrapper from a `LogManager`.",91,{"inputs":[{"name":"f1"},{"name":"f2"}],"output":{"name":"self"}}],[11,"default","","",91,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Construct a new tee with no subscribers.",107,{"inputs":[],"output":{"name":"self"}}],[11,"subscribe","","Subscribe to this tee.",107,{"inputs":[{"name":"self"},{"generics":["eventpusher"],"name":"box"}],"output":null}],[11,"push","","",107,{"inputs":[{"name":"self"},{"name":"event"}],"output":null}],[11,"entomb","","",92,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"extent","","",92,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"exhume","","",92,null],[11,"fmt","","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"operatesevent"}}],[11,"entomb","","",93,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"extent","","",93,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"exhume","","",93,null],[11,"fmt","","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"channelsevent"}}],[11,"entomb","","",94,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"extent","","",94,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"exhume","","",94,null],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"progressevent"}}],[11,"entomb","","",95,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"extent","","",95,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"exhume","","",95,null],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"pushprogressevent"}}],[11,"entomb","","",96,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"extent","","",96,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"exhume","","",96,null],[11,"fmt","","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"messagesevent"}}],[11,"entomb","","",104,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"extent","","",104,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"exhume","","",104,null],[11,"fmt","","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"startstop"}}],[11,"eq","","",104,{"inputs":[{"name":"self"},{"name":"startstop"}],"output":{"name":"bool"}}],[11,"ne","","",104,{"inputs":[{"name":"self"},{"name":"startstop"}],"output":{"name":"bool"}}],[11,"entomb","","",97,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"extent","","",97,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"exhume","","",97,null],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"scheduleevent"}}],[11,"entomb","","",98,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"extent","","",98,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"exhume","","",98,null],[11,"fmt","","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"applicationevent"}}],[11,"entomb","","",99,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"extent","","",99,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"exhume","","",99,null],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"guardedmessageevent"}}],[11,"entomb","","",100,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"extent","","",100,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"exhume","","",100,null],[11,"fmt","","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"guardedprogressevent"}}],[11,"entomb","","",101,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"extent","","",101,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"exhume","","",101,null],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",101,{"inputs":[{"name":"self"},{"name":"timelysetup"}],"output":{"name":"bool"}}],[11,"ne","","",101,{"inputs":[{"name":"self"},{"name":"timelysetup"}],"output":{"name":"bool"}}],[11,"hash","","",101,null],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"timelysetup"}}],[11,"entomb","","",105,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"extent","","",105,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"exhume","","",105,null],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"commchannelkind"}}],[11,"entomb","","",102,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"extent","","",102,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"exhume","","",102,null],[11,"fmt","","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"commchannelsevent"}}],[11,"entomb","","",103,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"extent","","",103,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"exhume","","",103,null],[11,"fmt","","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"inputevent"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"timelyevent"}}],[11,"entomb","","",106,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"extent","","",106,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"exhume","","",106,null],[11,"from","","",106,{"inputs":[{"name":"operatesevent"}],"output":{"name":"timelyevent"}}],[11,"from","","",106,{"inputs":[{"name":"channelsevent"}],"output":{"name":"timelyevent"}}],[11,"from","","",106,{"inputs":[{"name":"progressevent"}],"output":{"name":"timelyevent"}}],[11,"from","","",106,{"inputs":[{"name":"pushprogressevent"}],"output":{"name":"timelyevent"}}],[11,"from","","",106,{"inputs":[{"name":"messagesevent"}],"output":{"name":"timelyevent"}}],[11,"from","","",106,{"inputs":[{"name":"scheduleevent"}],"output":{"name":"timelyevent"}}],[11,"from","","",106,{"inputs":[{"name":"applicationevent"}],"output":{"name":"timelyevent"}}],[11,"from","","",106,{"inputs":[{"name":"guardedmessageevent"}],"output":{"name":"timelyevent"}}],[11,"from","","",106,{"inputs":[{"name":"guardedprogressevent"}],"output":{"name":"timelyevent"}}],[11,"from","","",106,{"inputs":[{"name":"commchannelsevent"}],"output":{"name":"timelyevent"}}],[11,"from","","",106,{"inputs":[{"name":"inputevent"}],"output":{"name":"timelyevent"}}],[8,"Data","timely","A composite trait for types usable as data in timely dataflow.",null,null],[8,"ExchangeData","","A composite trait for types usable on exchange channels in timely dataflow.",null,null],[11,"from_args","","Constructs a new configuration by parsing supplied text arguments.",2,{"inputs":[{"name":"i"}],"output":{"generics":["configuration","string"],"name":"result"}}],[11,"enter","timely::dataflow::stream","",89,{"inputs":[{"name":"self"},{"name":"child"}],"output":{"generics":["child"],"name":"stream"}}],[11,"leave","","",89,{"inputs":[{"name":"self"}],"output":{"name":"stream"}}],[11,"new_input","timely::dataflow::scopes::child","",86,null],[11,"input_from","","",86,{"inputs":[{"name":"self"},{"name":"handle"}],"output":{"generics":["child"],"name":"stream"}}],[11,"loop_variable","","",86,null],[11,"connect_loop","timely::dataflow::stream","",89,{"inputs":[{"name":"self"},{"name":"handle"}],"output":null}],[11,"concat","","",89,{"inputs":[{"name":"self"},{"name":"stream"}],"output":{"name":"stream"}}],[11,"partition","","",89,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"f"}],"output":{"generics":["stream"],"name":"vec"}}],[11,"map","","",89,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"stream"}}],[11,"map_in_place","","",89,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"stream"}}],[11,"flat_map","","",89,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"stream"}}],[11,"inspect","","",89,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"stream"}}],[11,"inspect_batch","","",89,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"stream"}}],[11,"filter","","",89,{"inputs":[{"name":"self"},{"name":"l"}],"output":{"name":"stream"}}],[11,"delay","","",89,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"stream"}}],[11,"delay_batch","","",89,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"stream"}}],[11,"exchange","","",89,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"stream"}}],[11,"exchange_ts","","",89,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"stream"}}],[11,"broadcast","","",89,{"inputs":[{"name":"self"}],"output":{"name":"stream"}}],[11,"probe","","",89,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"probe_with","","",89,{"inputs":[{"name":"self"},{"name":"handle"}],"output":{"name":"stream"}}],[11,"capture_into","","",89,{"inputs":[{"name":"self"},{"name":"p"}],"output":null}],[11,"state_machine","","",89,{"inputs":[{"name":"self"},{"name":"f"},{"name":"h"}],"output":{"name":"stream"}}],[11,"aggregate","","",89,{"inputs":[{"name":"self"},{"name":"f"},{"name":"g"},{"name":"h"}],"output":{"name":"stream"}}],[11,"unary_notify","","",89,{"inputs":[{"name":"self"},{"name":"p"},{"name":"str"},{"name":"vec"},{"name":"l"}],"output":{"name":"stream"}}],[11,"unary_stream","","",89,{"inputs":[{"name":"self"},{"name":"p"},{"name":"str"},{"name":"l"}],"output":{"name":"stream"}}],[11,"binary_stream","","",89,{"inputs":[{"name":"self"},{"name":"stream"},{"name":"p1"},{"name":"p2"},{"name":"str"},{"name":"l"}],"output":{"name":"stream"}}],[11,"binary_notify","","",89,{"inputs":[{"name":"self"},{"name":"stream"},{"name":"p1"},{"name":"p2"},{"name":"str"},{"name":"vec"},{"name":"l"}],"output":{"name":"stream"}}],[11,"unary_frontier","","",89,{"inputs":[{"name":"self"},{"name":"p"},{"name":"str"},{"name":"b"}],"output":{"name":"stream"}}],[11,"unary","","",89,{"inputs":[{"name":"self"},{"name":"p"},{"name":"str"},{"name":"b"}],"output":{"name":"stream"}}],[11,"binary_frontier","","",89,{"inputs":[{"name":"self"},{"name":"stream"},{"name":"p1"},{"name":"p2"},{"name":"str"},{"name":"b"}],"output":{"name":"stream"}}],[11,"binary","","",89,{"inputs":[{"name":"self"},{"name":"stream"},{"name":"p1"},{"name":"p2"},{"name":"str"},{"name":"b"}],"output":{"name":"stream"}}],[11,"sink","","",89,{"inputs":[{"name":"self"},{"name":"p"},{"name":"str"},{"name":"l"}],"output":null}],[11,"reclock","","",89,{"inputs":[{"name":"self"},{"name":"stream"}],"output":{"name":"stream"}}],[11,"accumulate","","",89,{"inputs":[{"name":"self"},{"name":"a"},{"name":"f"}],"output":{"name":"stream"}}]],"paths":[[8,"Push"],[8,"Pull"],[4,"Configuration"],[3,"ChangeBatch"],[3,"Antichain"],[3,"MutableAntichain"],[3,"PointstampCounter"],[4,"Summary"],[3,"Product"],[3,"Source"],[3,"Target"],[3,"SubgraphBuilder"],[3,"Subgraph"],[3,"Summary"],[3,"Builder"],[3,"Tracker"],[8,"Timestamp"],[8,"PathSummary"],[3,"RootTimestamp"],[3,"RootSummary"],[8,"Operate"],[3,"Progcaster"],[8,"Enter"],[8,"EnterAt"],[8,"Leave"],[8,"Input"],[3,"Handle"],[8,"UnorderedInput"],[3,"UnorderedHandle"],[8,"LoopVariable"],[8,"ConnectLoop"],[8,"Concat"],[8,"Concatenate"],[8,"Partition"],[8,"Map"],[8,"Inspect"],[8,"Filter"],[8,"Delay"],[8,"Exchange"],[8,"Broadcast"],[8,"Probe"],[3,"Handle"],[8,"ToStream"],[8,"Capture"],[8,"Replay"],[8,"Extract"],[4,"Event"],[3,"EventLink"],[3,"EventWriter"],[3,"EventReader"],[8,"EventIterator"],[8,"EventPusher"],[8,"StateMachine"],[8,"Aggregate"],[3,"FrontieredInputHandle"],[8,"Unary"],[8,"Binary"],[8,"Operator"],[3,"OperatorBuilder"],[3,"OperatorShape"],[3,"OperatorBuilder"],[3,"InputHandle"],[3,"OutputHandle"],[3,"Notificator"],[3,"FrontierNotificator"],[8,"Reclock"],[8,"Accumulate"],[3,"Capability"],[3,"CapabilitySet"],[3,"Tee"],[3,"TeeHelper"],[3,"Exchange"],[3,"Counter"],[3,"Buffer"],[3,"Session"],[3,"AutoflushSession"],[3,"Counter"],[3,"Message"],[4,"Content"],[8,"ParallelizationContract"],[3,"Pipeline"],[3,"Exchange"],[3,"TimeExchange"],[3,"Pusher"],[3,"Puller"],[3,"Root"],[3,"Child"],[8,"ScopeParent"],[8,"Scope"],[3,"Stream"],[8,"PartialOrder"],[3,"LoggerConfig"],[3,"OperatesEvent"],[3,"ChannelsEvent"],[3,"ProgressEvent"],[3,"PushProgressEvent"],[3,"MessagesEvent"],[3,"ScheduleEvent"],[3,"ApplicationEvent"],[3,"GuardedMessageEvent"],[3,"GuardedProgressEvent"],[3,"TimelySetup"],[3,"CommChannelsEvent"],[3,"InputEvent"],[4,"StartStop"],[4,"CommChannelKind"],[4,"TimelyEvent"],[3,"EventPusherTee"]]};
searchIndex["timely_communication"] = {"doc":"A simple communication infrastructure providing typed exchange channels.","items":[[0,"allocator","timely_communication","Types and traits for the allocation of channels between threads, process, and computers.",null,null],[0,"thread","timely_communication::allocator","",null,null],[3,"Thread","timely_communication::allocator::thread","",null,null],[3,"Pusher","","",null,null],[3,"Puller","","",null,null],[11,"index","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"peers","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"allocate","","",0,null],[11,"new","","",0,null],[11,"push","","",1,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"pull","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"process","timely_communication::allocator","",null,null],[3,"Process","timely_communication::allocator::process","",null,null],[11,"inner","","",3,{"inputs":[{"name":"self"}],"output":{"name":"thread"}}],[11,"new_vector","","",3,{"inputs":[{"name":"usize"}],"output":{"generics":["process"],"name":"vec"}}],[11,"index","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"peers","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"allocate","","",3,null],[0,"binary","timely_communication::allocator","",null,null],[3,"Binary","timely_communication::allocator::binary","",null,null],[12,"inner","","",4,null],[12,"index","","",4,null],[12,"peers","","",4,null],[12,"allocated","","",4,null],[12,"readers","","",4,null],[12,"senders","","",4,null],[12,"log_sender","","",4,null],[11,"inner","","",4,{"inputs":[{"name":"self"}],"output":{"name":"process"}}],[11,"index","","",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"peers","","",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"allocate","","",4,null],[0,"generic","timely_communication::allocator","A generic allocator, wrapping known implementors of `Allocate`.",null,null],[4,"Generic","timely_communication::allocator::generic","Enumerates known implementors of `Allocate`. Passes trait method calls on to members.",null,null],[13,"Thread","","",5,null],[13,"Process","","",5,null],[13,"Binary","","",5,null],[11,"index","","The index of the worker out of `(0..self.peers())`.",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"peers","","The number of workers.",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"allocate","","Constructs several send endpoints and one receive endpoint.",5,null],[11,"index","","",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"peers","","",5,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"allocate","","",5,null],[8,"Allocate","timely_communication::allocator","",null,null],[10,"index","","The index of the worker out of `(0..self.peers())`.",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"peers","","The number of workers.",6,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"allocate","","Constructs several send endpoints and one receive endpoint.",6,null],[0,"initialize","timely_communication","Initialization logic for a generic instance of the `Allocate` channel allocation trait.",null,null],[3,"WorkerGuards","timely_communication::initialize","Maintains `JoinHandle`s for worker threads.",null,null],[4,"Configuration","","Possible configurations for the communication infrastructure.",null,null],[13,"Thread","","Use one thread.",7,null],[13,"Process","","Use one process with an indicated number of threads.",7,null],[13,"Cluster","","Expect multiple processes indicated by `(threads, process, host_list, report)`.",7,null],[5,"initialize","","Initializes communication and executes a distributed computation.",null,{"inputs":[{"name":"configuration"},{"name":"f"},{"generics":["fn"],"name":"arc"}],"output":{"generics":["workerguards","string"],"name":"result"}}],[11,"from_args","","Constructs a new configuration by parsing supplied text arguments.",7,{"inputs":[{"name":"i"}],"output":{"generics":["configuration","string"],"name":"result"}}],[11,"join","","Waits on the worker threads and returns the results they produce.",8,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"vec"}}],[11,"drop","","",8,{"inputs":[{"name":"self"}],"output":null}],[0,"logging","timely_communication","",null,null],[3,"ActiveBufferingLogger","timely_communication::logging","",null,null],[3,"BufferingLogger","","",null,null],[3,"CommsSetup","","",null,null],[12,"sender","","",9,null],[12,"process","","",9,null],[12,"remote","","",9,null],[3,"CommunicationEvent","","",null,null],[12,"is_send","","true for send event, false for receive event",10,null],[12,"comm_channel","","communication channel id",10,null],[12,"source","","source worker id",10,null],[12,"target","","target worker id",10,null],[12,"seqno","","sequence number",10,null],[3,"SerializationEvent","","Serialization",null,null],[12,"seq_no","","",11,null],[12,"is_start","","",11,null],[4,"LoggerBatch","","",null,null],[13,"Logs","","",12,null],[13,"End","","",12,null],[4,"CommsEvent","","",null,null],[13,"Communication","","",13,null],[13,"Serialization","","",13,null],[5,"get_precise_time_ns","","Returns the value of an high resolution performance counter, in nanoseconds, rebased to be roughly comparable to an unix timestamp. Useful for comparing and merging logs from different machines (precision is limited by the precision of the wall clock base; clock skew effects should be taken into consideration).",null,{"inputs":[],"output":{"name":"u64"}}],[6,"CommsLogger","","A log writer for a communication thread.",null,null],[11,"log","","",14,{"inputs":[{"name":"self"},{"name":"l"}],"output":null}],[11,"new","","",15,{"inputs":[{"name":"s"},{"generics":["fn"],"name":"box"}],"output":{"name":"self"}}],[11,"new_inactive","","",15,{"inputs":[],"output":{"generics":["bufferinglogger"],"name":"rc"}}],[11,"when_enabled","","",15,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"flush","","",15,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",15,{"inputs":[{"name":"self"}],"output":null}],[11,"entomb","","",9,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"extent","","",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"exhume","","",9,null],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"commssetup"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"commssetup"}],"output":{"name":"bool"}}],[11,"hash","","",9,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"commssetup"}}],[11,"entomb","","",10,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"extent","","",10,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"exhume","","",10,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"communicationevent"}}],[11,"entomb","","",11,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"extent","","",11,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"exhume","","",11,null],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"serializationevent"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"commsevent"}}],[11,"entomb","","",13,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"result"}}],[11,"extent","","",13,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"exhume","","",13,null],[11,"from","","",13,{"inputs":[{"name":"communicationevent"}],"output":{"name":"commsevent"}}],[11,"from","","",13,{"inputs":[{"name":"serializationevent"}],"output":{"name":"commsevent"}}],[8,"Data","timely_communication","A composite trait for types that may be used with channels.",null,null],[8,"Serialize","","Conversions to and from `Vec<u8>`.",null,null],[10,"into_bytes","","Append the binary representation of `self` to a vector of bytes. The `&mut self` argument may be mutated, but the second argument should only be appended to.",16,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[10,"from_bytes","","Recover an instance of Self from its binary representation. The `&mut Vec<u8>` argument may be taken with `mem::replace` if it is needed.",16,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[8,"Push","","Pushing elements of type `T`.",null,null],[10,"push","","Pushes `element` and provides the opportunity to take ownership.",17,{"inputs":[{"name":"self"},{"name":"option"}],"output":null}],[11,"send","","Pushes `element` and drops any resulting resources.",17,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"done","","Pushes `None`, conventionally signalling a flush.",17,{"inputs":[{"name":"self"}],"output":null}],[8,"Pull","","Pulling elements of type `T`.",null,null],[10,"pull","","Pulls an element and provides the opportunity to take ownership.",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"recv","","Takes an `Option<T>` and leaves `None` behind.",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"Thread"],[3,"Pusher"],[3,"Puller"],[3,"Process"],[3,"Binary"],[4,"Generic"],[8,"Allocate"],[4,"Configuration"],[3,"WorkerGuards"],[3,"CommsSetup"],[3,"CommunicationEvent"],[3,"SerializationEvent"],[4,"LoggerBatch"],[4,"CommsEvent"],[3,"ActiveBufferingLogger"],[3,"BufferingLogger"],[8,"Serialize"],[8,"Push"],[8,"Pull"]]};
searchIndex["timely_sort"] = {"doc":"Types and traits for radix sorting.","items":[[3,"LSBRadixSorter","timely_sort","A few buffers capable of radix sorting by least significant byte.",null,null],[3,"LSBSWCRadixSorter","","A few buffers capable of radix sorting by least significant byte.",null,null],[3,"MSBRadixSorter","","A \"most-significant byte\" (MSB) radix sorter. ",null,null],[11,"push","","",0,{"inputs":[{"name":"self"},{"name":"t"},{"name":"f"}],"output":null}],[11,"push_batch","","",0,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"f"}],"output":null}],[11,"finish_into","","",0,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"f"}],"output":null}],[11,"new","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"rebalance","","",0,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"usize"}],"output":null}],[11,"push","","",1,{"inputs":[{"name":"self"},{"name":"t"},{"name":"f"}],"output":null}],[11,"push_batch","","",1,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"f"}],"output":null}],[11,"finish_into","","",1,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"f"}],"output":null}],[11,"new","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"rebalance","","",1,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"usize"}],"output":null}],[11,"push","","",2,{"inputs":[{"name":"self"},{"name":"t"},{"name":"f"}],"output":null}],[11,"push_batch","","",2,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"f"}],"output":null}],[11,"finish_into","","",2,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"f"}],"output":null}],[11,"sort","","",2,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"f"}],"output":null}],[11,"new","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"rebalance","","",2,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"usize"}],"output":null}],[11,"finish_into_and","","Finishes the sorting for the session, using the supplied finalizing action when given the option to exit early.",2,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"f"},{"name":"l"}],"output":null}],[11,"sort_and","","Radix sorts a sequence of buffers, possibly stopping early on small batches and calling `action`.",2,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"f"},{"name":"l"}],"output":null}],[8,"Unsigned","","An unsigned integer fit for use as a radix key.",null,null],[10,"bytes","","",3,{"inputs":[],"output":{"name":"usize"}}],[10,"as_u64","","",3,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[8,"RadixSorter","","Functionality provided by a radix sorter.",null,null],[10,"push","","Pushes a single element using the supplied radix key function.",4,{"inputs":[{"name":"self"},{"name":"t"},{"name":"f"}],"output":null}],[10,"push_batch","","Pushes a batch of elements using the supplied radix key function.",4,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"f"}],"output":null}],[11,"extend","","Pushes a sequence of elements using the supplied radix key function.",4,{"inputs":[{"name":"self"},{"name":"i"},{"name":"f"}],"output":null}],[11,"finish","","Completes the sorting session and returns the sorted results.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["vec"],"name":"vec"}}],[10,"finish_into","","Completes the sorting session and puts the sorted results into `target`.",4,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"f"}],"output":null}],[11,"sort","","Sorts batched data using the supplied radix key function.",4,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"f"}],"output":null}],[8,"RadixSorterBase","","Functionality independent of the type `U` used to sort.",null,null],[10,"new","","Allocates a new instance of the radix sorter.",5,{"inputs":[],"output":{"name":"self"}}],[11,"recycle","","Provides empty buffers for the radix sorter to use.",5,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[10,"rebalance","","Provides empty buffers for the radix sorter to use, with the intent that it should own at most `intended`.",5,{"inputs":[{"name":"self"},{"name":"vec"},{"name":"usize"}],"output":null}]],"paths":[[3,"LSBRadixSorter"],[3,"LSBSWCRadixSorter"],[3,"MSBRadixSorter"],[8,"Unsigned"],[8,"RadixSorter"],[8,"RadixSorterBase"]]};
searchIndex["unicode_xid"] = {"doc":"Determine if a `char` is a valid identifier for a parser and/or lexer according to Unicode Standard Annex #31 rules.","items":[[17,"UNICODE_VERSION","unicode_xid","The version of Unicode that this version of unicode-xid is based on.",null,null],[8,"UnicodeXID","","Methods for determining if a character is a valid identifier character.",null,null],[10,"is_xid_start","","Returns whether the specified character satisfies the 'XID_Start' Unicode property.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_xid_continue","","Returns whether the specified `char` satisfies the 'XID_Continue' Unicode property.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[8,"UnicodeXID"]]};
initSearch(searchIndex);
